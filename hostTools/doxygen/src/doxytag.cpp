
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE tagYYrestart(tagYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int tagYYleng;

extern FILE *tagYYin, *tagYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tagYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up tagYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via tagYYrestart()), so that the user can continue scanning by
	 * just pointing tagYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when tagYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int tagYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow tagYYwrap()'s to do buffer switches
 * instead of setting up a fresh tagYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void tagYYrestart (FILE *input_file  );
void tagYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE tagYY_create_buffer (FILE *file,int size  );
void tagYY_delete_buffer (YY_BUFFER_STATE b  );
void tagYY_flush_buffer (YY_BUFFER_STATE b  );
void tagYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void tagYYpop_buffer_state (void );

static void tagYYensure_buffer_stack (void );
static void tagYY_load_buffer_state (void );
static void tagYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER tagYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE tagYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE tagYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE tagYY_scan_bytes (yyconst char *bytes,int len  );

void *tagYYalloc (yy_size_t  );
void *tagYYrealloc (void *,yy_size_t  );
void tagYYfree (void *  );

#define yy_new_buffer tagYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        tagYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tagYY_create_buffer(tagYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        tagYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tagYY_create_buffer(tagYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *tagYYin = (FILE *) 0, *tagYYout = (FILE *) 0;

typedef int yy_state_type;

extern int tagYYlineno;

int tagYYlineno = 1;

extern char *tagYYtext;
#define yytext_ptr tagYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up tagYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	tagYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[693] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  125,  122,  123,  122,   78,   80,   78,   80,
      122,  100,   99,   98,   98,   98,   95,  101,  122,  103,
      111,  111,  105,  105,  110,  122,  122,   91,  122,   92,
      122,   89,   89,   89,  122,  119,  118,  119,  118,   84,

      120,  121,   83,   82,  122,   80,   12,   12,   15,   13,
       15,   25,   25,   23,   17,   17,   23,   23,   23,   36,
       36,   36,   26,   34,   35,   36,   62,   62,   67,   67,
       55,   55,   60,   60,   69,   69,   74,   74,   38,   38,
       43,   43,   46,   46,   52,   52,   47,    0,    0,    0,
        0,    0,   80,    0,    0,    0,   80,    0,   99,   98,
       98,   98,   95,  101,    0,    0,  111,  111,    0,    0,
        0,    0,    0,   92,    0,    0,   89,   89,   89,   89,
        0,    0,    0,    0,    0,    0,   84,  121,   83,   82,
        0,   80,    0,   13,    0,    0,    0,   17,    0,    0,

       22,    0,    0,    0,   26,    0,    0,    0,    0,    0,
       35,    0,    0,   62,    0,    0,    0,    0,    0,   55,
        0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
        0,   38,    0,    0,    0,    0,    0,   46,    0,    0,
        0,    0,    0,   79,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,   98,   98,  102,    0,  111,
        0,    0,    0,  108,    0,    0,    0,   89,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,    0,    0,    0,    0,    0,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,    0,    1,    0,    0,   80,    0,    0,   98,   98,
        0,  111,  107,  106,    0,    0,    0,    0,   89,  112,
        0,  115,  114,    0,    0,    0,    0,    0,   24,   24,
       19,   18,    0,    0,   29,   28,    0,    0,    0,    0,
        0,   64,   63,    0,    0,    0,   57,   56,    0,    0,
        0,   71,   70,    0,    0,    0,   40,   39,    0,    0,
        0,   49,   48,    0,    0,    0,    0,   76,    0,    0,
        0,    0,   80,    0,    0,   98,    0,    0,  111,    0,

       90,    0,    0,   89,  113,    0,    0,    0,    0,    0,
       24,    0,   27,    0,    0,   32,    0,   65,    0,    0,
       58,    0,   75,   72,    0,   44,   41,    0,   53,   50,
        0,    0,    0,    0,    0,    0,    0,    0,   80,    0,
        0,    0,    0,    0,  111,  109,    0,   87,   89,  117,
      116,   81,    0,   14,   24,   21,   31,   30,    0,   66,
        0,   59,   73,   42,   51,    0,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,  111,    0,
        0,   89,    0,   24,    0,   61,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,  104,    0,   86,

       89,    0,   24,   68,    0,    0,   77,    0,    0,    0,
        6,    0,   94,    0,    0,    0,    0,   88,    0,    0,
       88,   88,   88,   89,   89,   88,   11,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
        0,    0,    0,   88,    0,   89,   89,   88,   24,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   85,    0,
        0,    0,    0,    0,    0,   89,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,   88,
        0,   89,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,   88,    0,   88,    0,   88,   88,   89,    0,

        0,    0,    0,    0,    0,    0,    0,   97,    0,    0,
       88,    0,    0,   88,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
       93,   37,    0,    0,    0,    0,    0,    0,   54,    0,
        0,    9,    0,    0,    0,   45,    0,   10,    0,    0,
        3,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   18,
       20,   18,   18,   18,   18,   18,   18,   21,   22,   23,
       24,   25,    1,   26,   27,   27,   28,   27,   27,   29,
       27,   27,   30,   27,   27,   27,   27,   27,   27,   27,
       27,   31,   27,   27,   27,   27,   27,   27,   27,   27,
       32,    1,   33,    8,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   27,   27,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   27,   54,   55,
       56,   27,    1,   57,    1,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    2,    3,    4,    5,    1,    4,    6,    1,
        1,    4,    7,    8,    7,    9,   10,   11,   11,   11,
       12,    1,   13,   10,   14,    3,   15,   15,   15,   15,
       15,    4,    4,   11,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    4,   16
    } ;

static yyconst flex_int16_t yy_base[732] =
    {   0,
     2040, 2039,    0,   36,   57,   58,   81,    0,  139,    0,
      197,  255,   60,   61,  313,    0,  371,    0,  429,    0,
      485,    0,  209,  210,  543,    0,   59,   66,  601,    0,
      212,  213,  215,  222,  659,    0,  715,    0,  771,    0,
      829,    0,  214,  223,  887,  913,  939,    0,  995, 1051,
     1109,    0,   67,   68,  238,  265,  267,  280,  287,  288,
      289,  296, 2041, 2044, 2044,    0,  484,    0,  486, 1994,
     2004, 2044,    0,    0, 1994, 1994,    0,    0,  191, 2044,
        0, 1988, 2044,   34, 2044, 1996, 1995, 2044, 1998,    0,
      224,  192,  253,    0, 2015, 2044, 2044,  684, 2044,    0,

     2044,    0,    0,    0, 2014, 1167, 2044, 1995, 2044,    0,
     2004, 2044, 2007, 2044,    0,  199, 2016, 1987, 1986, 2044,
      502,  685, 2044, 2044,    0, 2007,    0,    0, 2019,  492,
        0,    0, 2018,  974,    0,    0, 2017,  976,    0,    0,
     2016,  991,    0,    0, 2015,  995, 2044, 1996, 2002, 1964,
     2011, 1964,    0,  232, 1970, 1974, 1969, 2006,    0,    0,
     1974, 1964,    0,    0, 1982, 1954,    0, 1966, 1952, 1951,
     1958, 1947, 1996,    0, 1961, 1975,  452,  466,    0,  468,
     1962, 1951, 1943, 1942, 1957, 1939,    0,    0,    0,    0,
     1943,    0, 1986,    0, 1966, 1967, 1966,    0, 1934, 1933,

     2044, 1940, 1929,  737, 2044, 1937, 1929, 1928, 1943, 1925,
        0, 1952,  480,    0, 1941, 1930, 1922, 1921, 1919,    0,
     1921, 1925, 1917, 1916, 1914,    0, 1951, 1920, 1912, 1911,
     1909,    0, 1946, 1915, 1907, 1906, 1904,    0, 1941, 1910,
     1902, 1901, 1899, 2044, 1936, 1915, 1903, 1909,  281, 1943,
     1921, 1920, 1921, 1904,  211, 1891, 1902, 2044, 1890, 1889,
     1916, 1915, 1897, 2044,    0, 1888, 1917,  674, 1908, 1884,
     1909, 1908, 1878, 1881, 1877, 1880, 1908, 1877, 1901, 1900,
     1882, 2044, 1872, 1897, 1896, 1866, 1869, 2044,  284, 1865,
     1866, 1891, 1890, 1864, 1871, 1861, 1886, 1885, 1859, 1890,

     1856, 1881, 1880, 1854, 1885, 1851, 1876, 1875, 1849, 1880,
     1846, 1871, 1870, 1844, 1886, 1853, 1853, 1862, 1851, 2044,
     1848, 1861, 2044, 1860,  469, 1832, 1837, 1830, 1828, 1874,
     1830, 1841, 2044, 2044, 1823, 1849, 1818, 1837,  860, 2044,
     1849, 2044, 2044, 1822, 1817, 1829, 1832, 1831,    0, 1817,
     2044, 2044, 1812, 1841, 2044, 2044, 1814, 1809, 1835, 1818,
     1836, 2044, 2044, 1805, 1816, 1833, 2044, 2044, 1802, 1828,
     1830, 2044, 2044, 1799, 1825, 1827, 2044, 2044, 1796, 1822,
     1824, 2044, 2044, 1793, 1806, 1799, 1797, 2044, 1797, 1796,
     1797,  497, 1795, 1802, 1797, 1831, 1803, 1787, 1780, 1792,

     2044, 1774, 1804,  874, 2044, 1806, 1805, 1801, 1780, 1799,
     1784, 1783, 2044, 1799, 1798, 2044, 1768, 2044, 1796, 1793,
     2044, 1794, 2044, 2044, 1793, 2044, 2044, 1792, 2044, 2044,
     1791, 1765, 1772, 1771, 1766, 1773, 1788,  902, 1754, 1754,
     1764, 1772, 1763, 1760, 1753, 2044, 1747, 1775,  482, 2044,
     2044, 2044, 1758, 2044, 1746, 2044, 2044, 2044, 1771, 2044,
     1788, 2044, 2044, 2044, 2044, 1738, 1767, 1767, 1749, 1738,
     1763,  502, 1736, 1735, 1761, 1745, 1743, 1757, 1731, 1745,
     1744,  966, 1754, 1742, 1770, 2044, 1719, 1751, 1767, 1726,
     1720,  704, 1766, 1745, 1762, 1726, 1725,    0, 1719, 2044,

     1224, 1753, 1706, 2044, 1703, 1712, 2044, 1725, 1723,  879,
     2044, 1739, 2044, 1690, 1669, 1693, 1281, 1034, 1002, 1231,
     1254, 2044, 1707, 1018, 1023, 1291, 2044, 1654, 1665, 1666,
     1647,  893, 1028, 1630, 1618, 1614, 1646, 1307, 1606, 1591,
     1584, 1576, 1575,  691, 1585, 1027,  984,    0, 1574, 1582,
     1616, 1578, 1576, 1565,  261, 1566, 1570, 1561, 2044, 1562,
     1551, 1554, 1575, 1564, 1530, 1040,    0, 1560, 1541, 1529,
     1526, 1545,  699, 1560, 1519, 1525, 1521, 1535,  997, 1064,
     1534, 1043, 1549, 1507, 1496, 1541, 1523, 1011, 1540, 1505,
     1324, 1310, 1068, 1320, 1069, 1316, 1221, 1347, 1047, 1059,

     1315, 1318, 1331, 1320, 1204, 1312, 1314, 2044, 1313, 1316,
     1226, 1298, 1297, 1335, 1302, 1299, 1305, 1302, 1292, 1318,
     1333,  882, 1286, 2044, 1290, 1312, 1311, 1297, 1288, 1284,
     1282, 1301, 2044, 1290, 1277, 1208, 1282, 1269, 1263, 1271,
     1273, 1284, 2044, 1303, 1268, 1224, 1260, 1248, 1247, 1253,
     1278, 1234, 1234,  979, 1253, 1252, 1232, 1224, 1236, 1231,
     1220,  712, 1246, 1245, 1188, 1166, 1131, 1062, 1082, 1077,
     2044, 2044, 1031, 1074, 1026, 1016, 1044,  998, 2044,  949,
      975, 2044,  925,  861,  730, 2044,  258, 2044,  269,  209,
     2044, 2044, 1364, 1380, 1396, 1412, 1428, 1444, 1460, 1476,

     1492, 1508, 1524,  195,  524, 1534,  881, 1543, 1088, 1238,
     1243, 1552, 1562, 1246,   64, 1568, 1584, 1597, 1603, 1615,
     1257, 1631, 1647, 1663, 1679, 1695, 1711, 1727, 1741, 1746,
     1752
    } ;

static yyconst flex_int16_t yy_def[732] =
    {   0,
      693,  693,  692,    3,  693,  693,  692,    7,  692,    9,
      694,  694,  693,  693,  692,   15,  692,   17,  692,   19,
      693,   21,  693,  693,  692,   25,  693,  693,  692,   29,
      693,  693,  695,  695,  692,   35,  693,   37,  692,   39,
      692,   41,  696,  696,  697,  697,  692,   47,  698,  698,
      692,   51,  699,  699,  700,  700,  701,  701,  702,  702,
      703,  703,  692,  692,  692,  704,  692,  705,  692,  705,
      692,  692,  706,  707,  707,  707,  708,  709,  692,  692,
      710,  710,  692,  692,  692,  692,  692,  692,  692,  711,
      692,  712,  712,  713,  692,  692,  692,  692,  692,  714,

      692,  715,  716,  717,  692,  692,  692,  692,  692,  718,
      692,  692,  719,  692,  720,  720,  692,  692,  692,  692,
      692,  692,  692,  692,  721,  722,  723,  723,  692,  692,
      724,  724,  692,  692,  725,  725,  692,  692,  726,  726,
      692,  692,  727,  727,  692,  692,  692,  704,  692,  692,
      692,  692,  705,  692,  692,  692,  705,  692,  706,  707,
      707,  707,  708,  709,  692,  692,  710,  710,  692,  692,
      692,  692,  692,  711,  692,  692,  712,  712,  713,  712,
      692,  692,  692,  692,  692,  692,  714,  715,  716,  717,
      692,  106,  692,  718,  692,  719,  692,  720,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      721,  722,  722,  723,  692,  692,  692,  692,  692,  724,
      692,  692,  692,  692,  692,  725,  692,  692,  692,  692,
      692,  726,  692,  692,  692,  692,  692,  727,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  728,  705,  692,  707,  707,  692,  692,  710,
      692,  692,  692,  692,  729,  692,  692,  712,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  730,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  722,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  728,  728,  705,  692,  692,  707,  707,
      692,  710,  692,  692,  692,  729,  692,  692,  712,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  730,  730,
      692,  692,  692,  692,  692,  692,  692,  692,  722,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  728,  705,  692,  692,  707,  692,  692,  710,  692,

      692,  692,  692,  712,  692,  692,  692,  692,  692,  692,
      730,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  728,  705,  692,
      692,  692,  692,  692,  710,  692,  692,  692,  712,  692,
      692,  692,  692,  692,  730,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  728,  705,  692,  692,  692,  692,  692,  710,  692,
      692,  712,  692,  730,  692,  692,  692,  692,  692,  692,
      692,  728,  705,  692,  692,  692,  692,  710,  692,  692,

      712,  692,  730,  692,  692,  692,  692,  692,  692,  728,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      712,  692,  521,  712,  712,  713,  692,  730,  692,  692,
      692,  692,  728,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  712,  692,  712,  712,  713,  730,  692,
      692,  692,  692,  692,  728,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  712,  730,  692,  692,  692,
      692,  692,  728,  692,  692,  692,  692,  692,  692,  692,
      692,  712,  692,  692,  692,  692,  692,  728,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  712,  692,

      692,  692,  692,  692,  728,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  731,
      692,  728,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  728,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  728,  692,  692,  692,  692,
      692,  692,  692,  728,  692,  692,  692,  692,  692,  692,
      692,  728,  692,  692,  692,  692,  692,  692,  692,  728,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,    0,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692
    } ;

static yyconst flex_int16_t yy_nxt[2103] =
    {   0,
       64,   64,   65,   64,   64,   64,   64,   64,   66,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   67,   64,   64,   64,   68,   68,   68,   68,
       68,   64,   64,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   64,   64,   69,   65,
       65,   65,   65,   65,   91,   70,   72,   72,   65,  128,
      128,   91,  129,  129,  169,  130,  130,  170,  188,   71,
       71,   64,   64,   65,   64,   64,   64,   72,   64,   64,
       64,   64,   64,   73,   64,   73,   73,   64,   73,   73,

       73,   64,   64,   64,   64,   64,   64,   73,   73,   73,
       73,   73,   64,   64,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   64,   64,   64,
       64,   65,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   74,   74,   74,   64,
       64,   64,   64,   64,   64,   74,   75,   76,   74,   74,
       64,   64,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   64,   64,   64,   64,   65,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  148,
       64,   88,   88,   64,   65,   65,   65,   97,   64,   64,
       64,   64,   64,   98,   97,   65,  165,  175,   64,   64,
       98,   89,   89,  691,   95,   95,  108,   99,  178,  199,
      132,  166,  200,  133,   99,  108,  134,  327,  176,  179,
      249,  250,  328,   64,   64,   64,   64,   65,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  132,   64,  136,
      133,   64,  137,  134,  690,  138,   64,   64,   64,   64,
       64,  251,  136,  325,  319,  137,   64,   64,  138,  140,
      140,  144,  141,  141,  145,  142,  142,  146,  144,  178,

      180,  145,  147,  359,  146,  320,  573,  689,  288,  147,
      179,   64,   64,   64,   64,   65,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       78,   78,   78,   64,   64,   64,   64,   64,   64,   78,
       78,   78,   78,   78,   64,   64,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   64,
       64,   64,   64,   65,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   79,   64,   64,   64,   80,   80,   80,

       80,   80,   64,   64,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   64,   80,   64,
       64,   65,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   81,   81,   81,   64,
       64,   64,   64,   64,   64,   81,   81,   81,   81,   81,
       64,   64,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   82,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   64,   64,   65,  149,   83,
      149,  325,   83,   84,   83,   83,   83,   83,  178,   83,

      150,   83,  150,  204,  288,  204,  268,   85,   83,  179,
      392,  205,  178,  180,  178,  438,   83,   83,  151,  325,
      151,  289,   86,  179,  325,  179,  216,  154,  482,  155,
       87,  152,  217,  152,  153,  218,  492,  156,  153,  179,
      219,   83,   83,   64,   64,   65,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       90,   90,   90,   64,   64,   64,   64,   64,   64,   90,
       90,   90,   90,   90,   64,   64,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   64,

       64,   64,   64,   65,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   92,   64,   92,   92,   64,   92,   92,
       92,   92,   64,   64,   64,   64,   64,   92,   92,   92,
       92,   92,   64,   64,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   93,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   64,   94,   64,
       64,   65,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  100,  100,  100,   64,
       64,   64,   64,   64,   64,  100,  100,  100,  100,  100,
       64,   64,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   64,   64,   65,  182,  206,
      178,  325,  588,  339,  183,  207,  325,  184,  208,  185,
      209,  179,  186,  210,  325,  688,  670,  178,  204,  101,
      204,  102,  102,  102,  102,  102,  205,  510,  179,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   64,   64,   65,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  103,  103,
      103,  103,   64,   64,   64,   64,   64,  103,  103,  103,

      103,  103,   64,   64,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,   64,  103,  104,
      104,   65,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  105,  104,  104,  104,  106,  106,  106,  106,  106,
      104,  104,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  104,  104,  109,  109,   65,
      109,  160,  111,  109,  404,  160,  109,  109,  553,  687,

      109,  325,  109,  109,  325,  472,  178,  109,  109,  109,
      109,  109,  109,  109,  109,   65,  109,  179,  111,  109,
      178,  533,  109,  109,  325,  449,  109,  636,  109,  109,
      686,  179,  554,  109,  109,  109,  109,  109,  109,  112,
      112,   65,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  113,  113,  113,  112,
      112,  112,  112,  112,  112,  113,  113,  113,  113,  113,
      112,  112,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  112,  112,   65,  685,  115,

      684,  325,  115,  116,  117,  594,  115,  115,  222,  115,
      228,  115,  178,  180,  223,  501,  229,  224,  115,  230,
      595,  683,  225,  179,  231,  234,  115,  115,  662,  240,
      178,  235,  118,  325,  236,  241,  541,  544,  242,  237,
      119,  179,  542,  243,  522,  543,  522,  605,  522,  682,
      325,  115,  115,   65,  681,  115,  546,  522,  115,  116,
      117,  547,  115,  115,  178,  115,  522,  115,  555,  178,
      566,  680,  596,  178,  115,  179,  610,  594,  582,  679,
      179,  678,  115,  115,  179,  544,  178,  597,  118,  178,
      522,  611,  595,  178,  599,  615,  119,  179,  164,  325,

      179,  616,  164,  617,  179,  677,  676,  115,  115,  120,
      121,   65,  121,  120,  120,  120,  120,  122,  123,  124,
      120,  120,  120,  120,  120,  120,  125,  125,  125,  120,
      120,  126,  120,  120,  120,  125,  125,  125,  125,  125,
      120,  120,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  120,  120,  190,  190,  675,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  192,  192,  192,  190,  190,  674,
      190,  190,  190,  192,  192,  192,  192,  192,  190,  190,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  190,  190,  517,  325,  517,  518,  596,
      325,  518,  519,  520,  610,  518,  521,  522,  523,  673,
      518,  522,  622,  522,  597,  522,  325,  518,  167,  611,
      672,  671,  167,  174,  522,  520,  187,  174,  669,  646,
      187,  524,  654,  522,  522,  668,  544,  211,  544,  525,
      178,  211,  667,  666,  665,  664,  663,  522,  661,  660,
      518,  526,  517,  659,  517,  518,  522,  522,  518,  519,
      520,  658,  518,  518,  522,  538,  657,  518,  656,  655,

      178,  522,  653,  548,  518,  548,  652,  651,  650,  649,
      522,  179,  520,  648,  522,  545,  611,  522,  539,  522,
      647,  522,  645,  522,  644,  643,  540,  642,  641,  640,
      522,  639,  597,  595,  638,  637,  635,  518,  518,  522,
      634,  632,  631,  630,  629,  628,  614,  522,  627,  626,
      625,  522,  624,  623,  621,  620,  619,  618,  614,  613,
      612,  609,  608,  522,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      159,  607,  159,  606,  159,  604,  603,  602,  159,  163,
      601,  163,  600,  163,  163,  598,  593,  163,  177,  592,
      177,  591,  177,  177,  590,  589,  177,  177,  179,  587,
      179,  586,  179,  179,  585,  584,  179,  179,  189,  189,
      583,  581,  189,  189,  190,  580,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  579,  190,  190,  190,

      194,  578,  194,  194,  522,  577,  576,  194,  575,  574,
      572,  194,  194,  196,  196,  571,  570,  196,  198,  569,
      198,  198,  568,  567,  198,  565,  564,  563,  562,  561,
      198,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  560,  212,  212,  214,  214,  214,
      214,  559,  558,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  220,  220,  220,  220,  557,  556,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  226,
      226,  226,  226,  552,  551,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  232,  232,  232,  232,  550,

      549,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  238,  238,  238,  238,  545,  537,  238,  536,  238,
      238,  238,  238,  238,  238,  238,  238,  324,  535,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  336,  534,  336,  532,  336,  531,  336,
      336,  336,  336,  530,  529,  336,  349,  528,  527,  516,
      349,  349,  633,  515,  633,  514,  633,  513,  512,  511,
      509,  508,  507,  506,  505,  504,  503,  502,  500,  499,
      498,  258,  497,  496,  495,  494,  493,  320,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  481,  480,  479,

      478,  477,  476,  475,  474,  473,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  325,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,

      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  338,  337,  335,  334,  333,  332,  331,
      330,  329,  326,  325,  323,  322,  321,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  197,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  267,  266,  265,

      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  248,  247,  246,  245,  244,  239,  233,
      227,  221,  215,  213,  203,  202,  201,  197,  195,  193,
      191,  181,  173,  172,  171,  168,  162,  161,  158,  157,
      692,   65,   65,   63,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692
    } ;

static yyconst flex_int16_t yy_chk[2103] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,    5,
        6,   27,   13,   14,   27,    4,   13,   14,   28,   53,
       54,   28,   53,   54,   84,   53,   54,   84,  715,    5,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,  704,
       11,   23,   24,   11,   31,   32,   43,   33,   11,   11,
       11,   11,   11,   33,   34,   44,   79,   91,   11,   11,
       34,   23,   24,  690,   31,   32,   43,   33,   92,  116,
       55,   79,  116,   55,   34,   44,   55,  255,   91,   92,
      154,  154,  255,   11,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   56,   12,   57,
       56,   12,   57,   56,  689,   57,   12,   12,   12,   12,
       12,  154,   58,  555,  249,   58,   12,   12,   58,   59,
       60,   61,   59,   60,   61,   59,   60,   61,   62,   93,

       93,   62,   61,  289,   62,  249,  555,  687,  289,   62,
       93,   12,   12,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   67,   21,
       69,  325,   21,   21,   21,   21,   21,   21,  177,   21,

       67,   21,   69,  121,  213,  121,  180,   21,   21,  177,
      325,  121,  178,  178,  180,  392,   21,   21,   67,  392,
       69,  213,   21,  178,  472,  180,  130,   69,  449,   69,
       21,   67,  130,   69,  705,  130,  472,   69,  705,  449,
      130,   21,   21,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   37,   98,  122,
      268,  573,  573,  268,   98,  122,  492,   98,  122,   98,
      122,  268,   98,  122,  662,  685,  662,  544,  204,   37,
      204,   37,   37,   37,   37,   37,  204,  492,  544,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   45,   45,   45,
       45,  707,   45,   45,  339,  707,   45,   45,  532,  684,

       45,  510,   45,   45,  622,  438,  339,   45,   45,   45,
       45,   45,   45,   46,   46,   46,   46,  339,   46,   46,
      404,  510,   46,   46,  438,  404,   46,  622,   46,   46,
      683,  404,  532,   46,   46,   46,   46,   46,   46,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   49,  681,   49,

      680,  654,   49,   49,   49,  579,   49,   49,  134,   49,
      138,   49,  482,  482,  134,  482,  138,  134,   49,  138,
      579,  678,  134,  482,  138,  142,   49,   49,  654,  146,
      547,  142,   49,  588,  142,  146,  519,  547,  146,  142,
       49,  547,  519,  146,  518,  519,  518,  588,  518,  677,
      533,   49,   49,   50,  676,   50,  524,  518,   50,   50,
       50,  525,   50,   50,  524,   50,  518,   50,  533,  525,
      546,  675,  580,  546,   50,  524,  593,  595,  566,  674,
      525,  673,   50,   50,  546,  599,  566,  580,   50,  582,
      518,  593,  595,  599,  582,  600,   50,  566,  709,  670,

      582,  600,  709,  600,  599,  669,  668,   50,   50,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,  106,  106,  667,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  666,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  501,  605,  501,  501,  597,
      636,  501,  501,  501,  611,  501,  501,  501,  501,  665,
      501,  520,  605,  520,  597,  520,  646,  501,  710,  611,
      664,  663,  710,  711,  520,  501,  714,  711,  661,  636,
      714,  501,  646,  520,  521,  660,  521,  721,  521,  501,
      501,  721,  659,  658,  657,  656,  655,  521,  653,  652,
      501,  501,  517,  651,  517,  517,  521,  520,  517,  517,
      517,  650,  517,  517,  517,  517,  649,  517,  648,  647,

      521,  526,  645,  526,  517,  526,  644,  642,  641,  640,
      521,  521,  517,  639,  526,  538,  638,  538,  517,  538,
      637,  538,  635,  526,  634,  632,  517,  631,  630,  629,
      538,  628,  627,  626,  625,  623,  621,  517,  517,  538,
      620,  619,  618,  617,  616,  615,  614,  526,  613,  612,
      610,  609,  607,  606,  604,  603,  602,  601,  598,  596,
      594,  592,  591,  538,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  701,  701,  701,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      706,  590,  706,  589,  706,  587,  586,  585,  706,  708,
      584,  708,  583,  708,  708,  581,  578,  708,  712,  577,
      712,  576,  712,  712,  575,  574,  712,  712,  713,  572,
      713,  571,  713,  713,  570,  569,  713,  713,  716,  716,
      568,  565,  716,  716,  717,  564,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  563,  717,  717,  717,

      718,  562,  718,  718,  561,  560,  558,  718,  557,  556,
      554,  718,  718,  719,  719,  553,  552,  719,  720,  551,
      720,  720,  550,  549,  720,  545,  543,  542,  541,  540,
      720,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  539,  722,  722,  723,  723,  723,
      723,  537,  536,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  724,  724,  724,  724,  535,  534,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  531,  530,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  726,  726,  726,  726,  529,

      528,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  727,  727,  727,  727,  523,  516,  727,  515,  727,
      727,  727,  727,  727,  727,  727,  727,  728,  514,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  729,  512,  729,  509,  729,  508,  729,
      729,  729,  729,  506,  505,  729,  730,  503,  502,  499,
      730,  730,  731,  497,  731,  496,  731,  495,  494,  493,
      491,  490,  489,  488,  487,  485,  484,  483,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  471,  470,  469,
      468,  467,  466,  461,  459,  455,  453,  448,  447,  445,

      444,  443,  442,  441,  440,  439,  437,  436,  435,  434,
      433,  432,  431,  428,  425,  422,  420,  419,  417,  415,
      414,  412,  411,  410,  409,  408,  407,  406,  403,  402,
      400,  399,  398,  397,  396,  395,  394,  393,  391,  390,
      389,  387,  386,  385,  384,  381,  380,  379,  376,  375,
      374,  371,  370,  369,  366,  365,  364,  361,  360,  359,
      358,  357,  354,  353,  350,  348,  347,  346,  345,  344,
      341,  338,  337,  336,  335,  332,  331,  330,  329,  328,
      327,  326,  324,  322,  321,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,

      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  287,  286,  285,  284,  283,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  267,  266,  263,  262,  261,  260,  259,
      257,  256,  254,  253,  252,  251,  250,  248,  247,  246,
      245,  243,  242,  241,  240,  239,  237,  236,  235,  234,
      233,  231,  230,  229,  228,  227,  225,  224,  223,  222,
      221,  219,  218,  217,  216,  215,  212,  210,  209,  208,
      207,  206,  203,  202,  200,  199,  197,  196,  195,  193,
      191,  186,  185,  184,  183,  182,  181,  176,  175,  173,

      172,  171,  170,  169,  168,  166,  165,  162,  161,  158,
      157,  156,  155,  152,  151,  150,  149,  148,  145,  141,
      137,  133,  129,  126,  119,  118,  117,  113,  111,  108,
      105,   95,   89,   87,   86,   82,   76,   75,   71,   70,
       63,    2,    1,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int tagYY_flex_debug;
int tagYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *tagYYtext;
#line 1 "doxytag.l"
/******************************************************************************
 *
 * $Id: doxytag.cpp,v 1.2 2014/11/19 09:12:48 wtchen Exp $
 *
 * Copyright (C) 1997-2006 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "doxytag.l"
/*
 *	includes
 */
#include <stdio.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qstrlist.h>
#include <qfileinfo.h>
#include <qfile.h>
#include <qdict.h>
#include <qtextstream.h>
#include <qdir.h>
  
#include "version.h"
//#include "suffixtree.h"
//#include "searchindex.h"
#include "logos.h"

static QCString convertToXML(const char *s)
{ 
  QCString result;
  if (s==0) return result;
  const char *p=s;
  char c;
  while ((c=*p++))
  {     
    switch (c)
    {   
      case '<':  result+="&lt;";   break;
      case '>':  result+="&gt;";   break;
      case '&':  result+="&amp;";  break;
      case '\'': result+="&apos;"; break; 
      case '"':  result+="&quot;"; break;
      default:   result+=c;        break;         
    }
  }
  return result;
}
  
struct MemberDef
{
  QCString name;
  QCString anchor;
  QCString args;
};  
  
struct ClassDef
{
  QCString  name;
  QStrList bases;
  QCString  fileName;
  bool isFile;
  QList<MemberDef> memberList;
};  

QList<ClassDef> classList;
QDict<ClassDef> classDict(1009);
QList<ClassDef> fileList;
QDict<ClassDef> fileDict(1009);

static bool genTag;
static bool genIndex;

static QStrList  bases;
static QCString  inputString;
static int       inputPosition;
static QCString  yyFileName;
static int       yyLineNr;
static QCString  classFile;
static QCString  memberRef;
static QCString  memberName;
static QCString  memberArgs;
static QCString  className;
static QCString  baseName;
static QCString  docBaseLink;
static QCString  docAnchor;
static QCString  docRefName;
static bool      nameBug;
//static SearchIndex searchIndex;

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	c++; buf++;
    }
    return c;
}

static void addClass(const char *clName)
{
  if (classDict[clName]==0)
  {
    //printf("addClass(%s)\n",clName);
    ClassDef *cd=new ClassDef;
    cd->name=clName;
    cd->fileName=yyFileName;
    cd->isFile=FALSE;
    classList.append(cd);
    classDict.insert(clName,cd);
  }
}

static void addFile(const char *fName)
{
  if (classDict[fName]==0)
  {
    ClassDef *fd=new ClassDef;
    fd->name=fName;
    fd->fileName=yyFileName;
    fd->isFile=TRUE;
    classList.append(fd);
    classDict.insert(fName,fd);
  }
}

static void addBases(const char *clName)
{
  ClassDef *cd=0;
  if (clName && (cd=classDict[clName])) cd->bases=bases;
}

static void addMember(const char *memName,const char *memRef,const char *memArgs)
{
  //printf("addMember(%s,%s,%s)\n",memName,memRef,memArgs);
  ClassDef *cd=classList.last();
  if (cd)
  {
    MemberDef *md;
    md=new MemberDef;
    md->name=memName;
    md->anchor=memRef; 
    md->args=memArgs;
    cd->memberList.append(md);
  }
  else
  {
    //printf("Warning: found member %s %s but not class was found to insert it!\n",
    //	memName,memArgs);
  }
}

static void addReference()
{
  //printf("addReference() key: %s ref:%s\n",
  //  docRefName.data(),(docBaseLink+"#"+docAnchor).data());
  //if (genIndex && !docRefName.isEmpty() && !docBaseLink.isEmpty())
  //{
  //  if (docAnchor.isEmpty())
  //    searchIndex.addReference(docRefName,docBaseLink);
  //  else
  //    searchIndex.addReference(docRefName,docBaseLink+"#"+docAnchor);
  //  searchIndex.addWord(docRefName,docRefName,TRUE);
  //}
}

QCString unhtmlify(const char *str)
{
  QCString result;
  const char *p=str;
  char c;
  while ((c=*p)!='\0')
  {
    if (c!='&') { result+=c; p++; }
    else
    {
      if (strncmp(p,"&amp;",5)==0)       { result+='&'; p+=5; }	
      else if (strncmp(p,"&lt;",4)==0)   { result+='<'; p+=4; }
      else if (strncmp(p,"&gt;",4)==0)   { result+='>'; p+=4; }
      else if (strncmp(p,"&quot;",6)==0) { result+='"'; p+=4; }
	else /* should not happen */     { result+='&'; p++; }
    }
  }
  return result;
}































#line 1390 "<stdout>"

#define INITIAL 0
#define Start 1
#define SearchClassFile 2
#define ReadClassFile 3
#define CheckClassName 4
#define ReadClassName 5
#define SearchMemberRef 6
#define ReadMemberRef 7
#define SearchMemberName 8
#define ReadMemberName 9
#define ReadOperator 10
#define SearchBaseClasses 11
#define ReadBaseClass 12
#define SearchRefName 13
#define ReadRefName 14
#define SearchArgs 15
#define ReadArgs 16
#define SearchWords 17
#define SkipHTMLTag 18
#define CheckConstructor 19
#define SkipPreformated 20
#define Qt3ReadType 21
#define Qt3ReadAnchor 22
#define Qt3ReadName 23
#define Qt3ReadOperator 24
#define Qt3ReadArgs 25
#define DoxReadAnchor 26
#define DoxReadName 27
#define DoxReadArgs 28
#define DoxClassName 29
#define DoxClassBase 30

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int tagYYwrap (void );
#else
extern int tagYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( tagYYtext, tagYYleng, 1, tagYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( tagYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( tagYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, tagYYin))==0 && ferror(tagYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(tagYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int tagYYlex (void);

#define YY_DECL int tagYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after tagYYtext and tagYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( tagYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(tagYYtext[tagYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 241 "doxytag.l"


#line 1579 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! tagYYin )
			tagYYin = stdin;

		if ( ! tagYYout )
			tagYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			tagYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				tagYY_create_buffer(tagYYin,YY_BUF_SIZE );
		}

		tagYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of tagYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 693 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2044 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 243 "doxytag.l"
{ 
				     BEGIN( SearchClassFile );
				   } 
	YY_BREAK
case 2:
#line 247 "doxytag.l"
case 3:
#line 248 "doxytag.l"
case 4:
YY_RULE_SETUP
#line 248 "doxytag.l"
{ // Qt variant
  				     BEGIN( ReadClassName );
			           }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 251 "doxytag.l"
{ // Doxygen variant
  				     BEGIN( ReadClassName );
			           }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 254 "doxytag.l"
{
  				     //printf("Inherits found\n");
  				     BEGIN( SearchBaseClasses );
  				   }
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up tagYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 15;
YY_DO_BEFORE_ACTION; /* set up tagYYtext again */
YY_RULE_SETUP
#line 258 "doxytag.l"
{ // needed due to inconsistency in the Qt docs
  				     BEGIN( CheckConstructor );
				   }
	YY_BREAK
/* --------------------------------------------------- */
/*               Qt member extraction rules            */
case 8:
YY_RULE_SETUP
#line 265 "doxytag.l"
{
  				     BEGIN( Qt3ReadType );
  				   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 268 "doxytag.l"
{ // Qt-3.3+ html file
  				     BEGIN( Qt3ReadAnchor );
  				   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 271 "doxytag.l"
{ // Qt-4 html file
  				     BEGIN( Qt3ReadAnchor );
  				   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 274 "doxytag.l"
{
  				     BEGIN( Qt3ReadAnchor );
  				   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 277 "doxytag.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 278 "doxytag.l"
{ 
  				     memberRef = tagYYtext;
  				   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 281 "doxytag.l"
{
  				     BEGIN( Qt3ReadName );
  				   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 284 "doxytag.l"
{
  				     BEGIN( Start );
  				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 287 "doxytag.l"
{
  				     memberName="operator";
				     BEGIN(Qt3ReadOperator);
				   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 291 "doxytag.l"
{ memberName+=tagYYtext; } 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 292 "doxytag.l"
{ memberName+="<"; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 293 "doxytag.l"
{ memberName+=">"; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 294 "doxytag.l"
{ memberName+=" new"; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 295 "doxytag.l"
{ memberName+=" delete"; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 296 "doxytag.l"
{ memberName+="()"; BEGIN( Qt3ReadArgs ); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 297 "doxytag.l"
{ unput(*tagYYtext); BEGIN( Qt3ReadArgs ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 298 "doxytag.l"
{
				     memberName=tagYYtext;
				     memberName=memberName.mid(memberName.find("::")+2);
				     BEGIN(Qt3ReadArgs);
  				   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 303 "doxytag.l"

	YY_BREAK
case 26:
YY_RULE_SETUP
#line 304 "doxytag.l"
{
  				     memberArgs+='(';
  				   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 307 "doxytag.l"
{ memberArgs+='&'; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 308 "doxytag.l"
{ memberArgs+='<'; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 309 "doxytag.l"
{ memberArgs+='>'; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 310 "doxytag.l"
{ memberArgs+='"'; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 311 "doxytag.l"
{ memberArgs+=' '; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 312 "doxytag.l"
{ 
                                     addMember(memberName,memberRef,memberArgs);
                                     memberName.resize(0);
                                     memberRef.resize(0);
                                     memberArgs.resize(0);
  				     BEGIN(Start);
                                   }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 319 "doxytag.l"

	YY_BREAK
case 34:
YY_RULE_SETUP
#line 320 "doxytag.l"
{
  				     memberArgs+=')';
				     addMember(memberName,memberRef,memberArgs);
                                     memberName.resize(0);
                                     memberRef.resize(0);
                                     memberArgs.resize(0);
				     BEGIN(Start);
                                   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 328 "doxytag.l"
{ memberArgs+=tagYYtext; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 329 "doxytag.l"
{ memberArgs+=*tagYYtext; }
	YY_BREAK
/* --------------------------------------------------- */
/*          Doxygen class extraction rules             */
case 37:
YY_RULE_SETUP
#line 334 "doxytag.l"
{
  				     className.resize(0);
  				     BEGIN(DoxClassName);
  				   }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 338 "doxytag.l"
{
  				     className=tagYYtext;
				     addClass(className);
  				   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 342 "doxytag.l"
{
  				     className+='<';
  				   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 345 "doxytag.l"
{
  				     className+='>';
  				   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 348 "doxytag.l"
{
  				     className+='&';
  				   }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 351 "doxytag.l"
{
  				     className+='"';
  				   }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 354 "doxytag.l"
{
  				     className+=*tagYYtext;
				   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 357 "doxytag.l"
{
  				     BEGIN(Start);
  				   }
	YY_BREAK
/* --------------------------------------------------- */
/*          Doxygen inheritance extraction rules       */
case 45:
YY_RULE_SETUP
#line 364 "doxytag.l"
{
                                     bases.clear();
				     baseName.resize(0);
				     BEGIN(DoxClassBase);
                                   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 369 "doxytag.l"
{
  				     baseName+=tagYYtext;
  				   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 372 "doxytag.l"
{
  				     bases.append(baseName);
				     baseName.resize(0);
  				   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 376 "doxytag.l"
{
  				     baseName+='<';
  				   }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 379 "doxytag.l"
{
  				     baseName+='>';
  				   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 382 "doxytag.l"
{
  				     baseName+='&';
  				   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 385 "doxytag.l"
{
  				     baseName+='"';
  				   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 388 "doxytag.l"
{
  				     baseName+=*tagYYtext;
				   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 391 "doxytag.l"
{
  				     bases.append(baseName);
				     baseName.resize(0);
				     addBases(className);
  				     BEGIN(Start);
  				   }
	YY_BREAK
/* --------------------------------------------------- */
/*          Doxygen member extraction rules            */
case 54:
YY_RULE_SETUP
#line 401 "doxytag.l"
{
  				     memberName.resize(0);
  				     BEGIN(DoxReadName);
  				   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 405 "doxytag.l"
{
  				     memberName+=tagYYtext;
  				   }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 408 "doxytag.l"
{
  				     memberName+='<';
  				   }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 411 "doxytag.l"
{
  				     memberName+='>';
  				   }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 414 "doxytag.l"
{
  				     memberName+='&';
  				   }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 417 "doxytag.l"
{
  				     memberName+='"';
  				   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 420 "doxytag.l"
{
  				     memberName+=*tagYYtext;
  				   }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 423 "doxytag.l"
{
				     memberName=memberName.mid(memberName.find("::")+2);
				     memberRef.resize(0);
  				     BEGIN(DoxReadAnchor);
  				   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 428 "doxytag.l"
{
  				     memberRef+=tagYYtext;
  				   }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 431 "doxytag.l"
{
  				     memberRef+='<';
  				   }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 434 "doxytag.l"
{
  				     memberRef+='>';
  				   }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 437 "doxytag.l"
{
  				     memberRef+='&';
  				   }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 440 "doxytag.l"
{
  				     memberRef+='"';
  				   }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 443 "doxytag.l"
{
  				     memberRef+=*tagYYtext;
  				   }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 446 "doxytag.l"
{
  				     memberArgs.resize(0);
  				     BEGIN(DoxReadArgs);
  				   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 450 "doxytag.l"
{
  				     memberArgs+=tagYYtext;
  				   }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 453 "doxytag.l"
{
  				     memberArgs+='<';
  				   }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 456 "doxytag.l"
{
  				     memberArgs+='>';
  				   }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 459 "doxytag.l"
{
  				     memberArgs+='&';
  				   }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 462 "doxytag.l"
{
  				     memberArgs+='"';
  				   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 465 "doxytag.l"
{
  				     memberArgs+=*tagYYtext;
  				   }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 468 "doxytag.l"
{
                                     addMember(memberName,memberRef,memberArgs);
                                     memberName.resize(0);
                                     memberRef.resize(0);
                                     memberArgs.resize(0);
  				     BEGIN(Start);
                                   }
	YY_BREAK
/** --------------------------------------------------- */
case 76:
YY_RULE_SETUP
#line 478 "doxytag.l"
{ 
  				     BEGIN( SkipPreformated );
				   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 481 "doxytag.l"
{
  				     BEGIN( SearchWords );
  				   }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 484 "doxytag.l"
{ 
  				     BEGIN( SkipHTMLTag ); 
				   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 487 "doxytag.l"

	YY_BREAK
case 80:
YY_RULE_SETUP
#line 488 "doxytag.l"
{
  				     //printf("tag: %s#%s ref: %s word: `%s'\n",
				     // docBaseLink.data(),docAnchor.data(),
				     // docRefName.data(),tagYYtext);
  				     //if (genIndex && !docRefName.isEmpty() && tagYYleng>2)
				     //  searchIndex.addWord(docRefName,
				     //	                   tagYYtext,FALSE
				     //			  );
  				   }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 497 "doxytag.l"
{
  				     BEGIN( Start );
  				   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 500 "doxytag.l"

	YY_BREAK
case 83:
YY_RULE_SETUP
#line 501 "doxytag.l"
{
  				     QCString s=tagYYtext;
				     if (s.find("::")!=-1)
				     {
				       docRefName=tagYYtext;
				       addReference();
				       nameBug=TRUE;
				     }
				     else
				     {
				       nameBug=FALSE;
				     }
				     BEGIN( Start );
  				   }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 515 "doxytag.l"
{
  				     docAnchor = tagYYtext;
				     if (docAnchor=="details" || 
					 docAnchor=="_details")
				     {
				       docRefName=className.copy();
				       addReference();
  				       BEGIN( Start );
				     }
				     else
				     {
				       BEGIN( SearchRefName );
				     }
  				   }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 529 "doxytag.l"
{
  				     BEGIN( ReadRefName ); 
  				   }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 532 "doxytag.l"
{ // HACK: avoid finding links in code fragments
  				     BEGIN( Start );
  				   }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 535 "doxytag.l"
{ // HACK: deal with Qt code
  				     if (nameBug)
				       BEGIN( Start );
				     else
				       BEGIN( ReadRefName );
  				   }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 542 "doxytag.l"
{ // hmm, looks impressive :-)
  				     docRefName=unhtmlify(tagYYtext);
				     addReference();
				     BEGIN( Start );
  				   }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 547 "doxytag.l"
{
  				     //printf("ReadRef=%s\n",tagYYtext);
  				     docRefName=tagYYtext;
				     addReference();
				     BEGIN( Start );
  				   }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 553 "doxytag.l"
{
  				     //printf("Search %s\n",tagYYtext);
  				     BEGIN( ReadBaseClass );
				   }  
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 557 "doxytag.l"
{
  				     addBases(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 561 "doxytag.l"
{
  				     bases.append(tagYYtext);
				     BEGIN( SearchBaseClasses );
  				   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 565 "doxytag.l"
{
  				     BEGIN( ReadClassFile ); 
  				   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 568 "doxytag.l"
{
  				     BEGIN( ReadClassFile ); 
  				   }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 571 "doxytag.l"
{
  				     className=tagYYtext;
				     BEGIN( CheckClassName);
  				   }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 575 "doxytag.l"
{
  				     //printf("className=%s\n",className.data());
				     addClass(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 580 "doxytag.l"
{
  				     //printf("className=%s\n",className.data());
				     addFile(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 585 "doxytag.l"
{ // not a class file
  				     className.resize(0);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 589 "doxytag.l"
{
  			             classFile=tagYYtext;
				     BEGIN( SearchMemberRef );
  				   }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 593 "doxytag.l"
{
  				     if (YY_START==ReadClassFile)
				     {
				       classFile=yyFileName;
				     }
				     //BEGIN( ReadMemberRef );
				     BEGIN( Start );
				   }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 601 "doxytag.l"
{
				     memberRef=tagYYtext;
				     BEGIN( SearchMemberName );
				   }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 605 "doxytag.l"
{ // <strong> is for qt-1.44, <b> is for qt-2.00  
			             BEGIN( ReadMemberName );
				   }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 608 "doxytag.l"
{
  			             unput(*tagYYtext);
				     BEGIN( ReadMemberName );
  				   }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 612 "doxytag.l"
{ 
  				     memberName="operator";
  				     BEGIN( ReadOperator );
				   }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 616 "doxytag.l"
{ memberName+=*tagYYtext; } 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 617 "doxytag.l"
{ memberName+="<"; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 618 "doxytag.l"
{ memberName+=">"; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 619 "doxytag.l"
{ memberName+=" new"; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 620 "doxytag.l"
{ memberName+=" delete"; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 621 "doxytag.l"
{ BEGIN( SearchArgs ); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 622 "doxytag.l"
{
				     memberName=tagYYtext;
  			             BEGIN( SearchArgs );
			           }  
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 626 "doxytag.l"
{ 
  				     //printf("SearchArg className=%s memberName=%s\n",className.data(),memberName.data());
				     if (!className.isEmpty() && !memberName.isEmpty())
				       BEGIN( ReadArgs ); 
				     else
				       BEGIN( Start );
				   }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 633 "doxytag.l"
{ memberArgs+='&'; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 634 "doxytag.l"
{ memberArgs+='<'; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 635 "doxytag.l"
{ memberArgs+='>'; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 636 "doxytag.l"
{ memberArgs+='"'; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 637 "doxytag.l"
{ memberArgs+=' '; }
	YY_BREAK
/*
<ReadArgs>[{}]			   { // handle enums
  				     memberArgs.resize(0);
				     addMember(memberName,memberRef,memberArgs);
				     if (*tagYYtext=='}')
				       BEGIN( Start );
				     else
				       BEGIN( SearchClassFile );
  				   }
  */
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 648 "doxytag.l"
{
                                     //printf("adding member %s\n",memberName.data());
				     memberArgs=memberArgs.stripWhiteSpace();
				     //if (newClass)
				     //{
				     //  newClass=FALSE;
				     //  addClass(className);
				     //}
				     addMember(memberName,memberRef,memberArgs);
                                     memberName.resize(0);
                                     memberRef.resize(0);
                                     memberArgs.resize(0);
				     if (*tagYYtext=='<')
				       BEGIN( SkipHTMLTag);
				     else
				       BEGIN( Start );
  				   }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 665 "doxytag.l"
{ memberArgs+=(*tagYYtext)&0x7f; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 666 "doxytag.l"
{ BEGIN( Start ); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 667 "doxytag.l"

	YY_BREAK
case 122:
YY_RULE_SETUP
#line 668 "doxytag.l"

	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 669 "doxytag.l"
{ yyLineNr++; 
  				     if (YY_START!=SkipHTMLTag) BEGIN( Start ); 
				   }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 673 "doxytag.l"
ECHO;
	YY_BREAK
#line 2584 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(SearchClassFile):
case YY_STATE_EOF(ReadClassFile):
case YY_STATE_EOF(CheckClassName):
case YY_STATE_EOF(ReadClassName):
case YY_STATE_EOF(SearchMemberRef):
case YY_STATE_EOF(ReadMemberRef):
case YY_STATE_EOF(SearchMemberName):
case YY_STATE_EOF(ReadMemberName):
case YY_STATE_EOF(ReadOperator):
case YY_STATE_EOF(SearchBaseClasses):
case YY_STATE_EOF(ReadBaseClass):
case YY_STATE_EOF(SearchRefName):
case YY_STATE_EOF(ReadRefName):
case YY_STATE_EOF(SearchArgs):
case YY_STATE_EOF(ReadArgs):
case YY_STATE_EOF(SearchWords):
case YY_STATE_EOF(SkipHTMLTag):
case YY_STATE_EOF(CheckConstructor):
case YY_STATE_EOF(SkipPreformated):
case YY_STATE_EOF(Qt3ReadType):
case YY_STATE_EOF(Qt3ReadAnchor):
case YY_STATE_EOF(Qt3ReadName):
case YY_STATE_EOF(Qt3ReadOperator):
case YY_STATE_EOF(Qt3ReadArgs):
case YY_STATE_EOF(DoxReadAnchor):
case YY_STATE_EOF(DoxReadName):
case YY_STATE_EOF(DoxReadArgs):
case YY_STATE_EOF(DoxClassName):
case YY_STATE_EOF(DoxClassBase):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed tagYYin at a new source and called
			 * tagYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = tagYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( tagYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * tagYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of tagYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					tagYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			tagYYrestart(tagYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 693 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 693 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 692);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up tagYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					tagYYrestart(tagYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( tagYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve tagYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void tagYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        tagYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            tagYY_create_buffer(tagYYin,YY_BUF_SIZE );
	}

	tagYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	tagYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void tagYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		tagYYpop_buffer_state();
	 *		tagYYpush_buffer_state(new_buffer);
     */
	tagYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	tagYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (tagYYwrap()) processing, but the only time this flag
	 * is looked at is after tagYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void tagYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	tagYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE tagYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) tagYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tagYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) tagYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in tagYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	tagYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with tagYY_create_buffer()
 * 
 */
    void tagYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		tagYYfree((void *) b->yy_ch_buf  );

	tagYYfree((void *) b  );
}

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a tagYYrestart() or at EOF.
 */
    static void tagYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	tagYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then tagYY_init_buffer was _probably_
     * called from tagYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void tagYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		tagYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void tagYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	tagYYensure_buffer_stack();

	/* This block is copied from tagYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from tagYY_switch_to_buffer. */
	tagYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void tagYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	tagYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		tagYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void tagYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)tagYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)tagYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE tagYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) tagYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tagYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	tagYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to tagYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       tagYY_scan_bytes() instead.
 */
YY_BUFFER_STATE tagYY_scan_string (yyconst char * yystr )
{
    
	return tagYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to tagYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE tagYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) tagYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in tagYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = tagYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in tagYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tagYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		tagYYtext[tagYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = tagYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		tagYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int tagYYget_lineno  (void)
{
        
    return tagYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *tagYYget_in  (void)
{
        return tagYYin;
}

/** Get the output stream.
 * 
 */
FILE *tagYYget_out  (void)
{
        return tagYYout;
}

/** Get the length of the current token.
 * 
 */
int tagYYget_leng  (void)
{
        return tagYYleng;
}

/** Get the current token.
 * 
 */

char *tagYYget_text  (void)
{
        return tagYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void tagYYset_lineno (int  line_number )
{
    
    tagYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see tagYY_switch_to_buffer
 */
void tagYYset_in (FILE *  in_str )
{
        tagYYin = in_str ;
}

void tagYYset_out (FILE *  out_str )
{
        tagYYout = out_str ;
}

int tagYYget_debug  (void)
{
        return tagYY_flex_debug;
}

void tagYYset_debug (int  bdebug )
{
        tagYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from tagYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    tagYYin = stdin;
    tagYYout = stdout;
#else
    tagYYin = (FILE *) 0;
    tagYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * tagYYlex_init()
     */
    return 0;
}

/* tagYYlex_destroy is for both reentrant and non-reentrant scanners. */
int tagYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		tagYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		tagYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	tagYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * tagYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *tagYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *tagYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void tagYYfree (void * ptr )
{
	free( (char *) ptr );	/* see tagYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 673 "doxytag.l"



/*@ ----------------------------------------------------------------------------
 */


void parse(QCString &s)
{
  bases.clear();
  nameBug       = FALSE;
  //newClass      = TRUE;
  inputString   = s;
  inputPosition = 0;
  yyLineNr      = 0;
  tagYYrestart( tagYYin );
  BEGIN( Start );
  tagYYlex();
  //printf("Number of lines scanned: %d\n",yyLineNr);
}

void parseFile(QFileInfo &fi)
{
  printf("Parsing file %s...\n",fi.fileName().data());
  QFile f;
  f.setName(fi.absFilePath());
  if (f.open(IO_ReadOnly))
  {
    yyFileName = fi.fileName();
    className.resize(0);
    memberName.resize(0);
    //printf("Parsing file %s...\n",fi.fileName().data());
    QCString input(fi.size()+1);
    docBaseLink=fi.fileName();
    docRefName=fi.fileName().copy();
    //searchIndex.addReference(docRefName,docBaseLink);
    //searchIndex.addWord(docRefName,docRefName,TRUE);
    f.readBlock(input.data(),fi.size());
    input.at(fi.size())='\0';
    parse(input);
  }
  else
  {
    fprintf(stderr,"Warning: Cannot open file %s\n",fi.fileName().data());
  }
}

void parseFileOrDir(const char *fileName)
{
  QFileInfo fi(fileName);
  if (fi.exists())
  {
    if (fi.isFile())
    {
      parseFile(fi);
    }
    else if (fi.isDir())
    {
      QDir dir(fileName);
      dir.setFilter( QDir::Files );
      dir.setNameFilter( "*.html" );
      const QFileInfoList *list = dir.entryInfoList();
      QFileInfoListIterator it( *list );
      QFileInfo *cfi;
      for ( it.toFirst() ; (cfi=it.current()) ; ++it)
      {
	if (cfi->isFile())
	{
	  parseFile(*cfi);
	}
      }
    }
  }
  else
  {
    fprintf(stderr,"Warning: File %s does not exist\n",fileName);
  }
}

void usage(const char *name)
{
  fprintf(stderr,"Doxytag version %s\nCopyright Dimitri van Heesch 1997-2006\n\n",
      versionString);
  fprintf(stderr,"  Generates a tag file and/or a search index for a set of HTML files\n\n");
  fprintf(stderr,"Usage: %s [-t tag_file] [ html_file [html_file...] ]\n",name);
  fprintf(stderr,"Options:\n");
  fprintf(stderr,"  -t <tag_file>   Generate tag file <tag_file>.\n");
  fprintf(stderr,"If no HTML files are given all files in the current dir that\n"
                 "have a .html extension are parsed.\n\n");
  exit(1);
}

const char *getArg(int argc,char **argv,int &optind,const char c)
{
  char *s=0;
  if (strlen(&argv[optind][2])>0)
    s=&argv[optind][2];
  else if (optind+1<argc)
    s=argv[++optind];
  else
  {
    fprintf(stderr,"option -%c requires an argument\n",c);
    exit(1);
  }
  return s;
}

int main(int argc,char **argv)
{
  QCString tagName;
  QCString indexName;
  
  int optind=1;
  const char *arg;
  while (optind<argc && argv[optind][0]=='-')
  {
    switch(argv[optind][1])
    {
      case 't':
	arg=getArg(argc,argv,optind,'t');
	tagName=arg;
	break;
      case 's':
	arg=getArg(argc,argv,optind,'s');
	indexName=arg;
	break;
      case 'h':
      case '?':
        usage(argv[0]);
        break;
      default:
	fprintf(stderr,"Unknown option -%c\n",argv[optind][1]);
	usage(argv[0]);
    }
    optind++;
  }
  
  genTag   = !tagName.isEmpty();
  genIndex = !indexName.isEmpty();

  if (!genTag && !genIndex)
  {
    fprintf(stderr,"Nothing to do !\n\n");
    usage(argv[0]);
  }
  
  int i;
  if (optind>=argc)
  {
    parseFileOrDir(".");
  }
  else
  {
    for (i=optind;i<argc;i++)
    {
      parseFileOrDir(argv[i]);
    }
  }
  if (genIndex)
  {
    fprintf(stderr,"Error: doxytag cannot be used to generate a search index anymore.\n"
	           "This functionality has been integrated into doxygen.\n");
//    printf("Writing search index\n");
//    if (!searchIndex.saveIndex(indexName))
//    {
//      fprintf(stderr,"Error: Could not write search index\n");
//    }
//    QFileInfo fi(indexName);
//    if (fi.exists())
//    {
//      QCString dir=convertToQCString(fi.dir().absPath());
//      fi.setFile(dir+"/search.png");
//      if (!fi.exists()) writeSearchButton(dir);
//      fi.setFile(dir+"/doxygen.png");
//      if (!fi.exists()) writeLogo(dir);
//      fi.setFile(dir+"/search.cgi");
//      if (!fi.exists())
//      {
//        QFile f;
//	f.setName(dir+"/search.cgi");
//	if (f.open(IO_WriteOnly))
//	{
//	  QTextStream t(&f);
//	  t << "#!/bin/sh" << endl 
//	    << "DOXYSEARCH=" << endl 
//	    << "DOXYPATH=" << endl
//	    << "if [ -f $DOXYSEARCH ]" << endl
//	    << "then" << endl
//	    << "  $DOXYSEARCH $DOXYPATH" << endl 
//	    << "else" << endl
//	    << "  echo \"Content-Type: text/html\"" << endl
//	    << "  echo \"\"" << endl
//	    << "  echo \"<H1>Error: $DOXYSEARCH not found. Check cgi script!\"" << endl
//	    << "fi" << endl;
//          f.close();
//	}	  
//	else
//	{
//	  fprintf(stderr,"Error: could not open file %s for writing\n",(dir+"/search.cgi").data());
//	}
//      }
//    }
  }
  if (genTag)
  {
    QFile f;
    f.setName(tagName);
    if (f.open(IO_WriteOnly))
    {
      QTextStream t(&f);
      t << "<tagfile>" << endl;
      ClassDef *cd=classList.first();
      while (cd)
      {
	t << "  <compound kind=\"";
	if (cd->isFile) t << "file"; else t << "class";  
	t << "\">" << endl;
	t << "    <name>" << convertToXML(cd->name) << "</name>" << endl; 
        char *base=cd->bases.first();
        while (base)
	{
	  t << "    <base>" << convertToXML(base) << "</base>" << endl;
	  base=cd->bases.next();
	}
	t << "    <filename>" << convertToXML(cd->fileName) << "</filename>" << endl;
	MemberDef *md=cd->memberList.first();
	while (md)
	{
	  if (md->anchor.right(5)=="-enum")
	  {
	    t << "    <member kind=\"enum\">" << endl;
	  }
	  else
	  {
	    t << "    <member kind=\"function\">" << endl;
	  }
	  t << "      <name>" << convertToXML(md->name) << "</name>" << endl;
	  t << "      <anchor>" << convertToXML(md->anchor) << "</anchor>" << endl;
	  t << "      <arglist>" << convertToXML(md->args) << "</arglist>" << endl;
	  t << "    </member>" << endl;
	  md=cd->memberList.next();
	}
	t << "  </compound>" << endl;
	cd=classList.next();
      }
      t << "</tagfile>" << endl;
    }
    else
    {
      fprintf(stderr,"Error: Could not write tag file %s\n",tagName.data());
    }
  }
  return 0;
}

extern "C" {
int	tagYYwrap()	{ return 1 ; }
};

