
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[958] =
    {   0,
      132,  132,  150,  148,  149,    1,  148,  149,  147,  149,
        3,  148,  149,  148,  149,    2,  148,  149,    5,  148,
      149,    1,    5,  148,  149,    5,  148,  149,    5,  147,
      149,    3,    5,  148,  149,    4,  148,  149,    5,  148,
      149,    5,  148,  149,    2,    5,  148,  149,   51,  148,
      149,    1,   51,  148,  149,   47,  147,  149,    3,   51,
      148,  149,   51,  148,  149,   48,   51,  148,  149,   48,
       51,  148,  149,   48,   51,  148,  149,   48,   51,  148,
      149,   48,   51,  148,  149,    2,   51,  148,  149,   74,
      148,  149,    1,   74,  148,  149,   72,  147,  149,    3,

       74,  148,  149,   74,  148,  149,   73,   74,  148,  149,
       73,   74,  148,  149,   73,   74,  148,  149,    2,   74,
      148,  149,   75,   76,  148,  149,    1,   75,   76,  148,
      149,   79,  147,  149,    3,   75,   76,  148,  149,   76,
      148,  149,    2,   75,   76,  148,  149,   21,  148,  149,
        1,   21,  148,  149,   22,  147,  149,    3,   21,  148,
      149,   14,   21,  148,  149,   21,  148,  149,   21,  148,
      149,   19,   21,  148,  149,16402,   21,  148,  149,   19,
       21,  148,  149,16402,    9,   21,  148,  149,   10,   21,
      148,  149,    2,   21,  148,  149,   15,  148,  149,    1,

       15,  148,  149,   17,  148,  149,   15,  148,  149,  148,
      149,    2,   15,  148,  149,  148,  149,    1,  148,  149,
        3,  148,  149,  148,  149,    2,  148,  149,   81,  148,
      149, 8276,  148,  149,16468,16469,  148,  149,   87,  148,
      149,   88,  148,  149,   86,  148,  149,   89,  148,  149,
      144,  148,  149,    1,  144,  148,  149,  132,  144,  148,
      149,  131,  147,  149,    3,  144,  148,  149,  135,  144,
      148,  149,  128,  144,  148,  149,  136,  144,  148,  149,
      144,  148,  149,  134,  144,  148,  149,  129,  144,  148,
      149,  144,  148,  149,    2,  144,  148,  149,   67,  148,

      149,    1,   67,  148,  149,    3,   67,  148,  149,   67,
      148,  149,    2,   67,  148,  149,   66,   67,  148,  149,
        1,   66,   67,  148,  149,   66,   67,  148,  149,   66,
      147,  149,    3,   66,   67,  148,  149,   65,   67,  148,
      149,   66,   67,  148,  149,    2,   66,   67,  148,  149,
      105,  107,  148,  149,    1,  107,  148,  149,  106,  147,
      149,    3,  105,  107,  148,  149,  107,  148,  149,  107,
      148,  149,  107,  148,  149,    2,  105,  107,  148,  149,
      108,  111,  148,  149,    1,  108,  111,  148,  149,  108,
      110,  147,  149,    3,  108,  111,  148,  149,  111,  148,

      149,  108,  111,  148,  149,    2,  108,  111,  148,  149,
      107,  148,  149,  107,  148,  149,  107,  148,  149,  118,
      122,  123,  148,  149,    1,  118,  123,  148,  149,  119,
      147,  149,    3,  118,  122,  123,  148,  149,  122,  123,
      148,  149,  123,  148,  149,    2,  118,  122,  123,  148,
      149,  115,  117,  148,  149,    1,  117,  148,  149,  116,
      147,  149,    3,  115,  117,  148,  149,  117,  148,  149,
      115,  117,  148,  149,    2,  115,  117,  148,  149,  126,
      127,  148,  149,    1,  127,  148,  149,    3,  126,  127,
      148,  149,  126,  127,  148,  149,    2,  126,  127,  148,

      149,   57,  148,  149,    1,   57,  148,  149,   58,  147,
      149,    3,   57,  148,  149,   57,  148,  149,   56,   57,
      148,  149,   57,  148,  149,   56,   57,  148,  149,    2,
       57,  148,  149,   64,  148,  149,    1,   64,  148,  149,
       62,  147,  149,    3,   64,  148,  149,   64,  148,  149,
       60,   64,  148,  149,   64,  148,  149,    2,   64,  148,
      149,   63,   64,  148,  149,   61,   64,  148,  149,  142,
      148,  149,    1,  142,  148,  149,    3,  142,  148,  149,
      139,  142,  148,  149,  142,  148,  149,  142,  148,  149,
        2,  142,  148,  149,  143,  148,  149,    1,  143,  148,

      149,    3,  143,  148,  149,  141,  143,  148,  149,  143,
      148,  149,  143,  148,  149,    2,  143,  148,  149,   52,
      148,  149,   50,  148,  149,    1,   50,  148,  149,    3,
       50,  148,  149,   50,  148,  149,   50,  148,  149,    2,
       50,  148,  149,   29,  148,  149,    1,   29,  148,  149,
       27,  147,  149,    3,   29,  148,  149,   26,   29,  148,
      149,   29,  148,  149,   23,   29,  148,  149,   24,   29,
      148,  149,   29,  148,  149,   28,   29,  148,  149,    2,
       29,  148,  149,   33,  148,  149,    1,   33,  148,  149,
        3,   33,  148,  149,   30,   33,  148,  149,   33,  148,

      149,   33,  148,  149,    2,   33,  148,  149,  101,  148,
      149,    1,  101,  148,  149,    3,  101,  148,  149,  101,
      148,  149,   99,  101,  148,  149,    2,  101,  148,  149,
      145,  146,    5,    5,    4,    5,   48,   48,   48,   48,
       48,   48,   48,   48,   78,  145,   77,  146,   73,   73,
       73,   73,   75, 8210,   19,16402,   20,   19,16402,   15,
       15,  145,   15,  146,   16,   82,  145,  146,   80,   81,
     8276, 8277,   83, 8276,16468,16469,   88,   87,   88,   86,
       89,   89,  132,  133,   90,  145,   91,  146,  129,  130,
       66,   66,   65,  105,   92,   94,  145,   93,  146,  108,

      109,  108,  146,  104,  104,  145,  118,  122,  118,  122,
      120,  122,  145,  121,  122,  146,  115,  112,  114,  145,
      113,  115,  146,  126,  124,  126,  145,  125,  126,  146,
       56,   53,   56,   60,   59,   61,  138,  145,  137,  146,
      140,   52,   49,   31,  145,   31,  146,   32,   99,16390,
       48,   48,   48,   48,   41,   48,   48,   48,   48,   48,
       73,   73,   73,   68,   73,   73,   13,   13,   19,16402,
      133,  103,   56,   25,    7, 8198,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   73,   69,   73,   73,   73,
       12,   11,   12,   19,16402,   89,   95,   56,   25,    7,

        7,   48,   42,   45,   43,   43,   48,   48,   48,   48,
       48,   48,   48,   70,   73,   71,   73,   73,   11,   19,
    16402,   97,   56,    7,   48,   46,   38,   37,   48,   48,
       48,   44,   19,16402,   96,   98,  100,   56,    7,   36,
       40,   39,16418,   35,    8,   56,    7, 8226,   55,   54,
        7, 8226,  102,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_accept[990] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   14,   16,   19,
       22,   26,   29,   32,   36,   39,   42,   45,   49,   52,
       56,   59,   63,   66,   70,   74,   78,   82,   86,   90,
       93,   97,  100,  104,  107,  111,  115,  119,  123,  127,

      132,  135,  140,  143,  148,  151,  155,  158,  162,  166,
      169,  172,  177,  180,  185,  189,  193,  197,  200,  204,
      207,  210,  212,  216,  218,  221,  224,  226,  229,  232,
      237,  239,  242,  245,  248,  251,  254,  258,  262,  265,
      269,  273,  277,  281,  284,  288,  292,  295,  299,  302,
      306,  310,  313,  317,  321,  326,  330,  333,  338,  342,
      346,  351,  355,  359,  362,  367,  370,  373,  376,  381,
      385,  390,  394,  399,  402,  406,  411,  414,  417,  420,
      425,  430,  433,  439,  443,  446,  452,  456,  460,  463,
      468,  471,  475,  480,  484,  488,  493,  497,  502,  505,

      509,  512,  516,  519,  523,  526,  530,  534,  537,  541,
      544,  548,  551,  555,  558,  562,  566,  570,  573,  577,
      581,  585,  588,  591,  595,  598,  602,  606,  610,  613,
      616,  620,  623,  626,  630,  634,  637,  640,  644,  647,
      651,  654,  658,  662,  665,  669,  673,  676,  680,  684,
      687,  691,  695,  699,  702,  705,  709,  712,  716,  720,
      723,  727,  731,  732,  733,  734,  735,  736,  737,  737,
      737,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      747,  749,  750,  751,  752,  753,  754,  754,  754,  754,
      755,  757,  758,  758,  760,  761,  763,  765,  766,  766,

      767,  768,  769,  769,  770,  771,  772,  773,  774,  777,
      777,  778,  779,  780,  781,  782,  782,  783,  784,  784,
      785,  787,  789,  790,  791,  791,  792,  793,  794,  795,
      796,  798,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  801,  802,  804,  805,  807,  807,  807,
      809,  810,  811,  814,  817,  817,  818,  819,  821,  824,
      825,  828,  831,  832,  833,  833,  834,  835,  836,  837,
      839,  841,  842,  843,  844,  844,  844,  844,  846,  848,
      849,  850,  850,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,

      867,  868,  868,  869,  869,  869,  871,  871,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  873,  873,
      874,  874,  875,  875,  875,  875,  875,  875,  876,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  889,  890,  891,  892,  894,  894,  894,  896,  897,
      897,  897,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      899,  899,  900,  900,  900,  901,  901,  902,  902,  903,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  914,

      915,  915,  916,  918,  919,  920,  920,  920,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  924,  924,  924,  924,  925,  925,
      926,  926,  926,  927,  928,  929,  930,  931,  932,  933,
      933,  933,  935,  936,  936,  936,  936,  936,  936,  936,
      937,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  939,  939,
      940,  940,  941,  941,  942,  943,  944,  945,  945,  945,
      945,  945,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  947,  947,  948,  948,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  950,  951,  951,
      952,  952,  953,  953,  953,  953,  953,  953,  953,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      957,  957,  957,  957,  957,  957,  957,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,    1,   10,   11,
       12,   13,    1,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
        1,   22,    1,   23,   24,   24,   25,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       26,   27,   28,    1,   24,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   35,   35,   38,   39,   40,
       41,   42,   35,   43,   44,   45,   46,   47,   35,   48,
       49,   35,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    1,    1,    7,
        8,    1,    9,    1,   10,   11,   12,   13,   13,    1,
       14,    1,   15,   16,   16,    1,   17,    1,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1045] =
    {   0,
        0,    4,    8,   59,  111,    0,  163,    0,   14,   18,
      215,    0,   22,   38,  266,  270,  322,    0,  351,    0,
      400,    0,  452,    0,   42,  503,  508,  512,  517,  522,
      573,  624,  528,  533,  675,  726,  549,  566,  590,  600,
      604,  610,  778,    0,  830,    0,  871,    0,  631,  664,
      655,  695,  897,    0,  706,  715,  945,  996,  959,  965,
     1048,    0, 2297, 4081, 4081, 4081, 4081,   15, 4081, 4081,
     4081,   33, 4081, 4081, 4081,   17,   68, 4081, 4081, 4081,
     4081, 4081,   20,    0, 2259,   10,   38, 2251, 4081, 4081,
     4081, 4081, 4081,   56,    0,   13, 2255, 4081,    0,    0,

     4081,    0,   68,    0, 4081, 4081, 4081, 4081, 4081, 2261,
       78,   93,   10,  619, 4081, 4081, 4081,    0,    0, 4081,
       86,    0,    0,  262,  269,  271,  272,  273,    0,   97,
       77, 2276, 2274, 2272,   72, 4081, 4081,   99, 4081, 4081,
     4081, 2262, 4081,   92, 4081,    0,  277, 4081, 4081, 4081,
     4081,   93, 4081, 4081, 4081,  293, 4081, 4081, 4081,  273,
     4081,    0, 4081, 4081,    0, 2251,  285, 1078,    0,    0,
        0,    0,    0, 2250,  286,    0, 2240,  287,  272,  295,
        0, 4081,  526,  294,  277,  540,    0, 4081, 4081,    0,
     2224,  296,    0,    0, 4081,    0,  302,    0, 4081, 4081,

     4081, 4081,  303,    0,  373, 2196, 4081, 4081, 4081, 4081,
     4081,  304,    0, 2224, 4081, 4081,    0, 4081, 4081, 4081,
     4081,  523,    0, 4081, 4081, 4081, 4081, 4081,  531,    0,
     4081,    0, 4081, 4081, 4081,  539,  554, 4081, 4081, 4081,
     4081, 4081, 4081, 2194, 4081, 4081,  548, 4081, 4081, 4081,
     4081, 4081, 4081,  550,    0, 4081, 4081, 4081, 4081,  571,
        0, 4081, 4081, 4081, 4081,  670, 4081,  726,  512, 2200,
      737,    0, 2177,  554, 2168,  948, 2157, 2148, 2144, 4081,
     4081,    0,  595, 2135,  972,    0, 2156,  563,  650, 4081,
      682, 4081, 2160,  991,    0,    0,    0, 4081,  540, 4081,

      575,  609,  576, 4081,  608,  640, 4081, 4081,  710,  506,
     2157, 2154, 2145, 2144,  647, 2123,  687,  637, 2120, 2124,
     4081, 4081,    0, 4081, 2105, 4081,  667, 4081,    0, 4081,
     2075, 4081, 1096, 2044, 2043, 2042, 2031, 2040, 2038, 2012,
     2017, 2010,    0, 4081,    0, 4081, 4081, 2007,  687,  632,
        0,    0,    0,    0, 1987,    0, 4081, 4081,    0,    0,
        0,    0,    0, 4081, 2023, 1991,    0, 4081,    0, 4081,
     4081, 4081,    0, 4081, 2011, 2004, 1994, 4081, 4081, 4081,
        0, 1981, 1963,  721, 1930, 1932, 1930, 1921, 4081, 1924,
     1923, 1913, 1903, 1906, 1904, 1903, 1898, 4081, 1894, 1893,

     4081, 1914, 1911,  691,  761, 1011, 1897, 1909, 1866, 1864,
      709, 1859, 1872, 1864, 1842, 1853, 1841,  714, 1828, 1840,
     1831, 1821, 1819, 1819, 1809, 1812, 1814, 4081, 1772, 1768,
     1790, 4081, 1777,  742, 1769,  765, 1099, 1103, 1137, 4081,
     1739,  881, 1187, 1744, 1738, 1720, 1699, 1690, 1693,  882,
      733, 1692, 1686, 4081, 4081,  876,  886, 1143, 4081, 1678,
     1663, 4081, 1660, 1649, 1653, 1654, 1643, 1646, 1646, 1645,
      770, 1645, 1632, 1619, 1605, 1597, 1604, 1584, 1209, 1583,
     1606, 4081,  955,  773, 4081, 1239, 1246, 1250, 1573, 4081,
     4081,  921, 1571, 1300,  968, 1569, 1554, 1564, 1592, 4081,

      950, 1554,    0,  978, 4081, 1576, 1020, 1257, 1551, 1023,
     1545, 1542, 1533, 1516, 1526, 1513, 1029, 1034, 1508, 1500,
     1488, 1495, 1492, 1497, 1483, 1481, 1479, 1470, 1485, 1478,
     1456, 1463, 1456, 1459, 1480, 1478, 1350, 1353, 1356, 1484,
     1006, 1451, 4081,  974, 4081,  988, 1115, 1451, 1469, 1433,
     1147, 1360, 1037, 1425, 1416, 1423, 1421, 1431, 1417, 1042,
     4081, 1156, 1415, 1412, 1410, 1411, 1407, 1388, 1392, 1394,
     1369, 1370, 1363, 1367, 1371, 1361, 1364, 1367, 1374, 1377,
     1381, 1395, 1109, 1007, 4081, 1159, 4081, 1161, 1165, 1384,
     1371, 4081, 1353, 1351, 1352, 1345, 1329, 1330, 1330, 1261,

     1254, 1244, 1220, 1230, 1209, 1213, 1146, 1150, 1141, 1130,
     1135, 1122, 1018, 1408, 1412, 1415,    0, 1170, 1418, 1149,
     1117, 1105, 1089, 1084, 1094, 1075,    0, 1064,  997,  991,
      979,  957,  934,  920,  919,  885, 1126, 4081, 1433, 1436,
     1439,    0, 1174, 1443, 1466,  874,  861,  859, 4081,  714,
      717,  693,  668,  666,  644,  646, 1471, 1474, 1477, 1260,
     1495, 1500,  625,  626,  606,  571,  561,  562,  500, 1505,
     1508, 1514, 1269, 1526, 1535,  482,  341,  275, 1539, 1543,
     1548, 1272, 1562, 1557,   33, 1567, 1574, 1577, 1281, 1597,
     1587, 1610, 1615, 1606, 1625, 1628, 1637, 1640, 1650, 1645,

     1655, 1664, 1659, 1669, 1678, 1687, 1693, 1708, 1698, 1713,
     1718, 1702, 1727, 1736, 1730, 1746, 1756, 1741, 1751, 1766,
     1761, 1771, 1785, 1780, 1790, 1810, 1794, 1799, 1815, 1804,
     1820, 1829, 1824, 1834, 1844, 1838, 1853, 1864, 1858, 1873,
     1878, 1887, 1892, 1895, 1906, 1912, 1915, 1926, 1929, 1939,
     1944, 1948, 1957, 1966, 1969, 1974, 1979, 1987, 1992, 1983,
     1997, 2006, 2001, 2015, 2027, 2018, 2032, 2041, 2036, 2050,
     2055, 2060, 2067, 2076, 2070, 2085, 2090, 2095, 2103, 2108,
     2099, 2113, 2118, 2127, 2130, 2139, 2133, 2148, 2158, 2151,
     2167, 2177, 2170, 2182, 2187, 2192, 2199, 2202, 2211, 2214,

     2219, 2228, 2235, 2240, 2231, 2245, 2255, 2250, 2260, 2269,
     2279, 2282, 2291, 2303, 2306, 2309, 2318, 2321, 2331, 2340,
     2343, 2353, 2346, 2358, 2367, 2362, 2372, 2381, 2390, 2394,
     2397, 2406, 2410, 2415, 2420, 2424, 2434, 2429, 2439, 2448,
     2457, 2463, 2478, 2468, 2483, 2488, 2472, 2497, 2506, 2500,
     2516, 2526, 2511, 2521, 2536, 2531, 2541, 2555, 2550, 2560,
     2580, 2564, 2569, 2585, 2574, 2590, 2599, 2594, 2604, 2614,
     2608, 2623, 2634, 2628, 2643, 2648, 2657, 2662, 2665, 2676,
     2682, 2685, 2696, 2699, 2709, 2714, 2718, 2727, 2736, 2739,
     2744, 2749,   57, 2758, 2753, 2763, 2768, 2776, 2785, 2793,

     2788, 2812, 2802, 2817, 2806, 2826, 2829, 2836, 2841, 2844,
        4, 2850, 2854, 2860, 2865, 2868, 2877, 2880, 2884, 2892,
     2898, 2902, 2908, 2916, 2919, 2928, 2932, 2935, 2940, 2946,
     2950, 2956, 2959, 2967, 2970, 2976, 2983, 2988, 2994, 2998,
     3007, 3010, 3018, 3024, 3027, 3031, 3036, 3042, 3046, 3049,
     3058, 3061, 3066, 3075, 3079, 3084, 3090, 3097, 3100, 3109,
     3114, 3117, 3123, 3127, 3132, 3138, 3141, 3148, 3151, 3157,
     3165, 3171, 3175, 3180, 3189, 3192, 3199, 3205, 3208, 3213,
     3219, 3223, 3228, 3231, 3240, 3243, 3247, 4081, 3297, 3314,
     3331, 3348, 3365, 3382, 3399, 3416, 3433, 3450, 3467, 3484,

     3501, 3518, 3535, 3552, 3569, 3586,  977, 1265, 3603, 3620,
     3635, 3651, 3667, 3684, 3699, 3713, 3727, 1266, 3743, 3760,
     3776, 3793, 3809, 3825, 3841, 3858, 1274, 1275, 1282, 3875,
     1353, 3892, 3909, 3917, 3933, 3950, 3967, 3983, 4000, 4017,
     4033, 4047, 1359, 4063
    } ;

static yyconst flex_int16_t yy_def[1045] =
    {   0,
      989,  989,  989,  990,  988,    5,  988,    7,  991,  991,
      988,   11,  992,  992,  993,  993,  988,   17,   17,   19,
      988,   21,  988,   23,  994,  995,  989,  989,  989,  989,
      996,  996,  997,  997,  996,  996,  998,  998,  999,  999,
     1000, 1000,  988,   43,  988,   45,   45,   47, 1001, 1001,
     1002, 1002,   19,   53, 1003, 1003, 1004, 1004, 1005, 1005,
      988,   61,  988,  988,  988,  988,  988,  988,  988,  988,
      988, 1006,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988, 1007, 1007, 1007, 1007, 1007,  988,  988,
      988,  988,  988,  988, 1008, 1008, 1008,  988, 1009, 1009,

      988, 1009,  988, 1009,  988,  988,  988,  988,  988, 1010,
      988, 1011,  988, 1011,  988,  988,  988, 1012, 1012,  988,
     1012, 1013, 1012, 1014, 1014, 1014, 1014, 1014, 1015, 1016,
      988,  988,  988,  988, 1017,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988, 1018,  988,  988,  988,  988,
      988,  988,  988,  988,  988, 1019,  988,  988,  988,  988,
      988, 1020,  988,  988, 1020,  988,  988,  988, 1020, 1021,
     1021, 1021, 1021,  988, 1021, 1021,  988,  988,  988, 1022,
     1023,  988, 1022, 1024,  988, 1022, 1025,  988,  988, 1025,
      988, 1025, 1025, 1026,  988, 1026, 1026, 1026,  988,  988,

      988,  988,  988, 1027,  988, 1027,  988,  988,  988,  988,
      988,  988, 1028,  988,  988,  988, 1029,  988,  988,  988,
      988,  988, 1030,  988,  988,  988,  988,  988,  988, 1030,
      988, 1031,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988, 1032,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988, 1033,  988,  988,  988,  988,  988,
     1034,  988,  988,  988,  988, 1006,  988,  988,  988, 1035,
      988, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,  988,
      988, 1008, 1008, 1008, 1008, 1009,  988, 1036,  988,  988,
     1011,  988,  988, 1011, 1012, 1012, 1012,  988, 1014,  988,

     1014, 1014,  988,  988, 1015,  988,  988,  988, 1016,  988,
      988,  988,  988,  988,  988,  988, 1017,  988,  988,  988,
      988,  988, 1018,  988,  988,  988, 1019,  988, 1020,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988, 1021,  988, 1021,  988,  988,  988,  988, 1022,
     1023, 1024, 1024, 1024,  988, 1025,  988,  988, 1025, 1026,
     1026, 1026, 1027,  988,  988, 1027, 1028,  988, 1029,  988,
      988,  988, 1031,  988,  988, 1037, 1038,  988,  988,  988,
     1034, 1039, 1035,  988, 1007, 1007, 1007, 1007,  988, 1007,
     1007, 1007, 1007, 1007, 1008, 1008, 1008,  988, 1008, 1008,

      988,  988,  988,  988,  988, 1011,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988, 1027,
     1040,  988,  988,  988, 1039,  988,  988,  988,  988,  988,
     1007, 1007,  988, 1007, 1007, 1007, 1007, 1007, 1007, 1008,
     1008, 1008, 1008,  988,  988,  988,  988, 1011,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988, 1027,
     1041,  988,  988,  988,  988,  988,  988,  988, 1007,  988,
      988,  988, 1007,  988, 1007, 1007, 1007, 1007, 1007,  988,

      988, 1008, 1008, 1008,  988,  988,  988, 1011,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988, 1027,  988,  988,  988,  988,  988, 1007,
      988,  988,  988,  988,  988, 1007, 1007, 1007,  988,  988,
      988, 1011,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988, 1027,  988,  988,
      988,  988,  988,  988,  988, 1042,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988, 1027,  988,  988,  988, 1043,  988,  988,  988,
      988,  988,  988,  988,  988,  988, 1044,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988, 1043,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,    0,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988
    } ;

static yyconst flex_int16_t yy_nxt[4134] =
    {   0,
      988,   65,  303,   66,   67,   65,  988,   66,   67,   65,
      304,   66,   67,  292,  293,  100,   68,  101,  102,  100,
       68,  101,  102,  119,   68,   66,   67,  263,  120,  263,
      103,  264,  263,  264,  103,  266,  264,  988,  121,  119,
      267,   66,   67,  150,  120,   66,  151,  274,  122,  275,
      283,   69,  284,  592,  121,   69,  268,  268,  152,   69,
       71,   72,   73,   74,  122,  104,   75,  290,  280,  104,
      269,  276,  281,  123,  315,   76,  277,  278,  270,  310,
      280,  428,   77,   77,  281,  271,  271,  316,  311,  123,
      263,  271,  271,  153,  264,  289,  289,  289,  296,  306,

      307,  318,  297,  290,  321,  280,  319,  308,  322,  281,
       78,   79,   80,   79,   81,   82,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   83,   79,   79,
       79,   79,   79,   79,   84,   84,   79,   79,   79,   84,
       84,   84,   85,   86,   84,   84,   84,   87,   84,   84,
       84,   84,   84,   84,   84,   84,   88,   84,   84,   84,
       79,   79,   89,   90,   91,   90,   92,   93,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   94,
       90,   90,   90,   90,   90,   90,   95,   95,   90,   90,
       90,   95,   95,   95,   95,   96,   95,   95,   95,   97,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   90,   90,   98,  105,  106,  105,  107,  108,
      105,  109,  105,  105,  110,  105,  105,  105,  105,  105,
      105,  111,  105,  105,  105,  105,  105,  105,  112,  112,
      105,  113,  105,  112,  112,  112,  112,  114,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  115,  116,  117,  125,  300,   66,
      126,  125,   64,   66,  126,  300,   64,  300,  300,  300,
      324,  325,  127,  300,  301,  280,  127,   64,  302,  281,
      300,   64,  300,  300,  300,  327,  351,  331,  263,  347,

      328,  332,  345,  264,  348,  349,  353,  355,  358,  336,
      354,  352,  359,  428,  361,  263,  263,  128,  362,  264,
      264,  128,   64,   65,   64,   66,   67,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   68,   64,
       64,   64,   64,   64,   64,  129,  129,   64,   64,   64,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   64,   64,   69,  130,  130,  364,  365,  685,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

       64,   65,  131,   66,   67,   64,   64,   64,   64,   64,
      132,  133,   64,  134,   64,   64,   68,   64,   64,   64,
       64,   64,   64,  135,  135,   64,   64,   64,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,   64,
       64,   69,  136,  137,  138,  139,  140,  136,  141,  142,
      136,  143,  136,  136,  136,  136,  136,  136,  144,  136,
      136,  136,  136,  136,  145,  146,  146,  136,  147,  136,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  136,  136,  148,  155,  156,  157,  158,  310,   65,
      159,   66,   67,   65,  269,   66,   67,  311,   65,  160,
       66,   67,  382,   65,   68,   66,   67,  351,   68,  171,
      428,  172,  173,   68,  171,  370,  172,  173,   68,  371,
      174,  351,  352,  263,  175,  174,  300,  264,  428,  175,
      181,  263,  182,  183,  161,  264,  352,  374,  375,   69,
      263,  300,  378,   69,  264,  184,  379,  181,   69,  182,
      183,  185,  403,   69,  163,  185,  164,  165,  303,  176,
      404,  300,  184,  263,  176,  166,  304,  264,  185,  167,
      386,  188,  185,  189,  190,  168,  300,  387,  678,  168,

      186,  188,  191,  189,  190,  195,  192,  182,  196,  428,
      303,  195,  191,  182,  196,  300,  192,  186,  304,  428,
      197,  289,  289,  289,  169,  163,  197,  164,  165,  290,
      300,  395,  219,  351,   66,  220,  166,  221,  396,  318,
      167,  193,  306,  307,  319,  677,  168,  222,  352,  315,
      168,  193,  405,  405,  405,  198,  226,  223,   66,  227,
      290,  198,  316,  676,  228,  219,  294,   66,  220,  327,
      221,  229,  266,  510,  328,  169,  163,  267,  164,  165,
      222,  230,  224,  669,  289,  289,  289,  177,  668,  315,
      223,  178,  290,  268,  268,  428,  226,  179,   66,  227,

      455,  179,  316,  667,  228,  666,  231,  234,  456,   81,
      235,  229,  306,  307,  428,  224,  234,  462,   81,  235,
      308,  230,  236,  437,  438,  439,  169,  163,  269,  164,
      165,  236,  237,  665,  462,  501,  270,  428,  177,  269,
      440,  237,  178,  271,  271,  469,  231,  270,  179,  271,
      271,  482,  179,  470,  271,  271,  664,  238,  462,  483,
      271,  271,  471,  457,  457,  457,  238,  484,  485,  502,
      440,  290,  518,  518,  518,  484,  485,  169,  199,  200,
      199,  201,  202,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  203,  199,  199,  199,  199,  199,

      199,  204,  204,  199,  205,  199,  204,  204,  204,  206,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  199,  199,  207,
      208,  209,  208,  210,  211,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  212,  208,  208,  208,
      208,  208,  208,  213,  213,  208,  214,  208,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  208,
      208,  215,  216,  490,  500,  505,  490,  500,  507,  507,
      507,  490,  500,  506,  217,  217,  290,  510,  663,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      232,  232,  510,  541,  656,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  240,  655,  241,  242,
      389,  243,  501,  389,  244,  245,  246,  542,  389,  654,
      251,  247,   66,  252,  432,  253,  251,  248,   66,  252,
      544,  253,  536,  653,  398,  254,  544,  398,  545,  390,
      398,  254,  398,  398,  545,  255,  550,  391,  398,  272,
      584,  255,  272,  289,  289,  289,  249,  240,  585,  241,

      242,  290,  243,  399,  652,  244,  245,  246,  541,  584,
      256,  400,  247,  289,  289,  289,  256,  585,  248,  651,
      637,  290,  551,  551,  551,  553,  553,  553,  638,  471,
      290,  560,  561,  562,  650,  406,  518,  518,  518,  553,
      553,  553,  542,  458,  560,  561,  562,  249,  257,  258,
      257,   66,  259,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  260,  257,  257,  257,  257,  257,
      257,  261,  261,  257,  257,  257,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  257,  257,  262,

      333,  486,  487,  488,  333,  488,  488,  488,  334,  335,
      336,  490,  471,  337,  490,  338,  339,  586,  440,  490,
      340,  587,  440,  510,  341,  342,  409,  410,  637,  411,
      648,  412,  510,  413,  414,  587,  638,  510,  415,  488,
      488,  488,  416,  417,  647,  289,  289,  289,  440,  589,
      589,  589,  440,  290,  646,  645,  440,  290,  562,  561,
      562,  586,  636,  500,  635,  587,  500,  618,  618,  618,
      634,  500,  643,  643,  643,  290,  660,  660,  660,  587,
      290,  633,  632,  631,  290,  508,  440,  491,  491,  492,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  272,  272,  491,  491,  491,  491,
      272,  272,  491,  491,  491,  272,  272,  272,  272,  272,
      272,  272,  272,  493,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  491,  491,  491,  526,
      527,  537,  538,  539,  528,  428,  529,  530,  539,  539,
      539,  531,  539,  539,  539,  532,  533,  471,  440,  289,
      289,  289,  673,  673,  673,  440,  630,  290,  471,  440,
      290,  682,  682,  682,  689,  689,  689,  282,  323,  290,
      282,  323,  290,  692,  692,  692,  363,  367,  440,  363,
      367,  290,  471,  629,  369,  440,  552,  369,  628,  440,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  272,  272,  543,
      543,  543,  543,  272,  272,  543,  543,  543,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  543,
      543,  543,  579,  580,  581,  581,  581,  581,  581,  581,
      581,  627,  590,  590,  590,  373,  591,  626,  373,  440,
      290,  642,  440,  625,  642,  440,  614,  615,  616,  616,
      616,  616,  624,  616,  616,  616,  619,  619,  619,  623,
      591,  622,  621,  440,  290,  620,  440,  582,  613,  440,

      440,  612,  440,  611,  610,  440,  609,  608,  607,  592,
      639,  640,  641,  428,  641,  641,  641,  641,  641,  641,
      644,  644,  644,  440,  591,  606,  440,  440,  290,  605,
      440,  440,  604,  592,  440,  657,  658,  659,  659,  659,
      659,  659,  659,  659,  603,  661,  661,  661,  602,  591,
      601,  600,  440,  290,  599,  440,  598,  440,  440,  597,
      596,  440,  595,  594,  440,  593,  588,  592,  662,  662,
      662,  549,  591,  670,  671,  672,  672,  672,  672,  672,
      672,  672,  440,  547,  583,  440,  582,  432,  440,  432,
      440,  578,  592,  440,  577,  576,  440,  674,  674,  674,

      575,  591,  675,  675,  675,  290,  574,  679,  680,  681,
      681,  681,  681,  573,  572,  592,  681,  681,  681,  571,
      440,  570,  569,  440,  440,  568,  440,  440,  683,  683,
      683,  567,  591,  440,  566,  565,  290,  684,  684,  684,
      564,  686,  687,  688,  592,  688,  688,  688,  563,  592,
      688,  688,  688,  559,  440,  558,  557,  440,  440,  691,
      691,  691,  440,  440,  690,  690,  690,  440,  591,  686,
      687,  688,  290,  556,  555,  592,  688,  688,  688,  688,
      688,  688,  554,  510,  592,  505,  440,  450,  440,  694,
      694,  694,  440,  440,  549,  548,  440,  440,  547,  693,

      693,  693,  546,  591,  442,  540,  592,  290,  697,  697,
      697,  592,  695,  695,  695,  432,  440,  696,  696,  696,
      290,  591,  534,  440,  525,  290,  440,  698,  698,  698,
      699,  699,  699,  524,  591,  290,  592,  523,  290,  700,
      700,  700,  701,  701,  701,  522,  592,  703,  703,  703,
      290,  521,  702,  702,  702,  592,  591,  704,  704,  704,
      290,  706,  706,  706,  592,  290,  705,  705,  705,  520,
      591,  707,  707,  707,  290,  519,  517,  592,  471,  290,
      708,  708,  708,  516,  591,  515,  592,  514,  290,  709,
      709,  709,  513,  512,  592,  710,  710,  710,  511,  592,

      712,  712,  712,  290,  715,  715,  715,  510,  592,  509,
      711,  711,  711,  592,  591,  713,  713,  713,  290,  504,
      714,  714,  714,  290,  591,  503,  499,  592,  290,  716,
      716,  716,  718,  718,  718,  498,  592,  290,  717,  717,
      717,  497,  591,  721,  721,  721,  290,  592,  719,  719,
      719,  592,  496,  722,  722,  722,  290,  592,  720,  720,
      720,  290,  591,  724,  724,  724,  290,  592,  723,  723,
      723,  495,  591,  725,  725,  725,  290,  494,  489,  592,
      436,  290,  727,  727,  727,  592,  432,  726,  726,  726,
      592,  591,  728,  728,  728,  290,  730,  730,  730,  432,

      290,  731,  731,  731,  480,  592,  733,  733,  733,  290,
      592,  470,  729,  729,  729,  592,  591,  732,  732,  732,
      290,  591,  734,  734,  734,  290,  736,  736,  736,  592,
      290,  735,  735,  735,  592,  591,  737,  737,  737,  290,
      739,  739,  739,  592,  290,  479,  738,  738,  738,  478,
      591,  477,  476,  592,  290,  740,  740,  740,  475,  592,
      742,  742,  742,  290,  592,  474,  741,  741,  741,  473,
      591,  472,  471,  592,  290,  743,  743,  743,  592,  468,
      744,  744,  744,  290,  591,  467,  466,  592,  290,  745,
      745,  745,  465,  592,  746,  746,  746,  747,  747,  747,

      464,  591,  290,  463,  461,  290,  460,  592,  748,  748,
      748,  408,  459,  592,  749,  749,  749,  750,  750,  750,
      454,  591,  290,  454,  399,  290,  453,  592,  751,  751,
      751,  752,  752,  752,  452,  451,  592,  450,  449,  290,
      448,  753,  753,  753,  592,  591,  754,  754,  754,  290,
      755,  755,  755,  447,  446,  592,  445,  444,  290,  756,
      756,  756,  443,  591,  592,  442,  441,  290,  757,  757,
      757,  758,  758,  758,  384,  592,  759,  759,  759,  290,
      591,  760,  760,  760,  290,  763,  763,  763,  592,  761,
      761,  761,  436,  592,  762,  762,  762,  290,  591,  764,

      764,  764,  290,  766,  766,  766,  592,  290,  765,  765,
      765,  434,  591,  432,  374,  592,  290,  767,  767,  767,
      769,  769,  769,  592,  430,  290,  364,  429,  592,  768,
      768,  768,  592,  591,  770,  770,  770,  290,  772,  772,
      772,  592,  290,  771,  771,  771,  427,  591,  426,  425,
      592,  290,  773,  773,  773,  592,  424,  774,  774,  774,
      290,  591,  775,  775,  775,  290,  423,  592,  422,  776,
      776,  776,  778,  778,  778,  421,  592,  290,  777,  777,
      777,  420,  591,  419,  418,  592,  290,  779,  779,  779,
      592,  330,  780,  780,  780,  290,  591,  781,  781,  781,

      290,  784,  784,  784,  592,  782,  782,  782,  324,  592,
      783,  783,  783,  290,  591,  785,  785,  785,  290,  592,
      786,  786,  786,  290,  591,  592,  408,  320,  290,  787,
      787,  787,  788,  788,  788,  790,  790,  790,  407,  592,
      290,  789,  789,  789,  592,  591,  314,  313,  592,  290,
      791,  791,  791,  793,  793,  793,  312,  592,  290,  313,
      792,  792,  792,  292,  591,  401,  397,  592,  290,  794,
      794,  794,  796,  796,  796,  394,  592,  290,  393,  795,
      795,  795,  592,  591,  797,  797,  797,  290,  592,  798,
      798,  798,  290,  591,  799,  799,  799,  290,  392,  388,

      592,  800,  800,  800,  801,  801,  801,  592,  591,  290,
      385,  384,  290,  802,  802,  802,  803,  803,  803,  592,
      377,  804,  804,  804,  290,  591,  592,  368,  366,  290,
      805,  805,  805,  808,  808,  808,  592,  806,  806,  806,
      357,  592,  807,  807,  807,  290,  591,  809,  809,  809,
      290,  592,  811,  811,  811,  290,  346,  810,  810,  810,
      592,  591,  812,  812,  812,  290,  344,  330,  592,  320,
      290,  813,  813,  813,  314,  591,  313,  592,  312,  290,
      592,  814,  814,  814,  815,  815,  815,  288,  285,  592,
      279,  273,  290,  816,  816,  816,  988,  591,  988,  592,

      988,  290,  988,  988,  592,  817,  817,  817,  818,  818,
      818,  819,  819,  819,  988,  591,  290,  988,  592,  290,
      820,  820,  820,  821,  821,  821,  988,  988,  592,  988,
      988,  290,  988,  822,  822,  822,  988,  591,  988,  988,
      592,  290,  823,  823,  823,  824,  824,  824,  826,  826,
      826,  988,  592,  290,  988,  825,  825,  825,  592,  591,
      827,  827,  827,  290,  829,  829,  829,  592,  290,  828,
      828,  828,  988,  591,  830,  830,  830,  290,  988,  988,
      592,  988,  290,  831,  831,  831,  988,  591,  988,  592,
      988,  290,  832,  832,  832,  592,  833,  833,  833,  834,

      834,  834,  592,  591,  290,  988,  988,  290,  835,  835,
      835,  592,  836,  836,  836,  988,  592,  837,  837,  837,
      290,  591,  838,  838,  838,  290,  839,  839,  839,  988,
      592,  841,  841,  841,  290,  988,  840,  840,  840,  592,
      591,  842,  842,  842,  290,  988,  592,  988,  988,  290,
      843,  843,  843,  988,  591,  592,  988,  988,  290,  844,
      844,  844,  988,  988,  592,  845,  845,  845,  988,  592,
      847,  847,  847,  290,  850,  850,  850,  988,  592,  988,
      846,  846,  846,  592,  591,  848,  848,  848,  290,  988,
      849,  849,  849,  290,  591,  988,  988,  592,  290,  851,

      851,  851,  853,  853,  853,  988,  592,  290,  852,  852,
      852,  988,  591,  856,  856,  856,  290,  592,  854,  854,
      854,  592,  988,  857,  857,  857,  290,  592,  855,  855,
      855,  290,  591,  859,  859,  859,  290,  592,  858,  858,
      858,  988,  591,  860,  860,  860,  290,  988,  988,  592,
      988,  290,  862,  862,  862,  592,  988,  861,  861,  861,
      592,  591,  863,  863,  863,  290,  865,  865,  865,  988,
      290,  866,  866,  866,  988,  592,  868,  868,  868,  290,
      592,  988,  864,  864,  864,  592,  591,  867,  867,  867,
      290,  591,  869,  869,  869,  290,  871,  871,  871,  592,

      290,  870,  870,  870,  592,  591,  872,  872,  872,  290,
      874,  874,  874,  592,  290,  988,  873,  873,  873,  988,
      591,  988,  988,  592,  290,  875,  875,  875,  988,  592,
      877,  877,  877,  290,  592,  988,  876,  876,  876,  988,
      591,  988,  988,  592,  290,  878,  878,  878,  592,  988,
      879,  879,  879,  290,  591,  988,  988,  592,  290,  880,
      880,  880,  988,  592,  881,  881,  881,  882,  882,  882,
      988,  591,  290,  988,  988,  290,  988,  592,  883,  883,
      883,  988,  988,  592,  884,  884,  884,  885,  885,  885,
      988,  591,  290,  988,  988,  290,  988,  592,  886,  886,

      886,  887,  887,  887,  988,  988,  592,  988,  988,  290,
      988,  888,  888,  888,  592,  591,  889,  889,  889,  290,
      890,  890,  890,  988,  988,  592,  988,  988,  290,  891,
      891,  891,  988,  591,  592,  988,  988,  290,  892,  892,
      892,  893,  893,  893,  988,  592,  894,  894,  894,  290,
      591,  895,  895,  895,  290,  897,  897,  897,  592,  988,
      896,  896,  896,  592,  591,  898,  898,  898,  290,  591,
      899,  899,  899,  290,  988,  988,  592,  988,  900,  900,
      900,  988,  591,  988,  988,  592,  290,  901,  901,  901,
      903,  903,  903,  592,  988,  902,  902,  902,  592,  591,

      988,  988,  592,  290,  905,  905,  905,  592,  907,  907,
      907,  988,  592,  988,  904,  904,  904,  592,  591,  906,
      906,  906,  290,  591,  988,  592,  988,  290,  908,  908,
      908,  909,  909,  909,  592,  988,  988,  592,  910,  910,
      910,  988,  592,  911,  911,  911,  912,  912,  912,  988,
      988,  592,  913,  913,  913,  592,  914,  914,  914,  988,
      988,  592,  915,  915,  915,  988,  592,  916,  916,  916,
      917,  917,  917,  988,  988,  592,  988,  988,  592,  918,
      918,  918,  919,  919,  919,  592,  920,  920,  920,  988,
      592,  988,  988,  592,  921,  921,  921,  988,  988,  592,

      922,  922,  922,  592,  923,  923,  923,  988,  988,  592,
      924,  924,  924,  988,  592,  988,  988,  592,  925,  925,
      925,  926,  926,  926,  988,  988,  592,  988,  988,  592,
      927,  927,  927,  592,  928,  928,  928,  929,  929,  929,
      988,  592,  930,  930,  930,  988,  988,  592,  931,  931,
      931,  592,  932,  932,  932,  988,  988,  592,  933,  933,
      933,  934,  934,  934,  988,  592,  988,  988,  592,  935,
      935,  935,  936,  936,  936,  988,  988,  592,  937,  937,
      937,  592,  988,  988,  592,  938,  938,  938,  988,  592,
      939,  939,  939,  988,  988,  592,  940,  940,  940,  592,

      941,  941,  941,  988,  988,  592,  988,  988,  592,  942,
      942,  942,  943,  943,  943,  988,  592,  988,  988,  592,
      944,  944,  944,  988,  988,  592,  945,  945,  945,  946,
      946,  946,  592,  947,  947,  947,  988,  592,  948,  948,
      948,  988,  988,  592,  949,  949,  949,  592,  950,  950,
      950,  951,  951,  951,  988,  988,  592,  988,  988,  592,
      952,  952,  952,  953,  953,  953,  988,  592,  954,  954,
      954,  988,  988,  592,  988,  988,  592,  955,  955,  955,
      592,  956,  956,  956,  988,  592,  957,  957,  957,  988,
      988,  592,  958,  958,  958,  592,  988,  988,  592,  959,

      959,  959,  960,  960,  960,  988,  988,  592,  988,  988,
      592,  961,  961,  961,  988,  592,  962,  962,  962,  963,
      963,  963,  988,  988,  592,  964,  964,  964,  592,  965,
      965,  965,  988,  592,  966,  966,  966,  988,  988,  592,
      967,  967,  967,  968,  968,  968,  592,  988,  988,  592,
      969,  969,  969,  970,  970,  970,  988,  988,  592,  971,
      971,  971,  988,  592,  988,  988,  592,  972,  972,  972,
      988,  988,  592,  973,  973,  973,  592,  974,  974,  974,
      988,  592,  975,  975,  975,  988,  988,  592,  988,  988,
      592,  976,  976,  976,  977,  977,  977,  592,  988,  988,

      592,  978,  978,  978,  988,  988,  592,  979,  979,  979,
      980,  980,  980,  988,  592,  981,  981,  981,  988,  988,
      592,  982,  982,  982,  592,  983,  983,  983,  988,  592,
      984,  984,  984,  985,  985,  985,  988,  988,  592,  988,
      988,  592,  986,  986,  986,  987,  987,  987,  592,  911,
      911,  911,  988,  988,  592,  988,  988,  592,  988,  988,
      988,  988,  592,  988,  988,  988,  988,  988,  592,  988,
      988,  988,  592,  988,  988,  988,  988,  592,  988,  988,
      592,  988,  988,  988,  988,  988,  988,  988,  988,  592,
      988,  988,  592,  988,  988,  988,  592,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  286,  286,  286,  988,  286,  286,  286,
      286,  286,  286,  286,  988,  286,  286,  286,  286,  286,
      287,  287,  287,  988,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  291,  291,  291,
      988,  988,  291,  988,  988,  988,  988,  291,  988,  988,
      291,  295,  295,  295,  988,  988,  988,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  298,  298,  298,
      988,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,  988,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  305,  988,  988,  988,  988,  305,  988,  988,  988,
      988,  305,  988,  988,  305,  309,  309,  988,  988,  988,
      309,  988,  988,  988,  988,  309,  988,  988,  309,  317,
      988,  988,  988,  988,  988,  988,  988,  317,  988,  317,
      988,  988,  317,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      329,  988,  329,  988,  329,  329,  329,  329,  988,  329,
      329,  988,  329,  329,  988,  329,  343,  343,  343,  343,
      343,  343,  343,  343,  988,  343,  343,  343,  343,  343,
      343,  343,  343,  350,  350,  350,  988,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  988,  350,  351,
      351,  351,  988,  351,  351,  351,  351,  351,  351,  351,
      988,  351,  351,  988,  351,  352,  988,  352,  988,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  988,
      352,  356,  988,  356,  988,  356,  356,  356,  356,  988,
      356,  356,  356,  356,  356,  356,  356,  356,  360,  988,
      360,  988,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  372,  372,  372,  988,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  376,  376,  376,  988,  376,  376,  988,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  380,
      380,  380,  988,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  381,  381,  988,  381,
      988,  988,  381,  383,  383,  383,  988,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      402,  402,  402,  988,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  431,  431,  431,
      988,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  433,  433,  433,  988,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      435,  435,  435,  988,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  481,  481,  481,
      988,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  535,  535,  535,  988,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  617,
      988,  988,  617,  988,  988,  988,  988,  988,  988,  988,
      617,  988,  617,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  988,  649,  649,  988,  649,
       63,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988
    } ;

static yyconst flex_int16_t yy_chk[4134] =
    {   0,
        0,    1,  129,    1,    1,    2,    0,    2,    2,    3,
      129,    3,    3,  113,  113,    9,    1,    9,    9,   10,
        2,   10,   10,   13,    3,   13,   13,   68,   13,   76,
        9,   68,   83,   76,   10,   72,   83,    0,   13,   14,
       72,   14,   14,   25,   14,   25,   25,   86,   13,   86,
       96,    1,   96,  911,   14,    2,   72,   72,   25,    3,
        4,    4,    4,    4,   14,    9,    4,  893,   94,   10,
       77,   87,   94,   13,  135,    4,   87,   87,   77,  131,
      103,  685,    4,    4,  103,   77,   77,  135,  131,   14,
      111,   77,   77,   25,  111,  112,  112,  112,  121,  130,

      130,  138,  121,  112,  144,  152,  138,  130,  144,  152,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   15,  124,   15,
       15,   16,   15,   16,   16,  125,   16,  126,  127,  128,
      147,  147,   15,  124,  127,  160,   16,   15,  127,  160,
      125,   16,  126,  127,  128,  156,  180,  167,  175,  178,

      156,  167,  175,  178,  179,  179,  184,  185,  192,  185,
      184,  180,  192,  678,  197,  203,  212,   15,  197,  203,
      212,   16,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   19,   19,  205,  205,  677,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   26,   26,   26,   26,  310,   27,
       26,   27,   27,   28,  269,   28,   28,  310,   29,   26,
       29,   29,  269,   30,   27,   30,   30,  183,   28,   33,
      676,   33,   33,   29,   34,  222,   34,   34,   30,  222,
       33,  186,  183,  229,   33,   34,  299,  229,  669,   34,
       37,  236,   37,   37,   26,  236,  186,  237,  237,   27,
      247,  299,  254,   28,  247,   37,  254,   38,   29,   38,
       38,   37,  288,   30,   31,   37,   31,   31,  303,   33,
      288,  301,   38,  260,   34,   31,  303,  260,   38,   31,
      274,   39,   38,   39,   39,   31,  301,  274,  668,   31,

       37,   40,   39,   40,   40,   41,   39,   41,   41,  667,
      305,   42,   40,   42,   42,  302,   40,   38,  305,  666,
       41,  114,  114,  114,   31,   32,   42,   32,   32,  114,
      302,  283,   49,  350,   49,   49,   32,   49,  283,  318,
       32,   39,  306,  306,  318,  665,   32,   49,  350,  315,
       32,   40,  289,  289,  289,   41,   51,   49,   51,   51,
      289,   42,  315,  664,   51,   50,  114,   50,   50,  327,
       50,   51,  266,  663,  327,   32,   35,  266,   35,   35,
       50,   51,   49,  656,  291,  291,  291,   35,  655,  317,
       50,   35,  291,  266,  266,  349,   52,   35,   52,   52,

      404,   35,  317,  654,   52,  653,   51,   55,  404,   55,
       55,   52,  309,  309,  349,   50,   56,  411,   56,   56,
      309,   52,   55,  384,  384,  384,   35,   36,  268,   36,
       36,   56,   55,  652,  411,  451,  268,  349,   36,  271,
      384,   56,   36,  268,  268,  418,   52,  271,   36,  268,
      268,  434,   36,  418,  271,  271,  651,   55,  411,  434,
      271,  271,  650,  405,  405,  405,   56,  436,  436,  451,
      384,  405,  471,  471,  471,  484,  484,   36,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   47,  442,  450,  456,  442,  450,  457,  457,
      457,  442,  450,  456,   47,   47,  457,  648,  647,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       53,   53,  646,  492,  636,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   57,  635,   57,   57,
      276,   57,  501,  276,   57,   57,   57,  492,  276,  634,
       59,   57,   59,   59,  483,   59,   60,   57,   60,   60,
      495,   60,  483,  633,  285,   59,  544,  285,  495,  276,
      504,   60,  285,  504,  544,   59,  501,  276,  504, 1007,
      546,   60, 1007,  294,  294,  294,   57,   58,  546,   58,

       58,  294,   58,  285,  632,   58,   58,   58,  541,  584,
       59,  285,   58,  406,  406,  406,   60,  584,   58,  631,
      613,  406,  507,  507,  507,  510,  510,  510,  613,  630,
      507,  517,  517,  517,  629,  294,  518,  518,  518,  553,
      553,  553,  541,  406,  560,  560,  560,   58,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

      168,  437,  437,  437,  168,  438,  438,  438,  168,  168,
      168,  583,  628,  168,  583,  168,  168,  547,  437,  583,
      168,  547,  438,  626,  168,  168,  333,  333,  637,  333,
      625,  333,  624,  333,  333,  547,  637,  623,  333,  439,
      439,  439,  333,  333,  622,  458,  458,  458,  437,  551,
      551,  551,  438,  458,  621,  620,  439,  551,  562,  562,
      562,  586,  612,  588,  611,  586,  588,  589,  589,  589,
      610,  588,  618,  618,  618,  589,  643,  643,  643,  586,
      618,  609,  608,  607,  643,  458,  439,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  479,
      479,  486,  486,  486,  479,  606,  479,  479,  487,  487,
      487,  479,  488,  488,  488,  479,  479,  605,  486,  508,
      508,  508,  660,  660,  660,  487,  604,  508,  603,  488,
      660,  673,  673,  673,  682,  682,  682, 1008, 1018,  673,
     1008, 1018,  682,  689,  689,  689, 1027, 1028,  486, 1027,
     1028,  689,  602,  601, 1029,  487,  508, 1029,  600,  488,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  537,  537,  537,  538,  538,  538,  539,  539,
      539,  599,  552,  552,  552, 1031,  552,  598, 1031,  537,
      552, 1043,  538,  597, 1043,  539,  579,  579,  579,  580,
      580,  580,  596,  581,  581,  581,  590,  590,  590,  595,
      590,  594,  593,  579,  590,  591,  580,  582,  578,  537,

      581,  577,  538,  576,  575,  539,  574,  573,  572,  552,
      614,  614,  614,  571,  615,  615,  615,  616,  616,  616,
      619,  619,  619,  579,  619,  570,  580,  614,  619,  569,
      581,  615,  568,  590,  616,  639,  639,  639,  640,  640,
      640,  641,  641,  641,  567,  644,  644,  644,  566,  644,
      565,  564,  639,  644,  563,  640,  559,  614,  641,  558,
      557,  615,  556,  555,  616,  554,  550,  619,  645,  645,
      645,  549,  645,  657,  657,  657,  658,  658,  658,  659,
      659,  659,  639,  548,  542,  640,  540,  536,  641,  535,
      657,  534,  644,  658,  533,  532,  659,  661,  661,  661,

      531,  661,  662,  662,  662,  661,  530,  670,  670,  670,
      671,  671,  671,  529,  528,  645,  672,  672,  672,  527,
      657,  526,  525,  658,  670,  524,  659,  671,  674,  674,
      674,  523,  674,  672,  522,  521,  674,  675,  675,  675,
      520,  679,  679,  679,  661,  680,  680,  680,  519,  662,
      681,  681,  681,  516,  670,  515,  514,  671,  679,  684,
      684,  684,  680,  672,  683,  683,  683,  681,  683,  686,
      686,  686,  683,  513,  512,  674,  687,  687,  687,  688,
      688,  688,  511,  509,  675,  506,  686,  502,  679,  691,
      691,  691,  680,  687,  499,  498,  688,  681,  497,  690,

      690,  690,  496,  690,  493,  489,  684,  690,  694,  694,
      694,  683,  692,  692,  692,  481,  686,  693,  693,  693,
      692,  693,  480,  687,  478,  693,  688,  695,  695,  695,
      696,  696,  696,  477,  696,  695,  691,  476,  696,  697,
      697,  697,  698,  698,  698,  475,  690,  700,  700,  700,
      698,  474,  699,  699,  699,  694,  699,  701,  701,  701,
      699,  703,  703,  703,  693,  701,  702,  702,  702,  473,
      702,  704,  704,  704,  702,  472,  470,  696,  469,  704,
      705,  705,  705,  468,  705,  467,  697,  466,  705,  706,
      706,  706,  465,  464,  700,  707,  707,  707,  463,  699,

      709,  709,  709,  707,  712,  712,  712,  461,  703,  460,
      708,  708,  708,  702,  708,  710,  710,  710,  708,  453,
      711,  711,  711,  710,  711,  452,  449,  705,  711,  713,
      713,  713,  715,  715,  715,  448,  706,  713,  714,  714,
      714,  447,  714,  718,  718,  718,  714,  709,  716,  716,
      716,  712,  446,  719,  719,  719,  716,  708,  717,  717,
      717,  719,  717,  721,  721,  721,  717,  711,  720,  720,
      720,  445,  720,  722,  722,  722,  720,  444,  441,  715,
      435,  722,  724,  724,  724,  714,  433,  723,  723,  723,
      718,  723,  725,  725,  725,  723,  727,  727,  727,  431,

      725,  728,  728,  728,  430,  717,  730,  730,  730,  728,
      721,  429,  726,  726,  726,  720,  726,  729,  729,  729,
      726,  729,  731,  731,  731,  729,  733,  733,  733,  724,
      731,  732,  732,  732,  723,  732,  734,  734,  734,  732,
      736,  736,  736,  727,  734,  427,  735,  735,  735,  426,
      735,  425,  424,  730,  735,  737,  737,  737,  423,  726,
      739,  739,  739,  737,  729,  422,  738,  738,  738,  421,
      738,  420,  419,  733,  738,  740,  740,  740,  732,  417,
      741,  741,  741,  740,  741,  416,  415,  736,  741,  742,
      742,  742,  414,  735,  743,  743,  743,  744,  744,  744,

      413,  744,  743,  412,  410,  744,  409,  739,  745,  745,
      745,  408,  407,  738,  746,  746,  746,  747,  747,  747,
      403,  747,  746,  402,  400,  747,  399,  741,  748,  748,
      748,  749,  749,  749,  397,  396,  742,  395,  394,  749,
      393,  750,  750,  750,  744,  750,  751,  751,  751,  750,
      752,  752,  752,  392,  391,  745,  390,  388,  752,  753,
      753,  753,  387,  753,  747,  386,  385,  753,  754,  754,
      754,  755,  755,  755,  383,  748,  756,  756,  756,  755,
      756,  757,  757,  757,  756,  760,  760,  760,  750,  758,
      758,  758,  382,  751,  759,  759,  759,  758,  759,  761,

      761,  761,  759,  763,  763,  763,  753,  761,  762,  762,
      762,  377,  762,  376,  375,  754,  762,  764,  764,  764,
      766,  766,  766,  756,  366,  764,  365,  355,  757,  765,
      765,  765,  760,  765,  767,  767,  767,  765,  769,  769,
      769,  759,  767,  768,  768,  768,  348,  768,  342,  341,
      763,  768,  770,  770,  770,  762,  340,  771,  771,  771,
      770,  771,  772,  772,  772,  771,  339,  766,  338,  773,
      773,  773,  775,  775,  775,  337,  765,  773,  774,  774,
      774,  336,  774,  335,  334,  769,  774,  776,  776,  776,
      768,  331,  777,  777,  777,  776,  777,  778,  778,  778,

      777,  781,  781,  781,  771,  779,  779,  779,  325,  772,
      780,  780,  780,  779,  780,  782,  782,  782,  780,  775,
      783,  783,  783,  782,  783,  774,  320,  319,  783,  784,
      784,  784,  785,  785,  785,  787,  787,  787,  316,  777,
      785,  786,  786,  786,  778,  786,  314,  313,  781,  786,
      788,  788,  788,  790,  790,  790,  312,  780,  788,  311,
      789,  789,  789,  293,  789,  287,  284,  783,  789,  791,
      791,  791,  793,  793,  793,  279,  784,  791,  278,  792,
      792,  792,  787,  792,  794,  794,  794,  792,  786,  795,
      795,  795,  794,  795,  796,  796,  796,  795,  277,  275,

      790,  797,  797,  797,  798,  798,  798,  789,  798,  797,
      273,  270,  798,  799,  799,  799,  800,  800,  800,  793,
      244,  801,  801,  801,  800,  801,  792,  214,  206,  801,
      802,  802,  802,  805,  805,  805,  795,  803,  803,  803,
      191,  796,  804,  804,  804,  803,  804,  806,  806,  806,
      804,  798,  808,  808,  808,  806,  177,  807,  807,  807,
      799,  807,  809,  809,  809,  807,  174,  166,  801,  142,
      809,  810,  810,  810,  134,  810,  133,  802,  132,  810,
      805,  811,  811,  811,  812,  812,  812,  110,   97,  804,
       88,   85,  812,  813,  813,  813,   63,  813,    0,  808,

        0,  813,    0,    0,  807,  814,  814,  814,  815,  815,
      815,  816,  816,  816,    0,  816,  815,    0,  810,  816,
      817,  817,  817,  818,  818,  818,    0,    0,  811,    0,
        0,  818,    0,  819,  819,  819,    0,  819,    0,    0,
      813,  819,  820,  820,  820,  821,  821,  821,  823,  823,
      823,    0,  814,  821,    0,  822,  822,  822,  816,  822,
      824,  824,  824,  822,  826,  826,  826,  817,  824,  825,
      825,  825,    0,  825,  827,  827,  827,  825,    0,    0,
      819,    0,  827,  828,  828,  828,    0,  828,    0,  820,
        0,  828,  829,  829,  829,  823,  830,  830,  830,  831,

      831,  831,  822,  831,  830,    0,    0,  831,  832,  832,
      832,  826,  833,  833,  833,    0,  825,  834,  834,  834,
      833,  834,  835,  835,  835,  834,  836,  836,  836,    0,
      828,  838,  838,  838,  836,    0,  837,  837,  837,  829,
      837,  839,  839,  839,  837,    0,  831,    0,    0,  839,
      840,  840,  840,    0,  840,  832,    0,    0,  840,  841,
      841,  841,    0,    0,  834,  842,  842,  842,    0,  835,
      844,  844,  844,  842,  847,  847,  847,    0,  838,    0,
      843,  843,  843,  837,  843,  845,  845,  845,  843,    0,
      846,  846,  846,  845,  846,    0,    0,  840,  846,  848,

      848,  848,  850,  850,  850,    0,  841,  848,  849,  849,
      849,    0,  849,  853,  853,  853,  849,  844,  851,  851,
      851,  847,    0,  854,  854,  854,  851,  843,  852,  852,
      852,  854,  852,  856,  856,  856,  852,  846,  855,  855,
      855,    0,  855,  857,  857,  857,  855,    0,    0,  850,
        0,  857,  859,  859,  859,  849,    0,  858,  858,  858,
      853,  858,  860,  860,  860,  858,  862,  862,  862,    0,
      860,  863,  863,  863,    0,  852,  865,  865,  865,  863,
      856,    0,  861,  861,  861,  855,  861,  864,  864,  864,
      861,  864,  866,  866,  866,  864,  868,  868,  868,  859,

      866,  867,  867,  867,  858,  867,  869,  869,  869,  867,
      871,  871,  871,  862,  869,    0,  870,  870,  870,    0,
      870,    0,    0,  865,  870,  872,  872,  872,    0,  861,
      874,  874,  874,  872,  864,    0,  873,  873,  873,    0,
      873,    0,    0,  868,  873,  875,  875,  875,  867,    0,
      876,  876,  876,  875,  876,    0,    0,  871,  876,  877,
      877,  877,    0,  870,  878,  878,  878,  879,  879,  879,
        0,  879,  878,    0,    0,  879,    0,  874,  880,  880,
      880,    0,    0,  873,  881,  881,  881,  882,  882,  882,
        0,  882,  881,    0,    0,  882,    0,  876,  883,  883,

      883,  884,  884,  884,    0,    0,  877,    0,    0,  884,
        0,  885,  885,  885,  879,  885,  886,  886,  886,  885,
      887,  887,  887,    0,    0,  880,    0,    0,  887,  888,
      888,  888,    0,  888,  882,    0,    0,  888,  889,  889,
      889,  890,  890,  890,    0,  883,  891,  891,  891,  890,
      891,  892,  892,  892,  891,  895,  895,  895,  885,    0,
      894,  894,  894,  886,  894,  896,  896,  896,  894,  896,
      897,  897,  897,  896,    0,    0,  888,    0,  898,  898,
      898,    0,  898,    0,    0,  889,  898,  899,  899,  899,
      901,  901,  901,  891,    0,  900,  900,  900,  892,  900,

        0,    0,  895,  900,  903,  903,  903,  894,  905,  905,
      905,    0,  896,    0,  902,  902,  902,  897,  902,  904,
      904,  904,  902,  904,    0,  898,    0,  904,  906,  906,
      906,  907,  907,  907,  899,    0,    0,  901,  908,  908,
      908,    0,  900,  909,  909,  909,  910,  910,  910,    0,
        0,  903,  912,  912,  912,  905,  913,  913,  913,    0,
        0,  902,  914,  914,  914,    0,  904,  915,  915,  915,
      916,  916,  916,    0,    0,  906,    0,    0,  907,  917,
      917,  917,  918,  918,  918,  908,  919,  919,  919,    0,
      909,    0,    0,  910,  920,  920,  920,    0,    0,  912,

      921,  921,  921,  913,  922,  922,  922,    0,    0,  914,
      923,  923,  923,    0,  915,    0,    0,  916,  924,  924,
      924,  925,  925,  925,    0,    0,  917,    0,    0,  918,
      926,  926,  926,  919,  927,  927,  927,  928,  928,  928,
        0,  920,  929,  929,  929,    0,    0,  921,  930,  930,
      930,  922,  931,  931,  931,    0,    0,  923,  932,  932,
      932,  933,  933,  933,    0,  924,    0,    0,  925,  934,
      934,  934,  935,  935,  935,    0,    0,  926,  936,  936,
      936,  927,    0,    0,  928,  937,  937,  937,    0,  929,
      938,  938,  938,    0,    0,  930,  939,  939,  939,  931,

      940,  940,  940,    0,    0,  932,    0,    0,  933,  941,
      941,  941,  942,  942,  942,    0,  934,    0,    0,  935,
      943,  943,  943,    0,    0,  936,  944,  944,  944,  945,
      945,  945,  937,  946,  946,  946,    0,  938,  947,  947,
      947,    0,    0,  939,  948,  948,  948,  940,  949,  949,
      949,  950,  950,  950,    0,    0,  941,    0,    0,  942,
      951,  951,  951,  952,  952,  952,    0,  943,  953,  953,
      953,    0,    0,  944,    0,    0,  945,  954,  954,  954,
      946,  955,  955,  955,    0,  947,  956,  956,  956,    0,
        0,  948,  957,  957,  957,  949,    0,    0,  950,  958,

      958,  958,  959,  959,  959,    0,    0,  951,    0,    0,
      952,  960,  960,  960,    0,  953,  961,  961,  961,  962,
      962,  962,    0,    0,  954,  963,  963,  963,  955,  964,
      964,  964,    0,  956,  965,  965,  965,    0,    0,  957,
      966,  966,  966,  967,  967,  967,  958,    0,    0,  959,
      968,  968,  968,  969,  969,  969,    0,    0,  960,  970,
      970,  970,    0,  961,    0,    0,  962,  971,  971,  971,
        0,    0,  963,  972,  972,  972,  964,  973,  973,  973,
        0,  965,  974,  974,  974,    0,    0,  966,    0,    0,
      967,  975,  975,  975,  976,  976,  976,  968,    0,    0,

      969,  977,  977,  977,    0,    0,  970,  978,  978,  978,
      979,  979,  979,    0,  971,  980,  980,  980,    0,    0,
      972,  981,  981,  981,  973,  982,  982,  982,    0,  974,
      983,  983,  983,  984,  984,  984,    0,    0,  975,    0,
        0,  976,  985,  985,  985,  986,  986,  986,  977,  987,
      987,  987,    0,    0,  978,    0,    0,  979,    0,    0,
        0,    0,  980,    0,    0,    0,    0,    0,  981,    0,
        0,    0,  982,    0,    0,    0,    0,  983,    0,    0,
      984,    0,    0,    0,    0,    0,    0,    0,    0,  985,
        0,    0,  986,    0,    0,    0,  987,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  995,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1009, 1009, 1009,    0, 1009, 1009, 1009,
     1009, 1009, 1009, 1009,    0, 1009, 1009, 1009, 1009, 1009,
     1010, 1010, 1010,    0, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011,
        0,    0, 1011,    0,    0,    0,    0, 1011,    0,    0,
     1011, 1012, 1012, 1012,    0,    0,    0, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013, 1013,
        0, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1014, 1014, 1014,    0, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1015,    0,    0,    0,    0, 1015,    0,    0,    0,
        0, 1015,    0,    0, 1015, 1016, 1016,    0,    0,    0,
     1016,    0,    0,    0,    0, 1016,    0,    0, 1016, 1017,
        0,    0,    0,    0,    0,    0,    0, 1017,    0, 1017,
        0,    0, 1017, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1020,    0, 1020,    0, 1020, 1020, 1020, 1020,    0, 1020,
     1020,    0, 1020, 1020,    0, 1020, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021,    0, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1022, 1022, 1022,    0, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022,    0, 1022, 1023,
     1023, 1023,    0, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
        0, 1023, 1023,    0, 1023, 1024,    0, 1024,    0, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,    0,
     1024, 1025,    0, 1025,    0, 1025, 1025, 1025, 1025,    0,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1026,    0,
     1026,    0, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1030, 1030, 1030,    0, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1032, 1032, 1032,    0, 1032, 1032,    0, 1032,

     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1033,
     1033, 1033,    0, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1034, 1034,    0, 1034,
        0,    0, 1034, 1035, 1035, 1035,    0, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1036, 1036, 1036,    0, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,
        0, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1038, 1038, 1038,    0, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,

     1039, 1039, 1039,    0, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040,
        0, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1041, 1041, 1041,    0, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042,
        0,    0, 1042,    0,    0,    0,    0,    0,    0,    0,
     1042,    0, 1042, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044,    0, 1044, 1044,    0, 1044,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2006 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"

#if defined(_MSC_VER) || defined(__BORLANDC__)
#define popen _popen
#define pclose _pclose
#endif

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  int lineNr;
  FILE *filePtr;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_fileDefineDict;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;



static void setFileName(const char *name)
{
  bool ambig;
  g_yyFileName=name;
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    err("%s:%d: Error: More #endif's than #if's found.\n",
	g_yyFileName.data(),g_yyLineNr);
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    err("%s:%d: Error: Found an #else without a preceding #if.\n",
	g_yyFileName.data(),g_yyLineNr);
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static Define *isDefined(const char *name)
{
  if (name)
  {
    Define *def;
    //if ((def=fileDefineCache->findDefine(g_yyFileName,name)) && !def->undef) 
    //	return def;
    if ((def=g_fileDefineDict->find(name)) && !def->undef) return def; 
  }
  return 0;
}

static FILE *checkAndOpenFile(const QCString &absName)
{
  FILE *f = 0;
  //printf("checkAndOpenFile(%s)\n",absName.data());
  QFileInfo fi(absName);
  if (fi.exists() && fi.isFile())
  {
    // check include stack for absFileName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    FileState *fs;
    bool alreadyIncluded=FALSE;
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded) return 0; 

    
    QCString filterName = getFileFilter(absName);
    if (!filterName.isEmpty())
    {
      QCString cmd = filterName+" \""+absName+"\"";
      f=popen(cmd,"r");
      if (!f) err("Error: could not execute filter %s\n",cmd.data());
    }
    else
    {
      f=fopen(absName,"r");
      if (!f) err("Error: could not open file %s for reading\n",absName.data());
    }
  }
  return f;
}

static FILE *findFile(const char *fileName,bool localInclude)
{
  if (localInclude && g_yyFileDef)
  {
    QCString absName = g_yyFileDef->getPath()+"/"+fileName;
    FILE *f = checkAndOpenFile(absName);
    if (f)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return f;
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    FILE *f = checkAndOpenFile(absName);
    if (f)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return f;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) return s; else return &s[i-1];
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && cc==' ') 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))
	    ) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
    }
    else if (c=='/') // skip C Comment
    {
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(++p);
        if (c=='*')  // Start of C comment
        { 
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(++p);
	  }
	  p++;
        }
      }
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName %s found\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=isDefined(macroName);
	if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (!def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' && lc!='-' && lc!='+') inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p)
	      {
	        result+=c;
	        p++;
	      }
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs = g_defArgs;
  def->fileName = g_yyFileName; 
  def->lineNr = g_yyLineNr;
  def->varArgs = g_defVarArgs;
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (@cond command) that is disabled.

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,FALSE,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash 
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0) 
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());
  
  //md->setDefFile(g_yyFileName);
  //md->setDefLine(g_yyLineNr);
  md->setFileDef(g_yyFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict[g_defName];
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    //Doxygen::functionNameList.append(mn);
    //Doxygen::functionNameDict.insert(g_defName,mn);
    Doxygen::functionNameSDict.append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) g_yyFileDef->insertMember(md);
  
  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
} 

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  if (!Config_getBool("SEARCH_INCLUDES")) return; // do not read include files
  uint i=0;
  
  // find the start of the include file name
  while (i<inc.length() && 
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
	) i++;
  uint s=i;
  
  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';
  
  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++; 

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace(); 

    FILE *f;
    QCString oldFileName = g_yyFileName.copy();
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());
    
    // findFile will overwrite g_yyFileDef if found
    if ((f=findFile(incFileName,localInclude))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) msg("  ");
        msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef) 
      {
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(g_yyFileDef,incFileName,localInclude,g_isImported);
	// add included by dependency
        if (g_yyFileDef)
        {
	  //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
  	  g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      FileState *fs=new FileState;
      fs->bufState=YY_CURRENT_BUFFER;
      fs->lineNr=oldLineNr;
      fs->fileName=oldFileName;
      fs->filePtr=f;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr;
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());
      
      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      preYYin=f;
      preYY_switch_to_buffer(preYY_create_buffer(preYYin,YY_BUF_SIZE));
    } 
    else
    {
      if (oldFileDef) 
      {
	bool ambig;
	FileDef *fd = findFileDef(Doxygen::inputNameDict,incFileName,ambig);
	//printf("findFileDef(%s)=%p\n",incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(fd,incFileName,localInclude,g_isImported);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
  	  fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        msg("#include %s: not found or already included! skipping...\n",incFileName.data());
        //printf("Error: include file %s not found\n",preYYtext);
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  g_condStack.push(new bool(g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)==-1)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
}


/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int len = fread( buf, 1, max_size, preYYin );
  if (len==0 && ferror( preYYin ))
  {
    yy_fatal_error( "input in flex scanner failed" );
    return len;
  }
  return filterCRLF(buf,len);
}

/* ----------------------------------------------------------------- */































#line 3063 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define CopyLine 5
#define CopyString 6
#define Include 7
#define IncludeID 8
#define DefName 9
#define DefineArg 10
#define DefineText 11
#define SkipCPPBlock 12
#define Ifdef 13
#define Ifndef 14
#define SkipCComment 15
#define CopyCComment 16
#define SkipVerbatim 17
#define SkipCPPComment 18
#define RemoveCComment 19
#define RemoveCPPComment 20
#define Guard 21
#define DefinedExpr1 22
#define DefinedExpr2 23
#define SkipDoubleQuote 24
#define SkipSingleQuote 25
#define UndefName 26
#define IgnoreLine 27
#define FindDefineArgs 28
#define ReadString 29
#define CondLine 30

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1250 "pre.l"


#line 3252 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 989 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4081 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1252 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1253 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1254 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1255 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1256 "pre.l"
{
 					  outputArray(preYYtext,preYYleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 1260 "pre.l"
{ // constructors?
					  int i;
					  for (i=preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1268 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=g_fileDefineDict->find(name)) &&
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 1297 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1302 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1309 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1316 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1319 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1322 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1325 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1329 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1332 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1335 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 1339 "pre.l"
{
  					  Define *def=0;
					  //def=g_fileDefineDict->find(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = expandMacro(g_defArgsStr);
					      //printf("result=`%s'\n",result.data());
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1374 "pre.l"
{
                                          Define *def=0;
					  //printf("Search for define %s\n",preYYtext);
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
					      def->nargs==-1 &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
                                            QCString name=preYYtext;
					    QCString result=expandMacro(name); 
					    //printf("result=`%s'\n",result.data());
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1395 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1397 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 1400 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1405 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1409 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 25:
YY_RULE_SETUP
#line 1434 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1437 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 1441 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1445 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1448 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1451 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1455 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1458 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1461 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1464 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1469 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1476 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 37:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1480 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1485 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1491 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1496 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1501 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1506 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1518 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1531 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1534 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1541 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1545 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1550 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1553 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1557 "pre.l"

	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1558 "pre.l"

	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1559 "pre.l"
{
  					  Define *def;
  					  if ((def=isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1571 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1576 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1579 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1582 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1583 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1584 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1602 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1603 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1611 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName.resize(0);
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1618 "pre.l"
{ // should not happen, handle anyway
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1622 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1625 "pre.l"

	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1626 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 66:
/* rule 66 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1627 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1628 "pre.l"

	YY_BREAK
case 68:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1629 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1634 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 70:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1643 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1658 "pre.l"
{ 
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1666 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1671 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1674 "pre.l"

	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1675 "pre.l"

	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1676 "pre.l"

	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1677 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1681 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1685 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 80:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1690 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1697 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1702 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  BEGIN(Start);
  					}
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1707 "pre.l"
{
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1719 "pre.l"
{
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1734 "pre.l"
{
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  if ( g_defName!=g_lastGuardName )
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
  					    Define *def=g_fileDefineDict->find(g_defName);
					    //if (g_includeStack.isEmpty()) 
					    //{
					    //  addDefine();
					    //}
					    if (def==0) // new define name for this file
					    {
					      g_fileDefineDict->insert(g_defName,newDefine());
					    }
					    else // name already exists
					    {
					      if (def->undef) // undefined name
					      {
					        def->undef = FALSE;
					        def->name = g_defName;
					        def->definition = g_defText.stripWhiteSpace();
					        def->nargs = g_defArgs;
					        def->fileName = g_yyFileName.copy(); 
					        def->lineNr = g_yyLineNr;
					      }
					      else
					      {
					        //printf("Error: define %s is defined more than once!\n",g_defName.data());
					      }
					    }
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1782 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1783 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1784 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1792 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 90:
YY_RULE_SETUP
#line 1817 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1824 "pre.l"
{
  				          outputChar('/');outputChar('/');
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1830 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1838 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1841 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1845 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1848 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1852 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
					    g_blockName=QCString(&preYYtext[1]).stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1865 "pre.l"
{ // conditional section
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(CondLine);
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1870 "pre.l"
{
  				          startCondSection(preYYtext);
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
#line 1876 "pre.l"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1876 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  startCondSection(" ");
					  if (YY_START==CondLine) BEGIN(g_condCtx);
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1881 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  endCondSection();
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1885 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1896 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1899 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1902 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1906 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1909 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1913 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1918 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1923 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1927 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1928 "pre.l"

	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1929 "pre.l"

	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1930 "pre.l"

	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1931 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1932 "pre.l"

	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1933 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1936 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1940 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1943 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1946 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1949 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1952 "pre.l"

	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1953 "pre.l"

	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1954 "pre.l"

	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1955 "pre.l"

	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1956 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1960 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1993 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1998 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=g_fileDefineDict->find(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define!\n");
					    g_fileDefineDict->insert(g_defName,newDefine());
					  }
					  else if (def)// name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("Error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2042 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 2043 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 2044 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2045 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2053 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2060 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2061 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2062 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2066 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2069 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2073 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2074 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2075 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLine):
#line 2076 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    if (getFileFilter(fs->fileName.data()).isEmpty())
					      fclose(fs->filePtr);
					    else
					      pclose(fs->filePtr);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr=fs->lineNr;
					    setFileName(fs->fileName.copy());
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr;
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2108 "pre.l"
{
					  outputChar('/');outputChar('*');
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2114 "pre.l"
{
					  outputChar('/');outputChar('/');
  					  g_lastCPPContext=YY_START;
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 2119 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2123 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2127 "pre.l"
ECHO;
	YY_BREAK
#line 4954 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 52);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 989 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 52;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 989 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 988);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2127 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  //defineNameList.setAutoDelete(TRUE);
  //defineNameList.clear();
  //defineDict.clear();
  //fileDefineCache = new DefineCache(1009);
  g_expandedDict = new DefineDict(17);
  g_fileDefineDict = new DefineDict(1009);
}

void cleanUpPreprocessor()
{
  //delete fileDefineCache;
  delete g_fileDefineDict; g_fileDefineDict=0;
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
}


void preprocessFile(const char *fileName,BufStr &output)
{
  uint orgOffset=output.curPos();

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_fileDefineDict->setAutoDelete(TRUE);
  g_fileDefineDict->clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  
  // add predefined macros
  char *defStr;
  QStrList &predefList = Config_getList("PREDEFINED");
  QStrListIterator sli(predefList);
  for (sli.toFirst();(defStr=sli.current());++sli)
  {
    QCString ds = defStr;
    int i_equals=ds.find('=');
    int i_obrace=ds.find('(');
    int i_cbrace=ds.find(')');
    bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';
    
    if (i_obrace==0) continue; // no define name
    
    if (i_obrace<i_equals && i_cbrace<i_equals && 
	i_obrace!=-1      && i_cbrace!=-1      && 
	i_obrace<i_cbrace
       ) // predefined function macro definition
    {
      QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
      QDict<int> argDict(17);
      argDict.setAutoDelete(TRUE);
      int i=i_obrace+1,p,l,count=0;
      // gather the formal arguments in a dictionary 
      while (i<i_cbrace && (p=reId.match(ds,i,&l)))
      {
        argDict.insert(ds.mid(p,l),new int(count++));
	i=p+l;
      }
      // strip definition part
      QCString tmp=ds.right(ds.length()-i_equals-1);
      QCString definition;
      i=0;
      // substitute all occurrences of formal arguments by their 
      // corresponding markers
      while ((p=reId.match(tmp,i,&l))!=-1)
      {
        if (p>i) definition+=tmp.mid(i,p-i);
	int *argIndex;
	if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	{
	  QCString marker;
	  marker.sprintf(" @%d ",*argIndex);
	  definition+=marker;
	}
	else
	{
	  definition+=tmp.mid(p,l);
	}
	i=p+l;
      }
      if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);
      
      // add define definition to the dictionary of defines for this file
      QCString dname = ds.left(i_obrace);
      if (!dname.isEmpty())
      {
	Define *def = new Define;
	def->name = dname;
	def->definition = definition; 
	def->nargs = count;
	def->isPredefined = TRUE;
	def->nonRecursive = nonRecursive;
	g_fileDefineDict->insert(def->name,def);
      }

      //printf("#define `%s' `%s' #nargs=%d\n",
      //  def->name.data(),def->definition.data(),def->nargs);
    }
    else if ((i_obrace==-1 || i_obrace>i_equals) &&
	     (i_cbrace==-1 || i_cbrace>i_equals) &&
	     !ds.isEmpty() && (int)ds.length()>i_equals
	    ) // predefined non-function macro definition
    {
      Define *def = new Define;
      if (i_equals==-1) // simple define without argument
      {
        def->name = ds;
        def->definition = "1"; // substitute occurrences by 1 (true)
      }
      else // simple define with argument
      {
	int ine=i_equals - (nonRecursive ? 1 : 0);
	def->name = ds.left(ine);
	def->definition = ds.right(ds.length()-i_equals-1);
      }
      if (!def->name.isEmpty())
      {
	def->nargs = -1;
	def->isPredefined = TRUE;
	def->nonRecursive = nonRecursive;
	g_fileDefineDict->insert(def->name,def);
      }
      else
      {
	delete def;
      }

      //printf("#define `%s' `%s' #nargs=%d\n",
      //  def->name.data(),def->definition.data(),def->nargs);
    }
    
  }
 
  QCString inputFilter = getFileFilter(fileName);
  if (inputFilter.isEmpty())
  {
    preYYin = fopen(fileName,"r");
    if (!preYYin)
    {
      err("Error: could not open file %s\n",fileName);
      return;
    }
  }
  else
  {
    QCString cmd = inputFilter+" \""+fileName+"\"";
    Debug::print(Debug::ExtCmd,0,"Executing popen(`%s`)\n",cmd.data());
    preYYin = popen(cmd,"r");
    if (!preYYin)
    {
      err("Error: could not execute filter %s\n",cmd.data());
      return;
    }
  }
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;
  setFileName(fileName);
  BEGIN( Start );
  
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  if (inputFilter.isEmpty())
    fclose(preYYin);
  else
    pclose(preYYin);
  
  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    msg("Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    msg("---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') printf("%05d ",++line);
      orgPos++;
    }
    msg("\n---------\n");
  }
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


