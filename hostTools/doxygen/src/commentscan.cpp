
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 162
#define YY_END_OF_BUFFER 163
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1104] =
    {   0,
      106,  106,  119,  119,  159,  159,  163,  162,   30,  162,
       29,  162,   30,  162,   30,  162,   28,   30,  162,   30,
      162,   30,  162,   22,   30,  162,   30,  162,   30,  162,
       28,   30,  162,   75,  162,   74,  162,   75,  162,   72,
       75,  162,   75,  162,   75,  162,  162,   76,  162,   96,
      162,   95,  162,   96,  162,   93,   96,  162,   96,  162,
       57,  162,   57,  162,   56,  162,   57,  162,   57,  162,
       53,   57,  162,   57,  162,   57,  162,   61,  162,   60,
      162,   61,  162,   58,   61,  162,   61,  162,   61,  162,
       65,  162,   64,  162,   65,  162,   62,   65,  162,   65,

      162,   65,  162,   65,  162,   57,  162,   56,  162,   57,
      162,   57,  162,   57,  162,   57,  162,   84,  162,   83,
      162,   84,  162,   81,   84,  162,   84,  162,   88,  162,
       87,  162,   88,  162,   88,  162,   92,  162,   91,  162,
       92,  162,   92,  162,   80,  162,   77,  162,   80,  162,
       78,   80,  162,   80,  162,   80,  162,   44,  162,   43,
      162,   44,  162,   41,   44,  162,   44,  162,   48,  162,
       48,  162,   47,  162,   48,  162,   48,  162,   45,   48,
      162,   48,  162,   48,  162,   52,  162,   51,  162,   52,
      162,   49,   52,  162,   52,  162,   68,  162,  162,   66,

      162,  162,   70,  162,   71,  162,  162,  102,  162,  101,
      162,  100,  102,  162,  102,  162,  106,  109,  162,  103,
      162,  106,  109,  162,  109,  162,  109,  162,  111,  162,
      110,  162,  162,  114,  162,  114,  162,  112,  162,  114,
      162,  114,  162,  119,  123,  162,  120,  162,  123,  162,
      123,  162,  123,  162,  123,  162,  123,  162,   99,  162,
       97,  162,   99,  162,  127,  162,  125,  162,  124,  127,
      162,  127,  162,  134,  135,  162,  133,  162,  135,  162,
      135,  162,  135,  162,  137,  138,  162,  136,  162,  138,
      162,  138,  162,  141,  162,  139,  162,  141,  162,  145,

      162,  143,  162,  145,  162,  142,  145,  162,  145,  162,
      148,  151,  162,  146,  162,  149,  151,  162,  150,  151,
      162,  151,  162,  151,  162,  154,  162,  152,  162,  154,
      162,  157,  162,  156,  162,  157,  162,  155,  157,  162,
      157,  162,   38,   40,  162,   39,  162,   40,  162,   40,
      162,  117,  162,  116,  162,  115,  117,  162,  117,  162,
       33,   34,  162,   32,  162,   34,  162,   34,  162,  159,
      161,  162,  160,  162,  161,  162,  161,  162,  161,  162,
       27,    4,   26,   24,   21,   21,   13,   21,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   19,   20,   15,
       21,   22,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   23,   72,   73,   72,   76,   93,   93,
       94,   53,   53,   55,   53,   58,   59,   58,   62,   62,
       63,   62,   81,   81,   82,   85,   86,   90,   89,   78,
       79,   78,   41,   41,   41,   42,   45,   45,   46,   45,
       49,   49,   50,   66,   66,   67,   70,   69,  100,  106,
      103,  106,  108,  108,  105,  110,  113,  119,  122,  121,
       98,  124,  126,  134,  137,  140,  142,  142,  144,  148,

      147,  153,  155,  155,   38,  115,   33,  159,  158,   25,
        8,    1,    1,    2,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   17,   18,   13,   13,   13,   13,
     8199,   13,16391,   13,   13,   13,   13,   13,   13,   13,
     8199,   13,16391,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,    5,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13, 8199,
       13,16391,   13,   13,   13,   13,   13,   13,   13, 8199,
       13,16391,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   72,   72,   72,   53,   58,   58,   58,   62,

       62,   62,   78,   78,   78,   41,   41,   41,   41,   45,
       49,  107,   35,   36,   37,   31,  158,   12,    1,   14,
        2, 8199,   13,16391,   13,   13, 8198,   13,16390,   13,
       13,   13, 8199,   13,16391,   13,   13,   13,   13,   13,
       13,   13, 8199, 8199,   13,   13,   13,   13,   13, 8199,
       13,16391,   13, 8199,   13,16391,   13,   13,   13,   13,
     8199,   13,16391,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13, 8199,   13,16391,   13,   13, 8198,   13,
    16390,   13,   13,   13, 8199,   13,16391,   13,   13,   13,
       13,   13,   13,   13,    5, 8199,   13,   13,   13,   13,

     8199,   13,16391,   13, 8199,   13,16391,   13,   13,   13,
       13, 8199,   13,16391,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   72,   58,   62,   54,   78,   41,   41,
       41,   49,  107,  129,   31,   13,   13, 8198, 8198,   13,
     8199,   13,16391,   13,   13,   13,   16,   13,   13,   13,
       13,   13,   13, 8199,   13,16391,   13, 8199,   13,16391,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    5, 8198, 8199,
       13,16391,   13,   13,   13,   13,   13,   13,   13,   13,
       13, 8199,   13,16391,   13, 8199,   13,16391,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   72,   58,   62,   78,    3,   13,   13,   13,
       13,   13,   13,   13, 8199,   13,16391,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
     8199,   13,16391,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13, 8199,   13,16391,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13, 8199,   13,16391,   13,   13,   13,   13,   13,
       72,   58,   62,   78,   66,  131,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

     8199,   13,16391,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13, 8199,   13,16391,   13,
       13,   13,   13,   13,   13,   13,   13,   72,   58,   62,
       78,  130,  128,   13,   13,   13,   13, 8199,   13,16391,
       13,   13,   13,   13, 8199,   13,16391, 8199,   13,16391,
       13,   13,   13,   13, 8199,   13,16391,   13,   13,   13,
       13,   13,   13, 8199,   13,16391,   13,   13,   13,   13,
     8199,   13,16391, 8199,   13,16391,   13,   13,   13,   13,
     8199,   13,16391,   13,   72,   74,   95,   56,   58,   60,

       62,   64,   83,   87,   91,   77,   78,   43,   47,   51,
       68,   71,  101,  104,  111,  112,  118,  120,   97,  125,
      132,  133,  136,  139,  143,  146,  152,  156,  116,   32,
      160,   10,    9,   13,   13,   13,   13, 8199,   13,16391,
       13,   13,   13,   13,   13,   13,   13,   13,    5,   13,
       13,   13,   13, 8199,   13,16391,   13,   13,   13,   13,
       13,   13,   13,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13, 8199,
       13,16391,   13,   13, 8199,   13,16391,   13,   13,   13,

       13,   13,   27
    } ;

static yyconst flex_int16_t yy_accept[1286] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    6,    7,    8,    9,   11,   13,   15,
       17,   20,   22,   24,   27,   29,   31,   34,   36,   38,
       40,   43,   45,   47,   48,   50,   52,   54,   56,   59,

       61,   63,   65,   67,   69,   71,   74,   76,   78,   80,
       82,   84,   87,   89,   91,   93,   95,   97,  100,  102,
      104,  106,  108,  110,  112,  114,  116,  118,  120,  122,
      124,  127,  129,  131,  133,  135,  137,  139,  141,  143,
      145,  147,  149,  151,  154,  156,  158,  160,  162,  164,
      167,  169,  171,  173,  175,  177,  179,  182,  184,  186,
      188,  190,  192,  195,  197,  199,  200,  202,  203,  205,
      207,  208,  210,  212,  215,  217,  220,  222,  225,  227,
      229,  231,  233,  234,  236,  238,  240,  242,  244,  247,
      249,  251,  253,  255,  257,  259,  261,  263,  265,  267,

      269,  272,  274,  277,  279,  281,  283,  285,  288,  290,
      292,  294,  296,  298,  300,  302,  304,  306,  309,  311,
      314,  316,  319,  322,  324,  326,  328,  330,  332,  334,
      336,  338,  341,  343,  346,  348,  350,  352,  354,  356,
      359,  361,  364,  366,  368,  370,  373,  375,  377,  379,
      381,  381,  382,  382,  382,  383,  383,  383,  384,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  386,  387,  388,  389,  390,  391,  392,  393,
      394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
      404,  405,  406,  407,  408,  409,  410,  412,  413,  414,

      415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      434,  434,  434,  435,  435,  436,  436,  436,  436,  437,
      438,  438,  439,  440,  440,  441,  441,  441,  442,  442,
      442,  442,  442,  443,  443,  443,  444,  444,  445,  445,
      445,  445,  446,  446,  447,  447,  447,  447,  448,  449,
      449,  450,  450,  450,  451,  451,  451,  452,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  454,  455,  455,  456,  456,  456,  457,  457,  459,
      459,  459,  460,  460,  460,  461,  461,  461,  461,  462,

      463,  464,  464,  464,  465,  465,  466,  466,  467,  467,
      467,  467,  467,  468,  468,  468,  469,  469,  470,  470,
      470,  470,  471,  472,  472,  473,  473,  474,  474,  475,
      475,  476,  476,  477,  477,  478,  478,  479,  479,  480,
      480,  481,  482,  483,  483,  484,  485,  485,  486,  486,
      487,  487,  487,  487,  487,  488,  488,  489,  490,  491,
      491,  491,  491,  492,  492,  493,  493,  494,  494,  495,
      495,  495,  495,  496,  496,  496,  497,  497,  498,  499,
      499,  500,  500,  501,  501,  502,  502,  502,  503,  503,
      504,  504,  505,  505,  505,  506,  506,  506,  507,  507,

      508,  508,  508,  509,  510,  510,  510,  510,  511,  511,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  512,
      513,  514,  515,  516,  517,  518,  519,  520,  521,  522,
      523,  524,  525,  526,  527,  527,  528,  529,  530,  531,
      534,  535,  536,  537,  538,  539,  540,  541,  544,  545,
      546,  547,  548,  549,  550,  551,  552,  553,  554,  555,
      556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      566,  567,  568,  569,  570,  573,  574,  575,  576,  577,
      578,  579,  580,  583,  584,  585,  586,  587,  588,  589,
      590,  591,  592,  593,  594,  595,  595,  596,  596,  596,

      596,  596,  597,  598,  599,  599,  600,  601,  602,  602,
      603,  603,  603,  603,  603,  603,  603,  603,  604,  605,
      605,  606,  607,  608,  609,  610,  610,  610,  610,  611,
      611,  612,  612,  612,  612,  612,  612,  612,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  614,  615,  616,
      616,  616,  617,  617,  618,  618,  618,  618,  619,  619,
      619,  619,  619,  619,  619,  619,  620,  621,  622,  625,
      626,  627,  630,  631,  632,  633,  636,  637,  637,  638,
      639,  640,  641,  642,  643,  644,  646,  647,  648,  649,

      650,  653,  654,  657,  658,  659,  660,  661,  664,  665,
      666,  667,  668,  669,  670,  671,  672,  673,  673,  674,
      677,  678,  679,  682,  683,  684,  685,  688,  689,  690,
      691,  692,  693,  694,  695,  697,  698,  699,  700,  701,
      704,  705,  708,  709,  710,  711,  712,  715,  716,  717,
      718,  719,  720,  721,  722,  723,  724,  725,  725,  725,
      726,  727,  728,  728,  728,  728,  729,  729,  730,  731,
      732,  732,  732,  733,  733,  733,  733,  733,  733,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  737,
      738,  739,  741,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  757,  758,  761,  762,  763,  764,
      765,  766,  767,  768,  769,  770,  771,  772,  773,  774,
      775,  776,  777,  778,  780,  783,  784,  785,  786,  787,
      788,  789,  790,  791,  792,  795,  796,  799,  800,  801,
      802,  803,  804,  805,  806,  807,  808,  809,  810,  811,
      812,  813,  814,  814,  814,  815,  816,  816,  816,  816,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  818,  818,  818,
      818,  818,  819,  820,  821,  822,  823,  824,  825,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  844,  845,  846,  847,  848,  849,  850,
      851,  852,  853,  854,  855,  856,  857,  860,  861,  862,
      863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  876,  877,  878,  879,  880,  881,  882,  882,  882,
      883,  884,  884,  884,  884,  885,  885,  885,  885,  885,
      885,  886,  886,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  888,  889,
      890,  891,  892,  893,  894,  895,  896,  897,  898,  899,
      900,  901,  904,  905,  906,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  921,
      922,  923,  924,  925,  926,  927,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  939,  939,  940,  941,
      941,  941,  941,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  943,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  945,  946,  947,  948,  951,  952,  953,  954,
      955,  958,  961,  962,  963,  964,  965,  968,  969,  970,
      971,  972,  973,  974,  977,  978,  979,  980,  981,  984,
      987,  988,  989,  990,  991,  994,  995,  997,  998,  999,
     1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1032, 1032, 1033, 1034,

     1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058,
     1059, 1060, 1061, 1062, 1063, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1080, 1081, 1082, 1083, 1084, 1084,
     1085, 1086, 1087, 1088, 1089, 1089, 1089, 1089, 1090, 1093,
     1094, 1094, 1095, 1098, 1099, 1099, 1100, 1101, 1101, 1102,
     1103, 1103, 1103, 1104, 1104
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   18,   18,   18,   20,    1,   21,
        1,   22,    1,   23,   24,   25,   26,   27,   28,   26,
       29,   30,   31,   26,   26,   32,   33,   26,   34,   35,
       26,   36,   26,   37,   38,   26,   26,   26,   26,   26,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   63,   64,
       65,   26,   66,    1,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
        1,   18,   19,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    1,   21,
        1,   22,   20,   20,   20,   20,   20,   20,   20,   20,
       23,   20,   20,   20,   24,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,    1,   25,   26
    } ;

static yyconst flex_int16_t yy_base[1481] =
    {   0,
        0,    0,    0,   67,   83,  151, 4128, 4127,  219,    0,
      287,    0,  355,  423,  491,  559,  627,    0,  695,    0,
       67,   68,   70,   73,  763,  831,  899,    0,  967,    0,
     1035,    0, 1103,    0,   99,  106, 1171,    0,  124,  163,
     1239,    0,  130,  138,  176,  376,   75,   76, 1307,    0,
      377,  380,  433,  444,   79,   98, 1375,    0,  166,  447,
      145,  365, 1443,    0,  367,  438,  445,  448, 1511,    0,
      371,  439,  503,  506, 4129, 8201, 8201,  514, 4114, 4092,
      570, 1574, 1628,  182, 1689,  112,  785, 8201, 8201,    0,
      167,  504,  532, 4110, 8201, 8201, 8201,    0,  105,  410,

     8201,  536,  585,  807, 4092,  592,  815,  206, 8201, 8201,
        0,  775,  806, 1579, 8201, 8201,    0,  839,  846, 1606,
     1756,  599,  604, 1760, 4076, 1583,  472, 8201, 8201,    0,
        0, 1587, 8201, 8201, 4064, 1765, 8201, 8201, 4059, 4018,
     8201, 8201,    0, 1598, 1627, 1772, 8201, 8201,    0, 1781,
     1792, 8201, 1800, 1806, 1813, 4035, 1827, 1822,  611, 8201,
     8201,    0, 4037, 1833, 8201,    0, 4032, 1837,    0, 8201,
     1841, 8201, 8201,    0, 4000,  855, 8201, 3998, 1840, 1907,
     8201,    0, 3985, 8201,  124, 8201, 3997, 3957,    0, 8201,
     8201, 3980, 3977, 3934,  342, 8201, 8201, 1848, 8201, 8201,

        0, 1852,    0, 8201, 8201,   83,  350,    0, 8201, 8201,
     3931, 8201, 8201, 1863, 8201, 8201,    0,    0, 1869,    0,
     8201, 8201, 8201, 8201, 1882, 8201, 8201, 1890, 8201, 8201,
        0,  371, 3921,    0, 8201, 3914, 3907, 8201, 8201,    0,
     3903,    0, 8201, 3925, 3896,    0, 8201, 8201, 3868,  418,
     1886, 1894, 3890, 3924, 8201, 3904,    0, 8201, 3899,  404,
     3901,  154,  366,   62,  426,  451,  792,  429,  812, 3864,
     3848, 8201,  134,  464, 3836, 1643,  531, 1704, 1871,  819,
     1898, 1777,  523, 1899,  548, 1915, 1920, 1592, 1934, 1933,
     1938, 1939,  776,  791, 8201, 8201,    0,  869, 1950, 1951,

     1952, 1957, 1963, 1968, 1967, 1996, 1977, 1994, 1982, 2004,
     2018, 2024, 2025, 2036, 2038, 2037, 2049, 2050, 2051,  875,
      871,  891, 8201, 3891, 2082, 1688, 2084, 1697, 8201, 2090,
     3891, 8201,  388, 3884,  394, 3868, 1943, 8201, 3834, 2066,
     3856,    0, 2109, 2114, 2129, 2137, 2123, 8201, 3814, 2142,
     2150,    0, 3858, 2144, 2145, 2150, 2166, 8201, 2156, 3850,
     2158, 2162, 2171, 8201, 3844, 2198, 8201, 2188, 2210, 3826,
        0, 2214, 2218, 2233, 2241,    0, 2245, 2254, 2264, 2184,
        0,    0, 2269, 8201, 3782, 3826, 8201, 2273, 8201, 3772,
     3817, 8201, 3767, 3812, 2263, 2212, 2265, 2284, 8201, 2274,

     2293, 2304,    0, 2313, 3787, 2332, 2318, 8201, 3747, 2340,
     3779,    0, 2344, 2352, 2363, 2371, 2323, 8201, 3742, 2375,
     2383,    0, 3757, 3763, 3750, 2391, 8201, 3711, 3742, 3684,
     3713, 2395, 8201, 3674,    0, 2399, 8201, 3668,    0, 3651,
     1866, 8201, 3660, 3649, 8201, 3675, 2403, 8201, 3623,    0,
     3615,  540, 3660, 3652, 8201, 3577,    0, 8201, 8201, 3566,
     3566, 2407, 8201, 3564,    0, 2411, 8201, 3562,    0,   89,
     3562, 3551,    0, 3547, 2415, 8201, 3543,    0,    0, 2419,
     8201, 3542,    0, 2423, 8201, 3533, 2427, 8201, 3526,  507,
     3525,  535, 3500, 3460,    0, 3495,  823,    0, 3450,    0,

       90, 3449,    0,    0, 3448, 3445, 3481, 8201, 3480, 3446,
     3424, 1605,  165, 2431, 8201, 1555, 1573, 3419, 3418,  616,
     2432,    0,  876, 2190, 2055, 2061, 2433, 2357, 2103, 2079,
     2437, 2438, 8201, 8201,    0, 1865, 2442, 2443, 2444, 2505,
     2474, 2478, 2470, 2482, 1854, 2449, 2488, 3413, 2454, 2484,
     2450, 2472, 2531, 2456, 2490, 2532, 2533, 2547,    0,    0,
     2552, 2553, 2557, 2559, 2561, 2565, 2572, 2573, 2574, 2578,
     2582, 2580, 2593, 2602, 2662, 2604, 2646, 2647, 2652, 2656,
     2686, 2692, 3398, 2703, 2704, 2709, 2711, 2716, 2717, 2718,
     2722, 2729, 2735, 8201, 2744, 2751, 2756,    0, 3390, 2790,

     3375,    0, 8201, 2769, 2781, 2786, 3403, 2795, 2802, 2811,
     2836, 3404, 2455, 2468, 3362, 3358, 3350, 8201, 2827, 2832,
     2837, 2861, 2880, 2888, 2907, 3349, 2915, 3348,    0,    0,
     3379, 3335, 3320, 3328, 3324, 3319,    0,    0, 3307, 3262,
     3249, 3250, 3241, 3234, 3233, 3224, 3236, 3218, 3221, 3173,
     3164, 3160, 3155, 3151,    0, 3145, 8201, 8201, 8201, 3144,
     3168, 2461, 3137,    0, 3083, 3076,    0, 8201, 3068, 3067,
     3098, 2623, 1734, 3059, 3045, 2462, 8201,    0, 2983, 2688,
     2645, 3051, 2734, 2736, 2641, 3040, 2635, 3014, 2563, 2551,
     2818, 2803, 2871, 2827,    0, 2622, 2893, 2873, 2894, 2900,

     3034, 3073,    0, 2926, 2928, 3074, 3078,    0, 2932, 3080,
     3082, 3084, 3091, 3092, 3093, 3098, 2811, 2942, 3104, 3159,
     2934, 3105, 3227, 3109, 3110, 3146, 2932, 3211, 3216, 3212,
     3217, 3257, 3258, 3269, 3316, 3300, 3305, 3301, 3306, 2936,
     3218,    0, 3347, 3349, 3310, 3357,    0, 3358, 3362, 3364,
     3371, 3372, 3383, 3376, 3389, 3391, 3259, 2923, 2918, 3390,
     3416, 8201, 2915, 2910, 2908, 3402,    0, 2940, 2948, 3121,
     2907, 2901, 2939, 2899, 2894, 2891, 2883, 2877,    0, 2868,
     2867, 2866, 3139, 2860, 2858, 2848, 2854, 2843, 8201, 2831,
     2831, 2814, 2813, 2806, 2805, 2800, 2791, 2781, 2624, 2779,

     2775, 2770, 2798, 2761, 2746, 1813, 2732, 2745, 3099, 3127,
        0, 2959,    0, 3111, 3203, 3207, 8201, 3403, 3435, 3126,
     3284, 3285, 3189,    0, 3441,    0, 3445, 3446, 3286, 3447,
     3103, 3363, 3453, 3460, 3459, 3458, 3465, 3464, 3472, 3473,
     3478, 3474, 3479, 3535,    0, 3486, 3526, 3525, 3557, 3558,
     3559, 3566, 3567, 3576,    0, 3578,    0, 3582, 3583, 3587,
     3588, 3589, 3607, 3609, 3632, 3633, 3637, 3646, 3648, 3652,
     3658, 3470, 2732, 2730, 3654, 3665, 2719, 2718, 2708, 3690,
     3713, 2707, 2700, 2695, 2672, 2665, 2657, 2651, 2613, 2609,
     2594, 2583, 2579, 2571, 2572, 2565, 2536, 2541, 2532, 2534,

     2522, 2504, 2496, 2495, 2440, 2444, 2422, 2421, 2415, 2403,
     2380, 2376, 2372, 2368, 2364, 2360, 2383, 2337, 2347, 2337,
     2324, 3507, 3568, 3487, 3660, 3673, 3659, 3664,    0, 3678,
     3706, 3718, 3639, 3723, 3733, 3734, 3650, 3738, 3739, 3740,
     3744, 3746,    0, 3745, 3751, 3752, 3757, 3750, 3758, 3763,
     3769, 3773, 3775, 3777, 3781, 3782,    0, 3792, 3799, 3809,
     3824, 3829, 3838, 3839, 3843, 3845, 3850, 3851, 3857, 3861,
        0, 3866, 3868, 3872, 3870, 3879, 3897, 2337, 2327, 3904,
     3913, 2326, 2325, 2319, 3926, 3956, 3975, 2314, 2309, 2296,
     8201, 2295, 2294, 2286, 2285, 2275, 2266, 2258, 2240, 2245,

     2233, 2237, 2240, 2226, 2224, 2226, 2220, 2218, 8201, 2212,
        0,    0, 2210, 2196, 2189, 2187, 2182, 2181, 2163, 2162,
     2155, 2139, 2137, 2125, 2100, 2097, 2085, 3765, 3856, 3887,
     3945, 3962, 3947, 3949, 3913, 3966, 3967, 3980, 3981, 3985,
     3783, 2089, 3986, 3996, 4000, 4001, 4006, 4008, 4012, 4010,
     4014, 4018, 4024, 4028, 4030, 4034, 4038, 4045, 4044, 4060,
     4071, 4078, 4084, 4088, 4092, 2078, 4093, 4097, 4099, 4104,
     4105, 4112, 4114, 4133, 4144, 2077, 2069, 4149, 4154, 2062,
     2045, 2037, 4161, 2017, 2015, 2001, 1992, 1988, 1987, 1974,
     1970, 1963, 1969,    0, 1961, 1955, 1944, 1938, 1944, 1918,

     1909, 1908, 1903,    0, 8201, 8201, 1902, 1873, 1865, 1863,
     1844, 1840, 1828, 1824, 1819, 1800, 1794, 1786, 1756, 1791,
     1771, 4032, 4144, 4103, 4016, 1728, 4157, 4120, 4177, 4181,
     1728,    0, 4183, 4185, 4118, 4190,    0, 4191, 4195, 4201,
     4206, 4211, 4212, 1677, 4216, 4218, 4222, 4223, 1664,    0,
     4231, 4245, 4263, 4265,    0, 4274, 4267, 8201, 8201, 4273,
     4279, 8201, 8201, 8201, 4292, 8201, 8201, 8201, 8201, 8201,
     8201, 8201, 8201, 8201, 8201, 1613, 1578, 1586, 1585, 1573,
     1551, 8201, 8201, 8201, 8201, 8201, 8201, 8201, 8201, 8201,
     8201, 8201, 8201, 8201, 8201, 1578,  867, 8201, 8201, 4276,

     4286, 4237, 4235,    0, 4292, 4318, 3205, 4319, 4320, 4324,
     4325, 4333,  765, 4335, 4337, 4339, 4341,    0, 4345, 4349,
     4351, 4353, 4355, 4357, 4359,  814,  804,  729,  570,  557,
      469, 8201, 4361, 4363, 4343, 4023, 4369, 4365, 4408,  736,
     4410, 4417, 4421, 4425, 4426, 4427, 4431,  457,  427,  400,
      390,  367,  337, 4432, 4433, 4416, 4437, 4438,  571, 4442,
     4443, 4453, 4457, 4473,  308,  151,  142, 4444,    0, 4468,
     1751, 4489,    0, 4490,  115, 4496, 4498,  766, 4500, 4502,
     1779, 1893, 4509, 8201, 4557, 4583, 4609, 4635, 4661, 4687,
     4713, 4739, 4765, 4791, 4817, 4843, 4869, 4895, 4921, 4947,

     4973, 4999, 5025, 5051, 5077, 5103, 5119, 5133, 5147, 5171,
     5187, 5211, 5218, 5229, 5252, 5277, 5300, 5324, 5340, 5364,
     5380, 5403, 5428, 5451, 5456, 5465, 5489, 5515, 5541, 5557,
     5562, 5585, 5608, 5633, 5656, 5661, 5672, 5677, 5688, 5712,
     5726, 5750, 5776, 5790, 5814, 5840, 5854, 5878, 5904, 5911,
     5920, 5944, 5951, 5962, 5986, 6000, 6024, 6050, 6076, 6092,
     6104, 6109, 6134, 6139, 6153, 6176, 6200, 6216, 6230, 6254,
     6267, 6285, 6290, 6313, 6336, 6345, 6369, 6385, 6399, 6423,
     6439, 6453, 6458, 6481, 6504, 6528, 6553, 6562, 6586, 6612,
     6638, 6654, 6668, 6691, 6696, 6719, 6724, 6747, 6770, 6779,

     6790, 6808, 6819, 6843, 6857, 6881, 6907, 6927, 6939, 6963,
     6989, 7003, 7027, 7053, 7064, 7088, 7101, 7119, 7143, 7157,
     7181, 7207, 2952, 7221, 7245, 7270, 7275, 7298, 7322, 7329,
     7334, 7357, 7371, 7385, 7390, 7413, 7424, 7438, 7452, 7466,
     7480, 7503, 7529, 7554, 7568, 7582, 7605, 7628, 7651, 7674,
     7685, 7690, 7701, 7706, 7715, 7739, 7746, 3257, 7758, 7782,
     7789, 7812, 7836, 7862, 7869, 7892, 7906, 7920, 7934, 7939,
     7962, 7985, 7997, 8021, 8046, 8070, 8096, 8122, 8148, 8174
    } ;

static yyconst flex_int16_t yy_def[1481] =
    {   0,
     1285, 1285, 1284,    3, 1286, 1286, 1287, 1287, 1284,    9,
     1284,   11, 1288, 1288, 1289, 1289, 1284,   17, 1284,   19,
     1290, 1290, 1291, 1291, 1292, 1292, 1284,   27, 1284,   29,
     1284,   31, 1284,   33, 1293, 1293, 1284,   37, 1294, 1294,
     1284,   41, 1295, 1295, 1296, 1296, 1297, 1297, 1284,   49,
     1298, 1298, 1299, 1299, 1300, 1300, 1284,   57, 1301, 1301,
     1302, 1302, 1284,   63, 1303, 1303, 1303, 1303, 1284,   69,
     1304, 1304, 1305, 1305, 1284, 1284, 1284, 1284, 1306, 1307,
     1308, 1284, 1284, 1309, 1284, 1284, 1308, 1284, 1284, 1310,
     1311, 1311, 1311, 1312, 1284, 1284, 1284, 1313, 1314, 1284,

     1284, 1284, 1284, 1315, 1284, 1316, 1284, 1317, 1284, 1284,
     1318, 1319, 1319, 1319, 1284, 1284, 1320, 1321, 1321, 1321,
     1321, 1284, 1284, 1322, 1284, 1323, 1324, 1284, 1284, 1325,
     1326, 1284, 1284, 1284, 1327, 1284, 1284, 1284, 1328, 1284,
     1284, 1284, 1329, 1330, 1330, 1330, 1284, 1284, 1331, 1332,
     1284, 1284, 1284, 1284, 1333, 1284, 1334, 1284, 1335, 1284,
     1284, 1336, 1337, 1284, 1284, 1338, 1339, 1284, 1340, 1284,
     1284, 1284, 1284, 1341, 1284, 1342, 1284, 1343, 1284, 1284,
     1284, 1344, 1284, 1284, 1284, 1284, 1345, 1284, 1346, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1347, 1284, 1348, 1284, 1284, 1284, 1284, 1349, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1350, 1351, 1284, 1352,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1353, 1354, 1284, 1355, 1284, 1284, 1284, 1284, 1284, 1356,
     1284, 1357, 1284, 1284, 1284, 1358, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1359, 1284, 1360, 1361, 1284, 1360, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1362, 1363, 1362, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1284, 1284, 1364, 1365, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1284,
     1284, 1284, 1284, 1367, 1368, 1369, 1368, 1284, 1284, 1368,
     1370, 1284, 1371, 1372, 1371, 1284, 1284, 1284, 1284, 1284,
     1284, 1373, 1374, 1375, 1373, 1374, 1284, 1284, 1284, 1375,
     1375, 1376, 1377, 1378, 1379, 1378, 1284, 1284, 1378, 1380,
     1381, 1382, 1381, 1284, 1380, 1284, 1284, 1381, 1284, 1284,
     1383, 1384, 1385, 1383, 1284, 1386, 1384, 1385, 1385, 1387,
     1388, 1388, 1284, 1284, 1284, 1389, 1284, 1284, 1284, 1284,
     1390, 1284, 1284, 1391, 1392, 1393, 1392, 1284, 1284, 1392,

     1394, 1284, 1395, 1394, 1284, 1396, 1284, 1284, 1284, 1284,
     1284, 1397, 1398, 1399, 1397, 1398, 1284, 1284, 1284, 1399,
     1399, 1400, 1401, 1402, 1401, 1284, 1284, 1284, 1403, 1284,
     1403, 1284, 1284, 1284, 1404, 1284, 1284, 1284, 1405, 1284,
     1406, 1284, 1407, 1284, 1284, 1408, 1284, 1284, 1284, 1409,
     1284, 1284, 1410, 1410, 1284, 1284, 1411, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1412, 1284, 1284, 1284, 1413, 1284,
     1284, 1284, 1414, 1284, 1284, 1284, 1284, 1415, 1415, 1284,
     1284, 1284, 1416, 1284, 1284, 1284, 1284, 1284, 1284, 1417,
     1418, 1417, 1284, 1284, 1419, 1284, 1284, 1420, 1284, 1421,

     1284, 1284, 1422, 1423, 1284, 1284, 1424, 1284, 1284, 1284,
     1284, 1284, 1284, 1425, 1284, 1284, 1284, 1284, 1284, 1426,
     1426, 1427, 1284, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1284, 1284, 1429, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428,  540, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1430, 1431,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432,  575, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1284, 1433, 1433, 1434, 1435, 1284, 1436,

     1284, 1437, 1284, 1438, 1438, 1439, 1284, 1440, 1440, 1441,
     1442, 1443, 1284, 1444, 1284, 1284, 1284, 1284, 1445, 1445,
     1446, 1447, 1448, 1449, 1449, 1284, 1450, 1284, 1451, 1452,
     1453, 1284, 1284, 1284, 1284, 1284, 1454, 1455, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1456, 1284, 1284,
     1284, 1284, 1284, 1284, 1457, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1458, 1284, 1284, 1459, 1284, 1284, 1284,
     1460, 1460, 1284, 1284, 1284, 1284, 1284, 1461, 1284, 1462,
     1462, 1462, 1462, 1462, 1462,  679, 1462, 1463, 1462, 1462,
     1462, 1462, 1462, 1462, 1464, 1464, 1462, 1462, 1462, 1462,

      679, 1462,  679, 1462, 1462, 1462, 1462,  679, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1465, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466,  720, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1465, 1466, 1466, 1466, 1466,  720,
     1466,  720, 1466, 1466, 1466, 1466,  720, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1467, 1284, 1284, 1468,
     1469, 1284, 1284, 1284, 1284, 1446, 1470, 1471, 1471, 1472,
     1284, 1284, 1453, 1284, 1284, 1284, 1284, 1284, 1455, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1473, 1284, 1284, 1284, 1284, 1284, 1462, 1462,
     1474, 1474,  679, 1462, 1462, 1462, 1284, 1462, 1462, 1462,
     1462, 1462, 1462,  679, 1462,  679, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1466, 1466, 1466, 1465,  720, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466,  720, 1466,  720, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1467, 1284, 1284, 1468, 1469, 1284, 1284, 1284, 1446,
     1475, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1476, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1473, 1284, 1284, 1284,
     1284, 1462, 1462, 1462, 1462, 1462, 1462, 1462,  679, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462,  679, 1462, 1462, 1462, 1462, 1462, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466,  720, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
      720, 1466, 1466, 1466, 1466, 1466, 1467, 1284, 1284, 1468,
     1469, 1284, 1284, 1284, 1446, 1475, 1475, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1477, 1478, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462,  679, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466,  720, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1467, 1284, 1284, 1468, 1469, 1284,
     1284, 1284, 1446, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1479, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1480, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1462, 1462, 1462, 1462,  679, 1462, 1462, 1462, 1462,
      679,  679, 1462, 1462, 1462, 1462,  679, 1462, 1466, 1466,
     1466, 1466, 1466,  720, 1466, 1466, 1466, 1466,  720,  720,
     1466, 1466, 1466, 1466,  720, 1466, 1467, 1284, 1284, 1468,
     1469, 1284, 1284, 1284, 1446, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1462,

     1462, 1462, 1462,  679, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1284, 1465, 1466, 1466, 1466, 1466,  720, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1465,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1284, 1284, 1284,
     1284, 1284, 1284, 1462, 1462, 1462, 1462, 1462, 1465, 1466,
     1466, 1466, 1466, 1466, 1284, 1284, 1284, 1462,  679, 1462,
     1465, 1466,  720, 1466, 1284, 1462, 1462, 1465, 1466, 1466,
     1465, 1465, 1465,    0, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284
    } ;

static yyconst flex_int16_t yy_nxt[8270] =
    {   0,
       77,   77,   78,   77,   77,   77,   79,   77,   77,   77,
       77,   77,   80,   77,   80,   81,   77,   80,   80,   77,
       82,   77,   83,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   77,   85,
       77,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   77,   77,   77,   86,  134,
      134,   86,  138,  135,  135,  138,  139,  197,  197,  139,
      512,  213,   87,   88,   88,   89,   88,   88,   88,   90,
       88,   88,   88,   88,   88,  661,   88,  512,   88,   92,

      213,  170,   92,   88,   88,   88,  136,  136,  170,  140,
       76,  662,  140,  320,  198,  198,  320,   76,  214,  512,
      334,   88,   93,   88,  336,  452,  177,  321,  452,  470,
      453,  185,  186,  471,  185,  178,  187,  214,  171,  185,
      186,  646,  185,  647,  187,  171,  179,  227,   88,   88,
       88,   88,   88,   89,   88,   88,   88,   90,   88,   88,
       88,   88,   88,  180,   88,  177,   88,   92,  221,  188,
       92,   88,   88,   88,  178,  222,  223,  188,  190, 1094,
      191,  521,  326,  327,  228,  179,  327,  192,  224,   88,
       93,   88,  193,  512,  256, 1094,  256,  256,  194,  256,

      256,  522,  180, 1275,  257,  225,  327,  350,  350,  350,
      350,  510,  511,  512,  351,  195,   88,   88,   88,   96,
       96,   97,   96,   96,   96,   96,   96,   98,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   96,  100,   96,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   96,   96,   96,  101,  102,  103,
      102,  102,  101,  101,  101,  104,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  105,  101,  101,  101,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  101,  107,  101,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  101,  101,  108,  109,  109,  110,  109,  109,
      109,  111,  109,  109,  109,  109,  109,  227,  109,  235,
      109,  113, 1094,  243,  113,  109,  109,  109,  190,  204,
      191,  205,  204,  461,  205,  244,  491,  192,  460,  236,
      493,  472,  193,  109,  114,  109,  470,  512,  194,  206,

      471, 1094,  206,  334,  228,  508,  236,  336,  508,  334,
      245,  337,  338,  336,  337,  195,  207, 1267,  512,  207,
      109,  109,  109,  109,  109,  110,  109,  109,  109,  111,
      109,  109,  109,  109,  109,  209,  109,  210,  109,  113,
      235,  243,  113,  109,  109,  109,  209,  235,  210,  221,
      235,  339,  517,  244, 1094,  210,  222,  223,  513,  505,
      236,  109,  114,  109, 1094,  523,  210,  237,  523,  224,
      237,  517,  211,  378,  378,  378,  378,  236,  245,  513,
      379, 1266,  512,  211,  237,  504,  225,  237,  109,  109,
      109,  115,  115,  116,  115,  115,  115,  117,  115,  115,

      115,  115,  115,  512,  115,  247,  115,  119,  247, 1265,
      119,  120,  115,  115,  248,  251,  252,  248,  251, 1284,
      327, 1253,  491,  327,  523,  249,  493,  523,  249,  115,
      121,  115,  523,  328,  329,  523,  328,  340,  340,  340,
      340,  452,  250,  327,  452,  250,  453, 1284,  327,  523,
      491,  327,  523,  253,  493,  341,  115,  115,  115,  115,
      115,  116,  115,  115,  115,  117,  115,  115,  115,  115,
      115,  327,  115,  330,  115,  119,  537,  538,  119,  120,
      115,  115,  256,  258,  256,  256,  340,  340,  340,  340,
      541,  527,  257,  340,  340,  340,  340,  115,  121,  115,

      369,  369,  369,  369,  341,  369,  369,  369,  369,  260,
      560,  341,  420,  420,  420,  420, 1252,  676,  370,  421,
      676, 1271, 1251,  370,  115,  115,  115,  101,  122,  123,
      122,  122,  101,  101,  101,  124,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  125,  101,  101,  101,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  101,  107,  101,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  101,  101,  127,  128,  128,  129,  128,  128,

      128,  128,  128,  130,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  128,  132,  128,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      128,  128,  128,  141,  141,  142,  141,  141,  141,  143,
      141,  141,  141,  141,  141,  560,  141,  523,  141,  145,
      523, 1250,  145,  141,  141,  141,  322,  323, 1259,  322,
      355,  356,  523,  514,  356,  523,  514,  256,  258,  256,

      256,  141,  146,  141, 1284,  560, 1240,  257,  340,  340,
      340,  340, 1281,  515,  356,  342,  347,  348,  557,  347,
      523, 1284,  356,  523,  260,  356,  341,  516,  141,  141,
      141,  141,  141,  142,  141,  141,  141,  143,  141,  141,
      141,  141,  141,  512,  141,  356,  141,  145,  558,  516,
      145,  141,  141,  141,  362,  363,  349,  442,  363, 1249,
      364, 1284,  363,  658,  512,  363,  443, 1284, 1248,  141,
      146,  141,  322,  323,  344,  322,  320,  523,  363,  320,
      523,  256,  532,  256,  256,  363,  256,  256, 1198,  659,
      321,  257,  322,  323,  444,  322,  141,  141,  141,  147,

      147,  148,  147,  147,  147,  147,  147,  149,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  147,  151,  147,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  147,  147,  147,  152,  153,  154,
      153,  153,  152,  152,  152,  155,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  156,  152,  152,  152,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  152,  158,  152,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  152,  152,  159,  160,  160,  161,  160,  160,
      160,  160,  160,  162,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  160,  164,  160,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      160,  160,  160,   76,   76,  165,   76,   76,   76,   76,
       76,  166,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,   76,  168,   76,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,   76,   76,
       76,  172,  172,  173,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  172,
      175,  172,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  172,  172,  172,   76,
       76,  181,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   76,  183,   76,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  182,  182,  182,   76,   76,   76,  199,  199,  200,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  199,  202,  199,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  199,  199,  199,  215,  215,  216,  215,  215,
      215,  215,  215,  217,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  215,  219,  215,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      215,  215,  215,  229,  229,  230,  229,  229,  229,  229,
      229,  231,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  229,  233,  229,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  229,  229,
      229,  238,  238,  239,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  238,
      241,  238,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  238,  238,  238,  261,
      357,  358,  512,  357,  375,  369,  369,  375,  383,  384,
      262,  383,  376,  523, 1284,  356,  523,  673,  356, 1232,

      263,  512,  370,  264,  265, 1231,  514,  266,  267,  514,
      268,  269,  365,  396,  397, 1230,  673,  397,  356,  263,
      359, 1284,  363,  264,  265,  363,  515, 1284,  385,  266,
      267,  270,  271,  268,  269,  272,  272,  397,  547, 1229,
     1228, 1227, 1284,  397,  523,  363,  397,  523,  272,  272,
      273,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  397,  275, 1226,  274,
      276,  277,  278,  279,  280,  281,  274,  282,  283,  274,
      284,  285,  286,  274,  287,  288,  289,  290,  291,  292,
      293,  294,  274,  295,  296,  297,  272,  272,  328,  329,

      524,  328,  525,  526,  596,  523, 1222,  596,  523,  272,
      272,  275,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  596,  273, 1217,
      300,  301,  302,  303,  304,  305,  306,  299,  307,  308,
      299,  309,  310,  311,  299,  312,  313,  314,  315,  316,
      317,  318,  319,  299,  295,  296,  297,  366,  367,  528,
      366,  369,  369,  369,  369,  806,  388,  389,  371,  388,
     1208, 1284,  363,  398,  399,  363,  398, 1284,  523,  370,
     1203,  523,  402,  402,  402,  402,  806, 1284,  397,  403,
      560,  397, 1199,  407,  408,  363,  407,  368,  404,  404,

      405,  410,  410,  410,  410, 1278,  390,  410,  410,  410,
      410,  397, 1198,  400,  410,  410,  410,  410,  560,  411,
     1197,  412, 1282,  417,  418,  411,  417,  373,  410,  410,
      410,  410,  411,  409,  426,  427,  536,  426,  432,  433,
      512,  432,  436,  437, 1196,  436,  411,  445,  445,  462,
      463,  252,  462,  466,  467,  523,  466, 1195,  523,  512,
      445,  445,  446,  419,  475,  476,  523,  475,  442,  523,
      480,  481,  523,  480,  428,  523, 1194,  443,  434,  445,
      414, 1193,  438,  484,  485, 1192,  484,  251,  252,  464,
      251,  487,  488,  468,  487,  251,  252, 1191,  251,  523,

      523, 1190,  523,  523,  477,  444,  533,  445,  447,  448,
      482,  447,  702,  529,  445,  445,  523,  530,  689,  523,
     1189,  523, 1188,  486,  523,  253,  531,  445,  445,  445,
     1187,  489,  560,  253,  523,  523,  534,  523,  523,  523,
      523,  539,  523,  523,  337,  338,  446,  337,  449,  540,
     1283,  523,  523,  523,  523,  523,  523,  542,  523, 1186,
     1184,  523,  544,  535,  523, 1183, 1182,  523,  523,  523,
      543,  523,  523, 1181,  445,  545,  548,  546,  523,  552,
      549,  523,  553,  523,  550,  556,  523, 1180,  554,  560,
      560,  560,  555, 1179,  551,  523,  560,  523,  523, 1178,

      523, 1177,  560,  561,  533,  523,  560,  560,  523,  562,
      567,  563,  564, 1176,  568, 1094,  560,  565,  566,  523,
     1174,  560,  523,  569,  574,  523,  523, 1173,  523,  523,
      570, 1172,  575,  560,  534,  560,  571,  523,  523,  523,
      523,  523,  523,  560, 1171, 1170,  576,  572,  573, 1169,
      523,  523,  523,  523,  523,  523,  523,  560, 1168,  523,
      577,  535,  523,  560,  560,  523,  579,  340,  340,  340,
      340,  582, 1167,  578, 1166,  560,  560,  560,  583,  580,
      523,  581,  584,  523,  587,  341,  585,  588,  560,  560,
      560,  590,  592,  589, 1164,  591,  586,  326,  327, 1284,

      327,  327, 1163,  327,  523,  326,  327,  523,  593,  327,
      340,  340,  340,  340,  680,  350,  350,  350,  350, 1162,
      681,  327,  351,  327,  347,  348, 1159,  347,  341,  327,
      600,  600,  600,  600, 1158,  685,  583,  342,  340,  340,
      340,  340,  597,  350,  350,  350,  350,  548,  341, 1121,
      351, 1284, 1284, 1284, 1284, 1120,  341, 1119, 1284,  355,
      356,  605,  684,  356,  605, 1284,  356,  357,  358,  356,
      357,  355,  356,  362,  363,  356, 1118,  363,  609,  364,
     1117,  609, 1116,  356,  605,  613, 1284,  363,  613,  356,
      363,  523, 1284,  376,  523,  356,  344,  363, 1115,  366,

      367,  609,  366,  362,  363, 1114, 1113,  363,  606,  364,
      363,  369,  369,  369,  369,  375,  369,  369,  375,  378,
      378,  378,  378,  376, 1112, 1111,  379,  363,  620,  370,
     1110,  620, 1109,  370,  611,  611,  611,  611,  679, 1108,
      610,  371,  375,  369,  369,  375,  375,  369,  369,  375,
      376,  620,  370, 1107,  376,  378,  378,  378,  378, 1104,
      370, 1103,  379, 1102,  370, 1284, 1284, 1284, 1284, 1101,
      383,  384, 1284,  383,  388,  389, 1100,  388,  396,  397,
     1284,  397,  397, 1099,  397,  398,  399, 1098,  398,  396,
      397, 1097, 1096,  397,  402,  402,  402,  402, 1095, 1094,

      373,  403,  397, 1093,  397,  402,  402,  402,  402, 1092,
      404,  404,  405,  397,  402,  402,  402,  402, 1091,  407,
      408,  403,  407,  405,  417,  418,  621,  417, 1090, 1089,
      404,  404,  405,  402,  402,  402,  402, 1088, 1087, 1086,
      403,  410,  410,  410,  410,  410,  410,  410,  410,  624,
      624,  405, 1085,  420,  420,  420,  420, 1084,  523,  411,
      421,  523, 1082,  411,  627,  627,  627,  627, 1081, 1080,
     1077,  412,  410,  410,  410,  410,  420,  420,  420,  420,
     1076, 1027,  411,  421, 1284, 1284, 1284, 1284, 1026, 1025,
      411, 1284,  426,  427, 1024,  426,  432,  433,  667,  432,

      436,  437,  683,  436,  447,  448, 1023,  447,  462,  463,
     1022,  462,  466,  467, 1021,  466,  475,  476, 1020,  475,
      480,  481, 1019,  480,  484,  485, 1018,  484,  487,  488,
      414,  487,  672,  676,  523,  672,  676,  523,  523,  523,
      677,  523,  523,  523,  523,  523,  523,  523,  523, 1017,
      523,  523,  515,  523,  523,  523,  613,  523,  523,  613,
      523, 1016,  799,  676,  376,  799,  676, 1015, 1014,  613,
      677,  523,  613,  523,  523,  523,  523,  376,  523,  523,
      687,  682,  523,  523,  690,  523,  523,  691,  523,  523,
     1013,  523,  523,  710,  523,  703,  686,  677,  707, 1012,

      708,  713,  692,  694,  693,  695,  696,  695,  695,  696,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  698,  700,
      711,  699,  523,  523,  523,  523,  523,  523,  709,  701,
      704,  705, 1011,  695,  695,  695, 1010,  706,  523,  714,
     1008,  523,  523,  523,  523,  523,  523,  523,  523,  697,
      523,  523,  523,  523,  523,  523,  523,  523, 1007,  523,
      695,  695,  695,  523,  523,  523,  523,  523,  523,  523,
     1006,  523,  523,  523,  523, 1005,  523, 1004,  712,  715,
      716,  560,  560,  717,  523, 1003,  560,  523,  560,  819,

      560,  720,  719,  523,  560,  523,  523, 1002,  523,  723,
      724,  560,  560,  560, 1001,  818,  721,  560,  722,  560,
      728,  560,  730,  696,  672,  799,  696,  672,  799,  726,
     1000,  725,  560,  727,  999,  729,  523,  731,  998,  523,
      997,  560,  523,  560,  515,  523,  523,  523,  523,  523,
      523,  523,  732,  523,  733,  996,  523,  523,  737,  995,
      523,  734,  695,  696,  695,  695,  696,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  560,  560,  523,  816,  523,
      523,  560,  523,  523,  810,  560,  523,  994,  814,  738,

      695,  735,  695,  993,  523,  523,  739,  523,  523,  740,
      523,  992,  523,  523,  741,  523,  736,  523,  523,  523,
      523,  523,  523,  523,  991,  560,  523,  695,  695,  695,
      523,  560,  742,  523,  809,  523,  523,  523,  523,  523,
      523,  990,  560,  560,  743,  744,  989,  746,  560,  747,
      560,  745,  749,  988,  984,  560,  560,  560,  748,  326,
      596,  560,  752,  596,  983,  982, 1284,  596,  560,  750,
      596,  326,  327,  751,  560,  327,  979,  753,  978,  754,
      679,  756,  813,  596,  355,  605,  755,  921,  605,  920,
      596,  600,  600,  600,  600,  327, 1284,  605,  342,  919,

      605,  355,  356,  918,  523,  356,  757,  523,  605,  341,
      362,  609,  523,  667,  609,  523,  364, 1284,  609,  523,
      605,  609,  523, 1284,  916,  356,  362,  363,  523,  915,
      363,  523,  364,  914,  609,  913,  760,  611,  611,  611,
      611,  609,  396,  620,  371,  912,  620, 1284,  620,  821,
      363,  620,  396,  397,  911,  370,  397,  344,  840,  910,
      909,  761,  402,  402,  402,  402,  620,  908,  907,  767,
      820,  620,  523,  823,  523,  523,  397,  523,  768,  768,
      405,  770,  770,  770,  770,  906,  905,  766,  403,  402,
      402,  402,  402,  904,  523,  523,  403,  523,  523,  405,

      903,  523,  902,  373,  523,  624,  624,  405,  402,  402,
      402,  402,  901,  822,  900,  403,  627,  627,  627,  627,
      891,  890,  889,  412,  624,  624,  405,  523,  825,  523,
      523,  888,  523,  523,  411,  523,  523,  887,  523,  824,
      824,  402,  402,  402,  402,  886,  826,  885,  767,  402,
      402,  402,  402,  884,  424,  883,  767,  768,  768,  405,
      812,  882,  879,  812,  878,  768,  768,  405,  828,  877,
      829,  664,  874,  560,  664,  664,  833,  873,  858,  847,
      842,  560,  414,  695,  696,  695,  695,  696,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  695,  695,  695,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  695,  695,
      695,  811,  812,  811,  811,  812,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  523,  523,  827,  523,  523,  523,
      817,  523,  523,  523,  523,  523,  523,  815,  523,  811,
      811,  811,  523,  523,  523,  523,  523,  523,  808,  523,

      523,  807,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  811,  811,  811,  515,
      805,  804,  770,  770,  770,  770,  802,  523,  523,  403,
      523,  523,  826,  801,  830,  831,  837,  832,  834,  835,
      405,  682,  836,  560,  560,  939,  682,  523,  560,  560,
      523,  838,  839,  922,  843,  720,  845,  924,  841,  695,
      696,  695,  695,  696,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  923,  892,  893,  560,  930,  800,  894,  662,
      523,  895,  896,  523,  798,  797,  897,  695,  735,  695,

      898,  796,  899,  846,  523,  795,  523,  523,  523,  523,
      794,  523,  523,  523,  793,  523,  523,  523,  523,  523,
      523,  523,  523,  792,  695,  695,  695,  811,  812,  811,
      811,  812,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      560,  560,  933,  925,  826,  560,  560,  560,  523,  523,
      850,  523,  523,  926,  848,  811,  844,  811,  849,  851,
      523,  791,  790,  523,  326,  327,  664,  857,  327,  664,
      664,  788,  787,  786,  785,  523,  523,  523,  523,  523,
      523,  784,  811,  811,  811,  783,  560,  560,  327,  782,

      853,  523,  523,  852,  523,  523,  523,  523,  560,  523,
      523,  523,  781,  872,  523,  854,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  560,
      560,  931,  932,  937,  560,  560,  855,  855,  523,  560,
      523,  523,  857,  523,  695,  695,  695,  780,  523,  523,
      856,  523,  523,  523,  523,  523,  523,  523,  523,  778,
      861,  862,  523,  523,  777,  523,  523,  523,  776,  775,
      523,  695,  695,  695,  523,  774,  560,  523,  560,  859,
      523,  860,  523,  523,  424,  523,  560,  560,  772,  771,

      765,  560,  864,  560,  523,  355,  356,  523,  764,  356,
      560,  560,  763,  940,  762,  560,  863,  396,  397,  868,
      865,  397,  560,  723,  364,  759,  866,  723,  560,  356,
      560,  362,  363,  867,  869,  363,  523,  364,  871,  523,
      758,  397,  523,  870,  875,  523,  523,  523,  523,  523,
      523,  523,  299,  927,  523,  363,  880,  523,  928,  523,
      523,  523,  523,  523,  523,  523,  523,  274,  523,  523,
      876,  675,  674,  523,  523,  523,  523,  523,  523,  523,
      523,  929,  523,  523,  670,  326,  327,  523,  523,  327,
      523,  523,  669,  935,  668,  934,  667,  666,  826,  708,

      665,  663,  660,  657,  938,  936,  941,  944,  523,  327,
      943,  523,  656,  560,  946,  945,  977,  560,  560,  491,
      942,  943,  947,  948,  949,  560,  523,  523,  950,  523,
      523, 1029,  952,  655,  951,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  523,  523,
      523,  523,  523,  523,  560,  560, 1028,  523,  523,  523,
      523,  523,  523,  811,  811,  811,  953,  523,  654,  523,
      523,  954,  523,  523,  523,  653,  523,  523,  523,  523,
      523,  523,  523,  523,  652,  651,  560,  560,  560,  650,

      811,  811,  811,  649,  957,  560,  560,  955,  523,  648,
      523,  523,  956,  523,  645,  560,  644,  560,  643,  958,
      642,  560,  560,  959,  960,  679,  560,  560,  560,  641,
      963,  967,  962,  523,  523,  857,  523,  523,  523,  961,
      523,  523,  964,  523,  965,  966,  560,  523,  560,  523,
      523,  523,  523,  523,  523,  747,  523,  968,  455,  523,
      523,  523,  523,  523,  523,  523,  455,  640,  523,  355,
      356,  560,  560,  356,  523,  639,  560,  523,  969,  523,
      362,  363,  523,  637,  363,  560,  364,  560,  972,  971,
      449,  560,  970,  356, 1037,  971,  973,  560,  974,  444,

      980, 1041,  975,  636,  363,  396,  397,  523,  976,  397,
      523,  981, 1030, 1032,  402,  402,  402,  402, 1033,  523,
      635,  767,  523, 1034,  523, 1031,  634,  523,  430,  397,
      986,  986,  405,  633,  523,  523,  985,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  430,  523,  523,
     1035,  523,  523,  632,  523,  424,  523,  523, 1036,  523,
      523,  630,  424,  523,  523, 1038,  523,  523,  523,  523,
     1040,  523,  523,  523,  523,  523,  523,  523, 1044, 1045,
     1039,  548, 1042,  523,  628, 1043,  523,  560,  415,  626,

      523, 1051,  560,  523, 1046, 1047,  623, 1048,  560, 1050,
      523, 1049,  560,  523,  560, 1122,  560, 1053,  618,  617,
      560,  560, 1052,  392,  616,  523,  720, 1054,  523, 1055,
      523,  560,  387,  523,  615, 1056, 1057, 1058,  560,  523,
      523, 1132,  523,  523,  523,  374,  523,  523,  560,  523,
     1284,  523,  523, 1059,  523,  523,  607,  523,  523, 1060,
      523,  523,  523,  560,  603,  523,  601,  523,  560,  523,
      523,  523,  523,  523,  523,  345,  523,  560,  560, 1061,
      523, 1062,  560,  523,  560, 1064,  599,  334,  523,  560,
      560,  523,  598,  332, 1065, 1063,  560,  594, 1123, 1066,

      560, 1068,  583,  522, 1069,  560, 1067,  560,  519,  560,
      518,  560,  326,  327,  523,  509,  327,  523,  560,  355,
      356,  257, 1071,  356, 1073, 1070,  257, 1072,  362,  363,
      255,  506,  363,  813,  364,  504,  327,  502, 1074,  501,
     1075,  396,  397,  356,  499,  397,  523, 1078,  523,  523,
      523,  523,  363,  523,  497, 1127, 1079,  402,  402,  402,
      402,  496,  494,  523,  767,  397,  523,  523,  523, 1083,
      523,  523,  474,  986,  986,  405,  402,  402,  402,  402,
      460,  523,  523,  767,  523,  523,  523,  523,  459,  523,
      523,  813,  986,  986,  405, 1126,  458,  523,  456, 1125,

      523,  523,  523,  455,  523,  523, 1124,  523, 1128,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523, 1129,  523, 1130,  523,  523,  451,  523,  523,  523,
     1131,  523,  523,  523,  523,  523,  523,  444,  523,  523,
      548,  440,  523, 1131,  824,  523,  523,  430,  523,  523,
     1136, 1135,  424,  560,  415, 1133, 1138,  560, 1134,  393,
     1137,  523, 1137,  560,  523,  392, 1141,  560, 1140,  560,
      387, 1139,  523,  560,  845,  523,  845,  560, 1142,  523,
      929, 1256,  523,  560,  560,  523, 1145, 1200,  523,  523,
     1143, 1144,  523,  523,  523,  374,  523,  523,  523,  560,

      523,  523, 1146,  523,  523,  523,  523,  523,  523,  523,
      560,  345,  332,  523,  257,  523,  523,  560,  523,  523,
      255,  523,  523,  560,  523, 1147, 1148,  560, 1284,   95,
       95,  560,  560, 1149,  523, 1284,  560,  523,  560, 1284,
     1284, 1284,  855,  560,  560,  523, 1149,  583,  523, 1154,
     1150,  560, 1284,  560, 1153, 1202, 1151, 1152,  523,  326,
      327,  523, 1155,  327,  355,  356, 1155, 1284,  356,  362,
      363,  943,  560,  363, 1205,  364,  396,  397,  523, 1156,
      397,  523,  523,  327,  523,  523,  523,  523,  356,  523,
     1284,  523,  523,  363,  523,  523, 1212,  252, 1284, 1212,

      397, 1157,  523, 1201, 1284,  523, 1160,  523, 1284, 1204,
      523, 1161,  523,  523, 1284,  523,  523,  523, 1165,  523,
      523, 1284,  523,  523,  523, 1284,  523,  523, 1284, 1206,
     1284, 1210,  523, 1209, 1213,  523,  523, 1207,  523,  523,
      560,  523, 1211, 1284,  682,  560,  523, 1284, 1284,  523,
      560,  560, 1284, 1284, 1284,  560, 1214,  560, 1284, 1284,
     1284,  560,  560, 1216,  523, 1215,  523,  523, 1218,  523,
      560, 1284, 1219, 1284, 1220,  523,  957,  523,  523, 1221,
      523, 1223,  326,  327,  560, 1235,  327,  523,  355,  356,
      523, 1224,  356,  523,  362,  363,  523, 1234,  363, 1284,

      364, 1284,  560, 1284,  560, 1284,  327,  396,  397, 1284,
     1284,  397,  356,  560, 1284, 1284,  971, 1225,  363,  523,
      523,  523,  523,  523,  523,  523,  523,  723,  523,  523,
      679,  397, 1233, 1284, 1212,  252,  523, 1212,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523, 1284,  523,
      523, 1204,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523, 1238,  523,
      523, 1236,  253,  523,  560, 1237,  560, 1284,  560, 1284,
      560, 1284,  824, 1241,  560, 1239, 1284, 1284,  560,  720,
      560, 1243,  560, 1284,  560, 1284,  560, 1255,  560, 1242,

      857, 1246, 1284, 1284, 1218, 1244,  682, 1284, 1254,  523,
     1245,  523,  523,  855,  523, 1284, 1284,  523,  523, 1247,
      523,  523,  523,  708, 1257,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
     1284,  523,  523,  523,  523,  523,  523,  523,  523,  560,
     1284, 1284, 1284, 1258,  523,  723,  560,  523,  523, 1284,
      560,  523, 1260, 1284,  560,  560,  560, 1284, 1284,  523,
      560, 1269,  523, 1284,  523, 1261, 1264,  523,  929, 1268,
      747,  560,  560, 1262, 1137, 1284, 1263, 1270,  957, 1272,
      523,  523,  560,  523,  523, 1284,  560,  523, 1276,  523,

      523,  523,  523,  523,  523, 1284,  523, 1274, 1273, 1284,
      251,  252,  560,  251, 1284, 1284, 1284, 1284, 1284, 1155,
     1284, 1284, 1284, 1277, 1284, 1284, 1284, 1284,  560,  560,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  560,
     1284,  560, 1284, 1279, 1284, 1280, 1284, 1284, 1213, 1284,
     1284, 1204,  708, 1284, 1284, 1218,  747,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  254,  254, 1284,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  256,
     1284,  256,  256, 1284,  256, 1284, 1284,  256,  256, 1284,
      256,  256,  256,  259,  259,  259,  259, 1284,  259, 1284,
     1284,  259,  259,  259,  259,  259,  259,  298, 1284,  298,
      298, 1284,  298, 1284, 1284,  298,  298, 1284,  298,  298,
      298,  324,  324, 1284,  324,  324, 1284,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  325, 1284,  325,

      325,  325,  325,  325, 1284, 1284,  325,  325,  325,  325,
      325,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  333, 1284,  333,
      333,  333,  335, 1284,  335,  335, 1284, 1284,  335, 1284,
      335,  335,  335,  343,  343,  343,  343, 1284,  343, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  343, 1284,
     1284,  343, 1284,  343,  343,  343, 1284,  343,  346,  346,
      346,  346, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284,  346,  346, 1284, 1284,  346, 1284,  346,  346,

      346,  352,  352,  352,  352, 1284,  352, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  352,
     1284,  352,  352,  352,  353,  353, 1284,  353,  353, 1284,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354, 1284,  354,  354,  354,  354,  354, 1284, 1284,  354,
      354,  354,  354,  354,  360,  360, 1284,  360,  360, 1284,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      361, 1284,  361,  361,  361,  361,  361,  361, 1284,  361,

      361,  361,  361,  361,  372,  372,  372,  372, 1284,  372,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  372,
     1284, 1284,  372, 1284,  372,  372,  372, 1284,  372,  377,
      377,  377,  377, 1284, 1284,  377, 1284, 1284, 1284, 1284,
     1284, 1284, 1284,  377,  377, 1284, 1284,  377, 1284,  377,
      377,  377,  380,  380,  380,  380, 1284,  380, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
      380, 1284,  380,  380,  380,  381, 1284,  381,  381,  381,
      382, 1284, 1284, 1284,  382, 1284,  382,  382,  382,  386,
      386, 1284,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  391,  391, 1284,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  394,  394, 1284,  394,  394, 1284,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  395, 1284,  395,
      395,  395,  395,  395, 1284, 1284,  395,  395,  395,  395,
      395,  401, 1284,  401,  401,  401,  406,  406,  406,  406,
     1284,  406, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

      406,  406, 1284, 1284,  406, 1284,  406,  406,  406,  413,
      413,  413,  413, 1284,  413, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284,  413, 1284, 1284,  413, 1284,  413,
      413,  413, 1284,  413,  416,  416,  416,  416, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  416,  416,
     1284, 1284,  416, 1284,  416,  416,  416,  422,  422,  422,
      422, 1284,  422, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284,  422, 1284,  422,  422,  422,
      423, 1284,  423,  423,  423,  425, 1284,  425, 1284, 1284,
     1284,  425, 1284,  425,  425,  425,  429, 1284,  429,  429,

      429,  431, 1284,  431, 1284, 1284, 1284,  431, 1284,  431,
      431,  431,  435,  435, 1284,  435,  435,  435,  435,  435,
      435, 1284,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435, 1284,  435,  435,  435,  435,  435,  439, 1284,
     1284,  439, 1284, 1284, 1284,  439, 1284,  439,  439,  439,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441, 1284,  441,
      441,  441,  441,  441,  441,  441,  443,  443, 1284,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443, 1284,  443,  443,  443,  443,  443,

      443,  443,  450, 1284, 1284,  450, 1284, 1284, 1284,  450,
     1284,  450,  450,  450,  454,  454, 1284,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      457,  457, 1284,  457, 1284,  457,  457,  457,  457, 1284,
      457,  457,  457,  457, 1284,  457,  457,  457, 1284,  457,
     1284,  457,  457,  457,  457,  457,  465, 1284, 1284,  465,
     1284, 1284, 1284,  465, 1284,  465,  465,  465,  469,  469,
     1284,  469, 1284,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469, 1284,  469, 1284,  469,

      469,  469,  469,  469,  473,  473, 1284,  473, 1284,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473, 1284,  473, 1284,  473,  473,  473,  473,  473,
      478, 1284,  478,  478,  478,  479, 1284, 1284, 1284,  479,
     1284,  479,  479,  479,  483,  483, 1284,  483,  483,  483,
      483, 1284, 1284,  483,  483,  483,  483,  483,  483,  483,
      483,  483, 1284,  483, 1284,  483,  483,  483,  483,  483,
      490, 1284,  490,  490,  490,  492, 1284,  492,  492, 1284,
     1284,  492, 1284,  492,  492,  492,  495,  495, 1284,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,

      495,  495,  495,  495, 1284,  495, 1284,  495,  495,  495,
      495,  495,  498, 1284, 1284,  498, 1284, 1284, 1284,  498,
     1284,  498,  498,  498,  500,  500, 1284,  500,  500,  500,
      500,  500,  500,  500,  500,  500, 1284,  500,  500,  500,
      500,  500,  500,  500, 1284,  500,  500,  500,  500,  500,
      503,  503, 1284,  503,  503,  503,  503,  503,  503, 1284,
      503,  503,  503,  503,  503,  503,  503,  503, 1284,  503,
     1284,  503,  503,  503,  503,  503,  254,  254, 1284,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  256, 1284,  256,  256, 1284,  256, 1284, 1284,
      256,  256, 1284,  256,  256,  256,  507, 1284, 1284,  507,
     1284, 1284, 1284,  507, 1284,  507,  507,  507,  520, 1284,
      520,  520,  520, 1284,  520,  274, 1284, 1284,  274, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284,  274, 1284,  274,  274,  274,  559, 1284,
      559,  559,  559,  298, 1284,  298,  298, 1284,  298, 1284,
     1284,  298,  298, 1284,  298,  298,  298,  299, 1284, 1284,
      299, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284,  299,  299,  299,  299,  299,

      324,  324, 1284,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  325, 1284,  325,  325,
      325,  325,  325, 1284, 1284,  325,  325,  325,  325,  325,
      595, 1284,  595, 1284,  595,  595,  595, 1284, 1284,  595,
      595,  595,  595,  595,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      335, 1284,  335,  335, 1284, 1284,  335, 1284,  335,  335,
      335,  333, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284,  333, 1284,  333,  333,  333,  343,
     1284,  343,  343,  343,  346,  346,  346,  346, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  346,  346,
     1284, 1284,  346, 1284,  346,  346,  346,  352,  352,  352,
      352, 1284,  352, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284,  352, 1284,  352,  352,  352,
      602, 1284, 1284, 1284,  602, 1284,  602,  602,  602,  353,
      353, 1284,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  354, 1284,  354,  354,  354,

      354,  354, 1284, 1284,  354,  354,  354,  354,  354,  604,
     1284,  604, 1284,  604,  604,  604, 1284, 1284,  604,  604,
      604,  604,  604,  360,  360, 1284,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  361,
     1284,  361,  361,  361,  361,  361,  361, 1284,  361,  361,
      361,  361,  361,  608, 1284,  608, 1284,  608,  608,  608,
     1284, 1284,  608,  608,  608,  608,  608,  372, 1284,  372,
      372,  372,  377,  377,  377,  377, 1284, 1284,  377, 1284,
     1284, 1284, 1284, 1284, 1284, 1284,  377,  377, 1284, 1284,

      377, 1284,  377,  377,  377,  380,  380,  380,  380, 1284,
      380, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284,  380, 1284,  380,  380,  380,  612,  612,
      612,  612,  612,  612,  612,  612, 1284,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  614, 1284, 1284,  614, 1284, 1284,
      614, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  614, 1284,
     1284, 1284,  614, 1284,  614,  614,  614,  382, 1284, 1284,
     1284,  382, 1284,  382,  382,  382,  386,  386, 1284,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  391,  391, 1284,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  394,  394,
     1284,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  395, 1284,  395,  395,  395,  395,
      395, 1284, 1284,  395,  395,  395,  395,  395,  619, 1284,
      619, 1284,  619,  619,  619, 1284, 1284,  619,  619,  619,
      619,  619,  406,  406,  406,  406, 1284,  406, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284,  406,  406, 1284, 1284,
      406, 1284,  406,  406,  406,  622, 1284,  622,  622,  622,
      625,  625,  625,  625, 1284,  625, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284,  625,  625, 1284, 1284,  625, 1284,
      625,  625,  625,  413, 1284,  413,  413,  413,  416,  416,
      416,  416, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284,  416,  416, 1284, 1284,  416, 1284,  416,  416,
      416,  422,  422,  422,  422, 1284,  422, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  422,
     1284,  422,  422,  422,  629, 1284, 1284, 1284,  629, 1284,

      629,  629,  629,  425, 1284,  425, 1284, 1284, 1284,  425,
     1284,  425,  425,  425,  631, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284,  631, 1284,  631,
      631,  631,  431, 1284,  431, 1284, 1284, 1284,  431, 1284,
      431,  431,  431,  435,  435, 1284,  435,  435,  435,  435,
      435,  435, 1284,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435, 1284,  435,  435,  435,  435,  435,  439,
     1284, 1284,  439, 1284, 1284, 1284,  439, 1284,  439,  439,
      439,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441, 1284,

      441,  441,  441,  441,  441,  441,  441,  443,  443, 1284,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443, 1284,  443,  443,  443,  443,
      443,  443,  443,  638, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284,  638, 1284,  638,  638,
      638,  450, 1284, 1284,  450, 1284, 1284, 1284,  450, 1284,
      450,  450,  450,  454,  454, 1284,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  457,
      457, 1284,  457, 1284,  457,  457,  457,  457, 1284,  457,

      457,  457,  457, 1284,  457,  457,  457, 1284,  457, 1284,
      457,  457,  457,  457,  457,  465, 1284, 1284,  465, 1284,
     1284, 1284,  465, 1284,  465,  465,  465,  469,  469, 1284,
      469, 1284,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469, 1284,  469, 1284,  469,  469,
      469,  469,  469,  473,  473, 1284,  473, 1284,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473, 1284,  473, 1284,  473,  473,  473,  473,  473,  479,
     1284, 1284, 1284,  479, 1284,  479,  479,  479,  483,  483,
     1284,  483,  483,  483,  483, 1284, 1284,  483,  483,  483,

      483,  483,  483,  483,  483,  483, 1284,  483, 1284,  483,
      483,  483,  483,  483,  492, 1284,  492,  492, 1284, 1284,
      492, 1284,  492,  492,  492,  490, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  490, 1284,
      490,  490,  490,  495,  495, 1284,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495, 1284,  495, 1284,  495,  495,  495,  495,  495,  498,
     1284, 1284,  498, 1284, 1284, 1284,  498, 1284,  498,  498,
      498,  500,  500, 1284,  500,  500,  500,  500,  500,  500,
      500,  500,  500, 1284,  500,  500,  500,  500,  500,  500,

      500, 1284,  500,  500,  500,  500,  500,  503,  503, 1284,
      503,  503,  503,  503,  503,  503, 1284,  503,  503,  503,
      503,  503,  503,  503,  503, 1284,  503, 1284,  503,  503,
      503,  503,  503,  507,  507, 1284,  507, 1284, 1284, 1284,
      507, 1284,  507,  507,  507,  671,  671, 1284,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  520, 1284, 1284,  520, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  520,
     1284,  520,  520,  520,  678, 1284,  678,  678,  678,  274,

     1284, 1284,  274, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284,  274, 1284,  274,
      274,  274,  688,  688, 1284,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688, 1284,  688,  559, 1284,
      559,  559,  559,  718, 1284,  718,  718,  718,  299, 1284,
     1284,  299, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284,  299,  299,  299,  299,
      299,  595, 1284,  595,  595,  595,  595,  595, 1284, 1284,
      595,  595,  595,  595,  595,  325, 1284,  325,  325,  325,

      325,  325, 1284, 1284,  325,  325,  325,  325,  325,  333,
     1284,  333,  333,  333,  343,  343,  343,  343, 1284,  343,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  343,
     1284, 1284,  343, 1284,  343,  343,  343, 1284,  343,  602,
     1284, 1284, 1284,  602, 1284,  602,  602,  602,  604, 1284,
      604,  604,  604,  604,  604, 1284, 1284,  604,  604,  604,
      604,  604,  354, 1284,  354,  354,  354,  354,  354, 1284,
     1284,  354,  354,  354,  354,  354,  608, 1284,  608,  608,
      608,  608,  608,  608, 1284,  608,  608,  608,  608,  608,
      361, 1284,  361,  361,  361,  361,  361,  361, 1284,  361,

      361,  361,  361,  361,  372,  372,  372,  372, 1284,  372,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  372,
     1284, 1284,  372, 1284,  372,  372,  372, 1284,  372,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  614, 1284, 1284,  614, 1284,
     1284,  614, 1284, 1284, 1284, 1284, 1284, 1284, 1284,  614,
     1284, 1284, 1284,  614, 1284,  614,  614,  614,  619, 1284,
      619,  619,  619,  619,  619, 1284, 1284,  619,  619,  619,
      619,  619,  395, 1284,  395,  395,  395,  395,  395, 1284,

     1284,  395,  395,  395,  395,  395,  769,  769,  769,  769,
     1284,  769, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
      769,  769, 1284, 1284,  769, 1284,  769,  769,  769,  622,
      622,  622,  622, 1284,  622, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284,  622, 1284, 1284,  622, 1284,  622,
      622,  622,  625,  625,  625,  625, 1284,  625, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284,  625,  625, 1284, 1284,
      625, 1284,  625,  625,  625,  413,  413,  413,  413, 1284,
      413, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
      413, 1284, 1284,  413, 1284,  413,  413,  413, 1284,  413,

      629, 1284, 1284, 1284,  629, 1284,  629,  629,  629,  631,
     1284,  631,  631,  631,  773, 1284,  773, 1284, 1284, 1284,
      773, 1284,  773,  773,  773,  638, 1284,  638,  638,  638,
      779, 1284, 1284, 1284,  779, 1284,  779,  779,  779,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789, 1284,  789,  789,  789, 1284,  789,
     1284, 1284,  789,  789,  789,  490, 1284,  490,  490,  490,
      803, 1284, 1284,  803, 1284, 1284, 1284,  803, 1284,  803,
      803,  803,  671,  671, 1284,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  678, 1284,
      678,  678,  678,  274, 1284, 1284,  274, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284,  274, 1284,  274,  274,  274,  688,  688, 1284,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695, 1284,  695, 1284, 1284, 1284,  695,  695,  718,  718,
      718,  718,  718,  299, 1284, 1284,  299, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284,  299,  299,  299,  299,  299,  325, 1284,  325,  325,
      325,  325,  325, 1284, 1284,  325,  325,  325,  325,  325,
      354, 1284,  354,  354,  354,  354,  354, 1284, 1284,  354,
      354,  354,  354,  354,  361, 1284,  361,  361,  361,  361,
      361,  361, 1284,  361,  361,  361,  361,  361,  881, 1284,
      881,  881,  881,  769,  769,  769,  769, 1284,  769, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284,  769,  769, 1284,
     1284,  769, 1284,  769,  769,  769,  622,  622,  622,  622,
     1284,  622, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284,  622, 1284, 1284,  622, 1284,  622,  622,  622,  917,
      917, 1284,  917, 1284, 1284, 1284,  917, 1284,  917,  917,
      917,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
     1284,  811, 1284, 1284, 1284,  811,  811,  987,  987,  987,
      987, 1284,  987, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284,  987,  987, 1284, 1284,  987, 1284,  987,  987,  987,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1284, 1009, 1009, 1009, 1284,
     1009, 1284, 1009, 1284, 1009, 1009, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1284, 1105, 1105, 1105, 1284, 1105, 1284, 1284, 1284,
     1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1284, 1106, 1106,
     1106, 1284, 1106, 1284, 1284, 1284, 1106, 1106, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1284, 1175, 1175, 1175, 1284, 1175, 1284,
     1284, 1284, 1175, 1175, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1284,
     1185, 1185, 1185, 1284, 1185, 1284, 1284, 1284, 1185, 1185,

       75, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284
    } ;

static yyconst flex_int16_t yy_chk[8270] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   47,   48,   24,
      264,   55,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,  501,    5,  264,    5,    5,

       56,   35,    5,    5,    5,    5,   21,   22,   36,   23,
       35,  501,   24,   86,   47,   48,   86,   36,   55,  264,
       99,    5,    5,    5,   99,  185,   39,   86,  185,  206,
      185,   43,   43,  206,   43,   39,   43,   56,   35,   44,
       44,  470,   44,  470,   44,   36,   39,   61,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   39,    6,   40,    6,    6,   59,   43,
        6,    6,    6,    6,   40,   59,   59,   44,   45, 1275,
       45,  273,   91,   91,   61,   40,   91,   45,   59,    6,
        6,    6,   45,  513,   84, 1267,   84,   84,   45,   84,

       84,  273,   40, 1266,   84,   59,   91,  108,  108,  108,
      108,  262,  262,  513,  108,   45,    6,    6,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   62,   13,   65,
       13,   13, 1265,   71,   13,   13,   13,   13,   46,   51,
       46,   51,   52,  195,   52,   71,  232,   46,  195,   65,
      232,  207,   46,   13,   13,   13,  207,  263,   46,   51,

      207, 1253,   52,  333,   62,  260,   65,  333,  260,  335,
       71,  100,  100,  335,  100,   46,   51, 1252,  263,   52,
       13,   13,   13,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   53,   14,   53,   14,   14,
       66,   72,   14,   14,   14,   14,   54,   67,   54,   60,
       68,  100,  268,   72, 1251,   53,   60,   60,  265,  250,
       66,   14,   14,   14, 1250,  274,   54,   67,  274,   60,
       68,  268,   53,  127,  127,  127,  127,   66,   72,  265,
      127, 1249,  266,   54,   67,  250,   60,   68,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,  266,   15,   73,   15,   15,   74, 1248,
       15,   15,   15,   15,   73,   78,   78,   74,   78,   92,
       92, 1231,  490,   92,  283,   73,  490,  283,   74,   15,
       15,   15,  277,   93,   93,  277,   93,  102,  102,  102,
      102,  452,   73,   92,  452,   74,  452,   93,   93,  285,
      492,   93,  285,   78,  492,  102,   15,   15,   15,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   93,   16,   93,   16,   16,  283,  283,   16,   16,
       16,   16,   81,   81,   81,   81,  103,  103,  103,  103,
      285,  277,   81,  106,  106,  106,  106,   16,   16,   16,

      122,  122,  122,  122,  103,  123,  123,  123,  123,   81,
     1259,  106,  159,  159,  159,  159, 1230,  520,  122,  159,
      520, 1259, 1229,  123,   16,   16,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25, 1240,   25,  293,   25,   25,
      293, 1228,   25,   25,   25,   25,   87,   87, 1240,   87,
      112,  112,  294,  267,  112,  294,  267,   87,   87,   87,

       87,   25,   25,   25, 1213, 1278, 1213,   87,  104,  104,
      104,  104, 1278,  267,  112,  104,  107,  107,  293,  107,
      280,  113,  113,  280,   87,  113,  104,  267,   25,   25,
       25,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  269,   26,  113,   26,   26,  294,  267,
       26,   26,   26,   26,  118,  118,  107,  176,  118, 1227,
      118,  119,  119,  497,  269,  119,  176,  119, 1226,   26,
       26,   26,  321,  321,  104,  321,  320,  523,  118,  320,
      523,  298,  280,  298,  298,  119,  298,  298, 1197,  497,
      320,  298,  322,  322,  176,  322,   26,   26,   26,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   82,
      114,  114,  516,  114,  126,  126,  126,  126,  132,  132,
       82,  132,  126,  288,  114,  114,  288,  517,  114, 1196,

       82,  516,  126,   82,   82, 1181,  512,   82,   82,  512,
       82,   82,  120,  144,  144, 1180,  517,  144,  114,   82,
      114,  120,  120,   82,   82,  120,  512,  120,  132,   82,
       82,   82,   82,   82,   82,   83,   83,  144,  288, 1179,
     1178, 1177,  145,  145,  276,  120,  145,  276,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,  145,   83, 1176,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   85,   85,  328,  328,

      276,  328,  276,  276,  326,  278, 1149,  326,  278,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  326,   85, 1144,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  121,  121,  278,
      121,  124,  124,  124,  124,  673,  136,  136,  124,  136,
     1131,  121,  121,  146,  146,  121,  146,  121,  282,  124,
     1126,  282,  150,  150,  150,  150,  673,  146,  146,  150,
     1271,  146, 1121,  151,  151,  121,  151,  121,  150,  150,

      150,  153,  153,  153,  153, 1271,  136,  154,  154,  154,
      154,  146, 1120,  146,  155,  155,  155,  155, 1281,  153,
     1119,  155, 1281,  158,  158,  154,  158,  124,  157,  157,
      157,  157,  155,  151,  164,  164,  282,  164,  168,  168,
      806,  168,  171,  171, 1118,  171,  157,  179,  179,  198,
      198, 1117,  198,  202,  202,  545,  202, 1116,  545,  806,
      179,  179,  179,  158,  214,  214,  536,  214,  441,  536,
      219,  219,  279,  219,  164,  279, 1115,  441,  168,  179,
      155, 1114,  171,  225,  225, 1113,  225,  251,  251,  198,
      251,  228,  228,  202,  228,  252,  252, 1112,  252,  281,

      284, 1111,  281,  284,  214,  441,  281,  179,  180,  180,
      219,  180,  545,  279,  180,  180,  286,  279,  536,  286,
     1110,  287, 1109,  225,  287,  251,  279,  180,  180,  180,
     1108,  228, 1282,  252,  290,  289,  281,  290,  289,  291,
      292,  284,  291,  292,  337,  337,  180,  337,  180,  284,
     1282,  299,  300,  301,  299,  300,  301,  286,  302, 1107,
     1103,  302,  287,  281,  303, 1102, 1101,  303,  305,  304,
      286,  305,  304, 1100,  180,  287,  289,  287,  307,  290,
      289,  307,  290,  309,  289,  292,  309, 1099,  290,  299,
      300,  301,  291, 1098,  289,  308,  302,  306,  308, 1097,

      306, 1096,  303,  300,  306,  310,  305,  304,  310,  301,
      304,  301,  301, 1095,  304, 1093,  307,  302,  303,  311,
     1092,  309,  311,  304,  309,  312,  313, 1091,  312,  313,
      305, 1090,  309,  308,  306,  306,  307,  314,  316,  315,
      314,  316,  315,  310, 1089, 1088,  310,  308,  308, 1087,
      317,  318,  319,  317,  318,  319,  525,  311, 1086,  525,
      311,  306,  526,  312,  313,  526,  312,  340,  340,  340,
      340,  313, 1085,  311, 1084,  314,  316,  315,  314,  312,
      530,  312,  314,  530,  315,  340,  314,  315,  317,  318,
      319,  316,  318,  315, 1082,  317,  314,  325,  325,  327,

      327,  325, 1081,  327,  529,  330,  330,  529,  319,  330,
      343,  343,  343,  343,  525,  344,  344,  344,  344, 1080,
      526,  325,  344,  327,  347,  347, 1077,  347,  343,  330,
      345,  345,  345,  345, 1076,  530, 1066,  345,  346,  346,
      346,  346,  330,  350,  350,  350,  350, 1042,  345, 1027,
      350,  351,  351,  351,  351, 1026,  346, 1025,  351,  354,
      354,  355,  529,  354,  355,  356,  356,  357,  357,  356,
      357,  359,  359,  361,  361,  359, 1024,  361,  362,  361,
     1023,  362, 1022,  354,  355,  380,  363,  363,  380,  356,
      363,  524,  363,  380,  524,  359,  345,  361, 1021,  366,

      366,  362,  366,  368,  368, 1020, 1019,  368,  359,  368,
      363,  369,  369,  369,  369,  372,  372,  372,  372,  373,
      373,  373,  373,  372, 1018, 1017,  373,  368,  396,  369,
     1016,  396, 1015,  372,  374,  374,  374,  374,  524, 1014,
      368,  374,  375,  375,  375,  375,  377,  377,  377,  377,
      375,  396,  374, 1013,  377,  378,  378,  378,  378, 1010,
      375, 1008,  378, 1007,  377,  379,  379,  379,  379, 1006,
      383,  383,  379,  383,  388,  388, 1005,  388,  395,  395,
      397,  397,  395, 1004,  397,  398,  398, 1003,  398,  400,
      400, 1002, 1001,  400,  401,  401,  401,  401, 1000,  999,

      374,  401,  395,  998,  397,  402,  402,  402,  402,  997,
      401,  401,  401,  400,  404,  404,  404,  404,  996,  407,
      407,  404,  407,  402,  417,  417,  400,  417,  995,  994,
      404,  404,  404,  406,  406,  406,  406,  993,  992,  990,
      406,  410,  410,  410,  410,  413,  413,  413,  413,  406,
      406,  406,  989,  414,  414,  414,  414,  988,  528,  410,
      414,  528,  984,  413,  415,  415,  415,  415,  983,  982,
      979,  415,  416,  416,  416,  416,  420,  420,  420,  420,
      978,  921,  415,  420,  421,  421,  421,  421,  920,  919,
      416,  421,  426,  426,  918,  426,  432,  432,  917,  432,

      436,  436,  528,  436,  447,  447,  916,  447,  462,  462,
      915,  462,  466,  466,  914,  466,  475,  475,  913,  475,
      480,  480,  912,  480,  484,  484,  911,  484,  487,  487,
      415,  487,  514,  521,  527,  514,  521,  527,  531,  532,
      521,  531,  532,  537,  538,  539,  537,  538,  539,  910,
      546,  551,  514,  546,  551,  549,  613,  554,  549,  613,
      554,  909,  662,  676,  613,  662,  676,  908,  907,  614,
      521,  543,  614,  552,  543,  541,  552,  614,  541,  542,
      532,  527,  542,  544,  537,  550,  544,  538,  550,  547,
      906,  555,  547,  551,  555,  546,  531,  521,  549,  905,

      549,  554,  538,  539,  538,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  541,  543,
      552,  542,  553,  556,  557,  553,  556,  557,  550,  544,
      547,  547,  904,  540,  540,  540,  903,  547,  558,  555,
      902,  558,  690,  561,  562,  690,  561,  562,  563,  540,
      564,  563,  565,  564,  689,  565,  566,  689,  901,  566,
      540,  540,  540,  567,  568,  569,  567,  568,  569,  570,
      900,  572,  570,  571,  572,  899,  571,  898,  553,  556,
      557,  561,  562,  558,  573,  897,  563,  573,  564,  690,

      565,  562,  561,  574,  566,  576,  574,  896,  576,  565,
      566,  567,  568,  569,  895,  689,  563,  570,  564,  572,
      570,  571,  572,  696,  672,  799,  696,  672,  799,  568,
      894,  567,  573,  569,  893,  571,  687,  573,  892,  687,
      891,  574,  685,  576,  672,  685,  681,  577,  578,  681,
      577,  578,  573,  579,  573,  890,  579,  580,  576,  889,
      580,  574,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  577,  578,  581,  687,  680,
      581,  579,  680,  582,  681,  580,  582,  888,  685,  577,

      575,  575,  575,  887,  584,  585,  578,  584,  585,  579,
      586,  886,  587,  586,  580,  587,  575,  588,  589,  590,
      588,  589,  590,  591,  885,  581,  591,  575,  575,  575,
      592,  582,  581,  592,  680,  683,  593,  684,  683,  593,
      684,  884,  584,  585,  582,  582,  883,  584,  586,  584,
      587,  582,  586,  882,  879,  588,  589,  590,  585,  595,
      595,  591,  589,  595,  878,  877,  596,  596,  592,  587,
      596,  597,  597,  588,  593,  597,  874,  590,  873,  591,
      683,  593,  684,  595,  604,  604,  592,  808,  604,  807,
      596,  600,  600,  600,  600,  597,  605,  605,  600,  805,

      605,  606,  606,  804,  692,  606,  597,  692,  604,  600,
      608,  608,  717,  803,  608,  717,  608,  609,  609,  691,
      605,  609,  691,  609,  802,  606,  610,  610,  694,  801,
      610,  694,  610,  800,  608,  798,  606,  611,  611,  611,
      611,  609,  619,  619,  611,  797,  619,  620,  620,  692,
      610,  620,  621,  621,  796,  611,  621,  600,  717,  795,
      794,  610,  622,  622,  622,  622,  619,  793,  792,  622,
      691,  620,  693,  694,  698,  693,  621,  698,  622,  622,
      622,  623,  623,  623,  623,  791,  790,  621,  623,  624,
      624,  624,  624,  788,  697,  699,  624,  697,  699,  623,

      787,  700,  786,  611,  700,  624,  624,  624,  625,  625,
      625,  625,  785,  693,  784,  625,  627,  627,  627,  627,
      782,  781,  780,  627,  625,  625,  625,  704,  698,  705,
      704,  778,  705,  709,  627,  721,  709,  777,  721,  697,
      699,  768,  768,  768,  768,  776,  700,  775,  768,  769,
      769,  769,  769,  774,  773,  772,  769,  768,  768,  768,
      812,  771,  765,  812,  764,  769,  769,  769,  704,  763,
      705, 1423,  759,  721, 1423, 1423,  709,  758,  740,  727,
      721,  718,  627,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  702,  706,  701,  702,  706,  707,
      688,  710,  707,  711,  710,  712,  711,  686,  712,  682,
      682,  682,  713,  714,  715,  713,  714,  715,  675,  716,

      809,  674,  716,  809,  831,  719,  722,  831,  719,  722,
      724,  725,  814,  724,  725,  814,  682,  682,  682,  671,
      670,  669,  770,  770,  770,  770,  666,  820,  810,  770,
      820,  810,  702,  665,  706,  706,  715,  707,  710,  712,
      770,  711,  714,  719,  722,  831,  713,  726,  724,  725,
      726,  715,  716,  809,  722,  724,  725,  814,  719,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  810,  783,  783,  726,  820,  663,  783,  661,
      823,  783,  783,  823,  660,  656,  783,  720,  720,  720,

      783,  654,  783,  726,  815,  653, 1207,  815,  816, 1207,
      652,  816,  728,  730,  651,  728,  730,  729,  731,  741,
      729,  731,  741,  650,  720,  720,  720,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      728,  730,  823,  815, 1207,  729,  731,  741,  732,  733,
      730,  732,  733,  816,  728,  723,  723,  723,  729,  731,
      734,  649,  648,  734,  757,  757, 1458,  741,  757, 1458,
     1458,  647,  646,  645,  644,  821,  822,  829,  821,  822,
      829,  643,  723,  723,  723,  642,  732,  733,  757,  641,

      733,  736,  738,  732,  736,  738,  737,  739,  734,  737,
      739,  745,  640,  757,  745,  734,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  736,
      738,  821,  822,  829,  737,  739,  736,  738,  743,  745,
      744,  743,  739,  744,  735,  735,  735,  639,  746,  748,
      737,  746,  748,  749,  832,  750,  749,  832,  750,  636,
      745,  745,  751,  752,  635,  751,  752,  754,  634,  633,
      754,  735,  735,  735,  753,  632,  743,  753,  744,  743,
      755,  744,  756,  755,  631,  756,  746,  748,  628,  626,

      617,  749,  748,  750,  818,  760,  760,  818,  616,  760,
      751,  752,  615,  832,  612,  754,  746,  766,  766,  754,
      749,  766,  753,  750,  607,  601,  751,  752,  755,  760,
      756,  761,  761,  753,  754,  761,  819,  761,  756,  819,
      599,  766,  825,  755,  760,  825,  827,  828,  830,  827,
      828,  830,  583,  818,  833,  761,  766,  833,  818,  836,
      835,  834,  836,  835,  834,  838,  837,  548,  838,  837,
      761,  519,  518,  839,  840,  842,  839,  840,  842,  841,
      843,  819,  841,  843,  511,  872,  872,  846,  924,  872,
      846,  924,  510,  827,  509,  825,  507,  506,  827,  833,

      505,  502,  499,  496,  830,  828,  834,  837,  922,  872,
      836,  922,  494,  842,  838,  837,  872,  841,  843,  493,
      834,  835,  839,  840,  841,  846,  848,  847,  842,  848,
      847,  924,  846,  491,  843,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  849,  850,
      851,  849,  850,  851,  848,  847,  922,  852,  853,  923,
      852,  853,  923,  844,  844,  844,  847,  854,  489,  856,
      854,  848,  856,  858,  859,  486,  858,  859,  860,  861,
      862,  860,  861,  862,  482,  477,  849,  850,  851,  474,

      844,  844,  844,  472,  850,  852,  853,  849,  863,  471,
      864,  863,  849,  864,  468,  854,  464,  856,  461,  851,
      460,  858,  859,  852,  853,  923,  860,  861,  862,  456,
      858,  862,  856,  865,  866,  858,  865,  866,  867,  854,
      933,  867,  859,  933,  860,  861,  863,  868,  864,  869,
      868,  937,  869,  870,  937,  864,  870,  863,  454,  871,
      927,  925,  871,  927,  925,  928,  453,  451,  928,  875,
      875,  865,  866,  875,  926,  449,  867,  926,  865,  930,
      876,  876,  930,  446,  876,  868,  876,  869,  868,  867,
      444,  870,  865,  875,  933,  866,  868,  871,  869,  443,

      875,  937,  870,  440,  876,  880,  880,  931,  871,  880,
      931,  876,  925,  927,  881,  881,  881,  881,  928,  932,
      438,  881,  932,  930,  934,  926,  434,  934,  431,  880,
      881,  881,  881,  430,  935,  936,  880,  935,  936,  938,
      939,  940,  938,  939,  940,  941,  944,  942,  941,  944,
      942,  948,  945,  946,  948,  945,  946,  429,  947,  949,
      931,  947,  949,  428,  950,  425, 1028,  950,  932, 1028,
      951,  424,  423,  951,  952,  934,  953,  952,  954,  953,
      936,  954,  955,  956, 1041,  955,  956, 1041,  941,  942,
      935,  939,  938,  958,  419,  940,  958,  949,  411,  409,

      959,  949,  950,  959,  944,  945,  405,  946,  951,  948,
      960,  947,  952,  960,  953, 1028,  954,  952,  394,  393,
      955,  956,  950,  391,  390,  961,  951,  953,  961,  954,
      962,  958,  386,  962,  385,  955,  956,  958,  959,  963,
      964, 1041,  963,  964,  965,  370,  966,  965,  960,  966,
      365,  967,  968,  959,  967,  968,  360, 1029,  969,  960,
     1029,  969,  970,  961,  353,  970,  349,  972,  962,  973,
      972,  975,  973,  974,  975,  341,  974,  963,  964,  961,
      976,  962,  965,  976,  966,  964,  339,  336, 1030,  967,
      968, 1030,  334,  331,  965,  963,  969,  324, 1029,  966,

      970,  969,  967,  275,  970,  972,  968,  973,  271,  975,
      270,  974,  977,  977, 1035,  261,  977, 1035,  976,  980,
      980,  259,  973,  980,  975,  972,  256,  974,  981,  981,
      254,  253,  981, 1030,  981,  249,  977,  245,  976,  244,
      977,  985,  985,  980,  241,  985, 1031,  980, 1033, 1031,
     1034, 1033,  981, 1034,  237, 1035,  981,  986,  986,  986,
      986,  236,  233, 1032,  986,  985, 1032, 1036, 1037,  985,
     1036, 1037,  211,  986,  986,  986,  987,  987,  987,  987,
      194, 1038, 1039,  987, 1038, 1039, 1040, 1043,  193, 1040,
     1043, 1031,  987,  987,  987, 1034,  192, 1044,  188, 1033,

     1044, 1045, 1046,  187, 1045, 1046, 1032, 1047, 1036, 1048,
     1047, 1050, 1048, 1049, 1050, 1051, 1049, 1125, 1051, 1052,
     1125, 1037, 1052, 1039, 1236, 1053,  183, 1236, 1053, 1054,
     1040, 1055, 1054, 1122, 1055, 1056, 1122,  178, 1056, 1057,
     1043,  175, 1057, 1040, 1038, 1059, 1058,  167, 1059, 1058,
     1047, 1046,  163, 1051,  156, 1044, 1050, 1052, 1045,  140,
     1049, 1060, 1048, 1053, 1060,  139, 1053, 1054, 1052, 1055,
      135, 1051, 1061, 1056, 1054, 1061, 1055, 1057, 1056, 1062,
     1125, 1236, 1062, 1059, 1058, 1063, 1059, 1122, 1063, 1064,
     1057, 1058, 1064, 1065, 1067,  125, 1065, 1067, 1068, 1060,

     1069, 1068, 1060, 1069, 1124, 1070, 1071, 1124, 1070, 1071,
     1061,  105,   94, 1072,   80, 1073, 1072, 1062, 1073, 1135,
       79, 1128, 1135, 1063, 1128, 1061, 1063, 1064,   75,    8,
        7, 1065, 1067, 1064, 1074,    0, 1068, 1074, 1069,    0,
        0,    0, 1062, 1070, 1071, 1123, 1064, 1067, 1123, 1071,
     1065, 1072,    0, 1073, 1070, 1124, 1068, 1069, 1127, 1075,
     1075, 1127, 1073, 1075, 1078, 1078, 1072,    0, 1078, 1079,
     1079, 1135, 1074, 1079, 1128, 1079, 1083, 1083, 1129, 1074,
     1083, 1129, 1130, 1075, 1133, 1130, 1134, 1133, 1078, 1134,
        0, 1136, 1138, 1079, 1136, 1138, 1139, 1139,    0, 1139,

     1083, 1075, 1140, 1123,    0, 1140, 1078, 1141,    0, 1127,
     1141, 1079, 1142, 1143,    0, 1142, 1143, 1145, 1083, 1146,
     1145,    0, 1146, 1147, 1148,    0, 1147, 1148,    0, 1129,
        0, 1134, 1151, 1133, 1139, 1151, 1203, 1130, 1202, 1203,
     1140, 1202, 1136,    0, 1138, 1141, 1152,    0,    0, 1152,
     1142, 1143,    0,    0,    0, 1145, 1140, 1146,    0,    0,
        0, 1147, 1148, 1142, 1153, 1141, 1154, 1153, 1145, 1154,
     1151,    0, 1146,    0, 1147, 1156, 1143, 1200, 1156, 1148,
     1200, 1151, 1157, 1157, 1152, 1203, 1157, 1201, 1160, 1160,
     1201, 1152, 1160, 1205, 1161, 1161, 1205, 1202, 1161,    0,

     1161,    0, 1153,    0, 1154,    0, 1157, 1165, 1165,    0,
        0, 1165, 1160, 1156,    0,    0, 1153, 1154, 1161, 1206,
     1208, 1209, 1206, 1208, 1209, 1210, 1211, 1156, 1210, 1211,
     1200, 1165, 1201,    0, 1212, 1212, 1214, 1212, 1215, 1214,
     1216, 1215, 1217, 1216, 1235, 1217, 1219, 1235,    0, 1219,
     1220, 1205, 1221, 1220, 1222, 1221, 1223, 1222, 1224, 1223,
     1225, 1224, 1233, 1225, 1234, 1233, 1238, 1234, 1210, 1238,
     1237, 1208, 1212, 1237, 1214, 1209, 1215,    0, 1216,    0,
     1217,    0, 1206, 1215, 1219, 1211,    0,    0, 1220, 1214,
     1221, 1217, 1222,    0, 1223,    0, 1224, 1235, 1225, 1216,

     1221, 1224,    0,    0, 1219, 1222, 1233,    0, 1234, 1239,
     1223, 1241, 1239, 1220, 1241,    0,    0, 1256, 1242, 1225,
     1256, 1242, 1243, 1237, 1238, 1243, 1244, 1245, 1246, 1244,
     1245, 1246, 1247, 1254, 1255, 1247, 1254, 1255, 1257, 1258,
        0, 1257, 1258, 1260, 1261, 1268, 1260, 1261, 1268, 1241,
        0,    0,    0, 1239, 1262, 1241, 1242, 1262, 1263,    0,
     1243, 1263, 1242,    0, 1244, 1245, 1246,    0,    0, 1270,
     1247, 1256, 1270,    0, 1264, 1243, 1247, 1264, 1254, 1255,
     1245, 1260, 1261, 1244, 1258,    0, 1246, 1257, 1260, 1261,
     1272, 1274, 1262, 1272, 1274,    0, 1263, 1276, 1268, 1277,

     1276, 1279, 1277, 1280, 1279,    0, 1280, 1263, 1262,    0,
     1283, 1283, 1264, 1283,    0,    0,    0,    0,    0, 1264,
        0,    0,    0, 1270,    0,    0,    0,    0, 1272, 1274,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1279,
        0, 1280,    0, 1272,    0, 1274,    0,    0, 1283,    0,
        0, 1276, 1277,    0,    0, 1279, 1280, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,

     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302,

     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,

     1305, 1305, 1305, 1306, 1306,    0, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1307,
        0, 1307, 1307,    0, 1307,    0,    0, 1307, 1307,    0,
     1307, 1307, 1307, 1308, 1308, 1308, 1308,    0, 1308,    0,
        0, 1308, 1308, 1308, 1308, 1308, 1308, 1309,    0, 1309,
     1309,    0, 1309,    0,    0, 1309, 1309,    0, 1309, 1309,
     1309, 1310, 1310,    0, 1310, 1310,    0, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,    0, 1311,

     1311, 1311, 1311, 1311,    0,    0, 1311, 1311, 1311, 1311,
     1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1313,    0, 1313,
     1313, 1313, 1314,    0, 1314, 1314,    0,    0, 1314,    0,
     1314, 1314, 1314, 1315, 1315, 1315, 1315,    0, 1315,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1315,    0,
        0, 1315,    0, 1315, 1315, 1315,    0, 1315, 1316, 1316,
     1316, 1316,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1316, 1316,    0,    0, 1316,    0, 1316, 1316,

     1316, 1317, 1317, 1317, 1317,    0, 1317,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1317,
        0, 1317, 1317, 1317, 1318, 1318,    0, 1318, 1318,    0,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1319,    0, 1319, 1319, 1319, 1319, 1319,    0,    0, 1319,
     1319, 1319, 1319, 1319, 1320, 1320,    0, 1320, 1320,    0,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1321,    0, 1321, 1321, 1321, 1321, 1321, 1321,    0, 1321,

     1321, 1321, 1321, 1321, 1322, 1322, 1322, 1322,    0, 1322,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1322,
        0,    0, 1322,    0, 1322, 1322, 1322,    0, 1322, 1323,
     1323, 1323, 1323,    0,    0, 1323,    0,    0,    0,    0,
        0,    0,    0, 1323, 1323,    0,    0, 1323,    0, 1323,
     1323, 1323, 1324, 1324, 1324, 1324,    0, 1324,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1324,    0, 1324, 1324, 1324, 1325,    0, 1325, 1325, 1325,
     1326,    0,    0,    0, 1326,    0, 1326, 1326, 1326, 1327,
     1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,

     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1328, 1328,    0, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1329, 1329,    0, 1329, 1329,    0, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330,    0, 1330,
     1330, 1330, 1330, 1330,    0,    0, 1330, 1330, 1330, 1330,
     1330, 1331,    0, 1331, 1331, 1331, 1332, 1332, 1332, 1332,
        0, 1332,    0,    0,    0,    0,    0,    0,    0,    0,

     1332, 1332,    0,    0, 1332,    0, 1332, 1332, 1332, 1333,
     1333, 1333, 1333,    0, 1333,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1333,    0,    0, 1333,    0, 1333,
     1333, 1333,    0, 1333, 1334, 1334, 1334, 1334,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1334, 1334,
        0,    0, 1334,    0, 1334, 1334, 1334, 1335, 1335, 1335,
     1335,    0, 1335,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1335,    0, 1335, 1335, 1335,
     1336,    0, 1336, 1336, 1336, 1337,    0, 1337,    0,    0,
        0, 1337,    0, 1337, 1337, 1337, 1338,    0, 1338, 1338,

     1338, 1339,    0, 1339,    0,    0,    0, 1339,    0, 1339,
     1339, 1339, 1340, 1340,    0, 1340, 1340, 1340, 1340, 1340,
     1340,    0, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340,    0, 1340, 1340, 1340, 1340, 1340, 1341,    0,
        0, 1341,    0,    0,    0, 1341,    0, 1341, 1341, 1341,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,    0, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343,    0, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343,    0, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1344,    0,    0, 1344,    0,    0,    0, 1344,
        0, 1344, 1344, 1344, 1345, 1345,    0, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1346, 1346,    0, 1346,    0, 1346, 1346, 1346, 1346,    0,
     1346, 1346, 1346, 1346,    0, 1346, 1346, 1346,    0, 1346,
        0, 1346, 1346, 1346, 1346, 1346, 1347,    0,    0, 1347,
        0,    0,    0, 1347,    0, 1347, 1347, 1347, 1348, 1348,
        0, 1348,    0, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348,    0, 1348,    0, 1348,

     1348, 1348, 1348, 1348, 1349, 1349,    0, 1349,    0, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349,    0, 1349,    0, 1349, 1349, 1349, 1349, 1349,
     1350,    0, 1350, 1350, 1350, 1351,    0,    0,    0, 1351,
        0, 1351, 1351, 1351, 1352, 1352,    0, 1352, 1352, 1352,
     1352,    0,    0, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352,    0, 1352,    0, 1352, 1352, 1352, 1352, 1352,
     1353,    0, 1353, 1353, 1353, 1354,    0, 1354, 1354,    0,
        0, 1354,    0, 1354, 1354, 1354, 1355, 1355,    0, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355,    0, 1355,    0, 1355, 1355, 1355,
     1355, 1355, 1356,    0,    0, 1356,    0,    0,    0, 1356,
        0, 1356, 1356, 1356, 1357, 1357,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357,    0, 1357, 1357, 1357, 1357, 1357,
     1358, 1358,    0, 1358, 1358, 1358, 1358, 1358, 1358,    0,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,    0, 1358,
        0, 1358, 1358, 1358, 1358, 1358, 1359, 1359,    0, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1360,    0, 1360, 1360,    0, 1360,    0,    0,
     1360, 1360,    0, 1360, 1360, 1360, 1361,    0,    0, 1361,
        0,    0,    0, 1361,    0, 1361, 1361, 1361, 1362,    0,
     1362, 1362, 1362,    0, 1362, 1363,    0,    0, 1363,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1363,    0, 1363, 1363, 1363, 1364,    0,
     1364, 1364, 1364, 1365,    0, 1365, 1365,    0, 1365,    0,
        0, 1365, 1365,    0, 1365, 1365, 1365, 1366,    0,    0,
     1366,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1366, 1366, 1366, 1366, 1366,

     1367, 1367,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1368,    0, 1368, 1368,
     1368, 1368, 1368,    0,    0, 1368, 1368, 1368, 1368, 1368,
     1369,    0, 1369,    0, 1369, 1369, 1369,    0,    0, 1369,
     1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1371,    0, 1371, 1371,    0,    0, 1371,    0, 1371, 1371,
     1371, 1372,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1372,    0, 1372, 1372, 1372, 1373,
        0, 1373, 1373, 1373, 1374, 1374, 1374, 1374,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1374, 1374,
        0,    0, 1374,    0, 1374, 1374, 1374, 1375, 1375, 1375,
     1375,    0, 1375,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1375,    0, 1375, 1375, 1375,
     1376,    0,    0,    0, 1376,    0, 1376, 1376, 1376, 1377,
     1377,    0, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1378,    0, 1378, 1378, 1378,

     1378, 1378,    0,    0, 1378, 1378, 1378, 1378, 1378, 1379,
        0, 1379,    0, 1379, 1379, 1379,    0,    0, 1379, 1379,
     1379, 1379, 1379, 1380, 1380,    0, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
        0, 1381, 1381, 1381, 1381, 1381, 1381,    0, 1381, 1381,
     1381, 1381, 1381, 1382,    0, 1382,    0, 1382, 1382, 1382,
        0,    0, 1382, 1382, 1382, 1382, 1382, 1383,    0, 1383,
     1383, 1383, 1384, 1384, 1384, 1384,    0,    0, 1384,    0,
        0,    0,    0,    0,    0,    0, 1384, 1384,    0,    0,

     1384,    0, 1384, 1384, 1384, 1385, 1385, 1385, 1385,    0,
     1385,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1385,    0, 1385, 1385, 1385, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386,    0, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1387,    0,    0, 1387,    0,    0,
     1387,    0,    0,    0,    0,    0,    0,    0, 1387,    0,
        0,    0, 1387,    0, 1387, 1387, 1387, 1388,    0,    0,
        0, 1388,    0, 1388, 1388, 1388, 1389, 1389,    0, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1390, 1390,    0, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
        0, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392,    0, 1392, 1392, 1392, 1392,
     1392,    0,    0, 1392, 1392, 1392, 1392, 1392, 1393,    0,
     1393,    0, 1393, 1393, 1393,    0,    0, 1393, 1393, 1393,
     1393, 1393, 1394, 1394, 1394, 1394,    0, 1394,    0,    0,

        0,    0,    0,    0,    0,    0, 1394, 1394,    0,    0,
     1394,    0, 1394, 1394, 1394, 1395,    0, 1395, 1395, 1395,
     1396, 1396, 1396, 1396,    0, 1396,    0,    0,    0,    0,
        0,    0,    0,    0, 1396, 1396,    0,    0, 1396,    0,
     1396, 1396, 1396, 1397,    0, 1397, 1397, 1397, 1398, 1398,
     1398, 1398,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1398, 1398,    0,    0, 1398,    0, 1398, 1398,
     1398, 1399, 1399, 1399, 1399,    0, 1399,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1399,
        0, 1399, 1399, 1399, 1400,    0,    0,    0, 1400,    0,

     1400, 1400, 1400, 1401,    0, 1401,    0,    0,    0, 1401,
        0, 1401, 1401, 1401, 1402,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1402,    0, 1402,
     1402, 1402, 1403,    0, 1403,    0,    0,    0, 1403,    0,
     1403, 1403, 1403, 1404, 1404,    0, 1404, 1404, 1404, 1404,
     1404, 1404,    0, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404,    0, 1404, 1404, 1404, 1404, 1404, 1405,
        0,    0, 1405,    0,    0,    0, 1405,    0, 1405, 1405,
     1405, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,    0,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407, 1407,    0,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407,    0, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1408,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1408,    0, 1408, 1408,
     1408, 1409,    0,    0, 1409,    0,    0,    0, 1409,    0,
     1409, 1409, 1409, 1410, 1410,    0, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411,
     1411,    0, 1411,    0, 1411, 1411, 1411, 1411,    0, 1411,

     1411, 1411, 1411,    0, 1411, 1411, 1411,    0, 1411,    0,
     1411, 1411, 1411, 1411, 1411, 1412,    0,    0, 1412,    0,
        0,    0, 1412,    0, 1412, 1412, 1412, 1413, 1413,    0,
     1413,    0, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413,    0, 1413,    0, 1413, 1413,
     1413, 1413, 1413, 1414, 1414,    0, 1414,    0, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414,    0, 1414,    0, 1414, 1414, 1414, 1414, 1414, 1415,
        0,    0,    0, 1415,    0, 1415, 1415, 1415, 1416, 1416,
        0, 1416, 1416, 1416, 1416,    0,    0, 1416, 1416, 1416,

     1416, 1416, 1416, 1416, 1416, 1416,    0, 1416,    0, 1416,
     1416, 1416, 1416, 1416, 1417,    0, 1417, 1417,    0,    0,
     1417,    0, 1417, 1417, 1417, 1418,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1418,    0,
     1418, 1418, 1418, 1419, 1419,    0, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419,    0, 1419,    0, 1419, 1419, 1419, 1419, 1419, 1420,
        0,    0, 1420,    0,    0,    0, 1420,    0, 1420, 1420,
     1420, 1421, 1421,    0, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421,    0, 1421, 1421, 1421, 1421, 1421, 1421,

     1421,    0, 1421, 1421, 1421, 1421, 1421, 1422, 1422,    0,
     1422, 1422, 1422, 1422, 1422, 1422,    0, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422,    0, 1422,    0, 1422, 1422,
     1422, 1422, 1422, 1424, 1424,    0, 1424,    0,    0,    0,
     1424,    0, 1424, 1424, 1424, 1425, 1425,    0, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426,    0,    0, 1426,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1426,
        0, 1426, 1426, 1426, 1427,    0, 1427, 1427, 1427, 1428,

        0,    0, 1428,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1428,    0, 1428,
     1428, 1428, 1429, 1429,    0, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429,    0, 1429, 1430,    0,
     1430, 1430, 1430, 1431,    0, 1431, 1431, 1431, 1432,    0,
        0, 1432,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1432, 1432, 1432, 1432,
     1432, 1433,    0, 1433, 1433, 1433, 1433, 1433,    0,    0,
     1433, 1433, 1433, 1433, 1433, 1434,    0, 1434, 1434, 1434,

     1434, 1434,    0,    0, 1434, 1434, 1434, 1434, 1434, 1435,
        0, 1435, 1435, 1435, 1436, 1436, 1436, 1436,    0, 1436,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1436,
        0,    0, 1436,    0, 1436, 1436, 1436,    0, 1436, 1437,
        0,    0,    0, 1437,    0, 1437, 1437, 1437, 1438,    0,
     1438, 1438, 1438, 1438, 1438,    0,    0, 1438, 1438, 1438,
     1438, 1438, 1439,    0, 1439, 1439, 1439, 1439, 1439,    0,
        0, 1439, 1439, 1439, 1439, 1439, 1440,    0, 1440, 1440,
     1440, 1440, 1440, 1440,    0, 1440, 1440, 1440, 1440, 1440,
     1441,    0, 1441, 1441, 1441, 1441, 1441, 1441,    0, 1441,

     1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442,    0, 1442,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1442,
        0,    0, 1442,    0, 1442, 1442, 1442,    0, 1442, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1444,    0,    0, 1444,    0,
        0, 1444,    0,    0,    0,    0,    0,    0,    0, 1444,
        0,    0,    0, 1444,    0, 1444, 1444, 1444, 1445,    0,
     1445, 1445, 1445, 1445, 1445,    0,    0, 1445, 1445, 1445,
     1445, 1445, 1446,    0, 1446, 1446, 1446, 1446, 1446,    0,

        0, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447,
        0, 1447,    0,    0,    0,    0,    0,    0,    0,    0,
     1447, 1447,    0,    0, 1447,    0, 1447, 1447, 1447, 1448,
     1448, 1448, 1448,    0, 1448,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1448,    0,    0, 1448,    0, 1448,
     1448, 1448, 1449, 1449, 1449, 1449,    0, 1449,    0,    0,
        0,    0,    0,    0,    0,    0, 1449, 1449,    0,    0,
     1449,    0, 1449, 1449, 1449, 1450, 1450, 1450, 1450,    0,
     1450,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1450,    0,    0, 1450,    0, 1450, 1450, 1450,    0, 1450,

     1451,    0,    0,    0, 1451,    0, 1451, 1451, 1451, 1452,
        0, 1452, 1452, 1452, 1453,    0, 1453,    0,    0,    0,
     1453,    0, 1453, 1453, 1453, 1454,    0, 1454, 1454, 1454,
     1455,    0,    0,    0, 1455,    0, 1455, 1455, 1455, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456,    0, 1456, 1456, 1456,    0, 1456,
        0,    0, 1456, 1456, 1456, 1457,    0, 1457, 1457, 1457,
     1459,    0,    0, 1459,    0,    0,    0, 1459,    0, 1459,
     1459, 1459, 1460, 1460,    0, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1461,    0,
     1461, 1461, 1461, 1462,    0,    0, 1462,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1462,    0, 1462, 1462, 1462, 1463, 1463,    0, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464,    0, 1464,    0,    0,    0, 1464, 1464, 1465, 1465,
     1465, 1465, 1465, 1466,    0,    0, 1466,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1466, 1466, 1466, 1466, 1466, 1467,    0, 1467, 1467,
     1467, 1467, 1467,    0,    0, 1467, 1467, 1467, 1467, 1467,
     1468,    0, 1468, 1468, 1468, 1468, 1468,    0,    0, 1468,
     1468, 1468, 1468, 1468, 1469,    0, 1469, 1469, 1469, 1469,
     1469, 1469,    0, 1469, 1469, 1469, 1469, 1469, 1470,    0,
     1470, 1470, 1470, 1471, 1471, 1471, 1471,    0, 1471,    0,
        0,    0,    0,    0,    0,    0,    0, 1471, 1471,    0,
        0, 1471,    0, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
        0, 1472,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1472,    0,    0, 1472,    0, 1472, 1472, 1472, 1473,
     1473,    0, 1473,    0,    0,    0, 1473,    0, 1473, 1473,
     1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
        0, 1474,    0,    0,    0, 1474, 1474, 1475, 1475, 1475,
     1475,    0, 1475,    0,    0,    0,    0,    0,    0,    0,
        0, 1475, 1475,    0,    0, 1475,    0, 1475, 1475, 1475,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476,    0, 1476, 1476, 1476,    0,
     1476,    0, 1476,    0, 1476, 1476, 1477, 1477, 1477, 1477,

     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477,    0, 1477, 1477, 1477,    0, 1477,    0,    0,    0,
     1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478,    0, 1478, 1478,
     1478,    0, 1478,    0,    0,    0, 1478, 1478, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479,    0, 1479, 1479, 1479,    0, 1479,    0,
        0,    0, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,    0,
     1480, 1480, 1480,    0, 1480,    0,    0,    0, 1480, 1480,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2006 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleInherit(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);
  
struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  { "brief",           &handleBrief },
  { "short",           &handleBrief },
  { "fn",              &handleFn },
  { "var",             &handleFn },
  { "typedef",         &handleFn },
  { "property",        &handleFn },
  { "def",             &handleDef },
  { "overload",        &handleOverload },
  { "enum",            &handleEnum },
  { "defgroup",        &handleDefGroup },
  { "addtogroup",      &handleAddToGroup },
  { "weakgroup",       &handleWeakGroup },
  { "namespace",       &handleNamespace },
  { "package",         &handlePackage },
  { "class",           &handleClass },
  { "protocol",        &handleProtocol },
  { "category",        &handleCategory },
  { "union",           &handleUnion },
  { "struct",          &handleStruct },
  { "interface",       &handleInterface },
  { "idlexcept",       &handleIdlException },
  { "page",            &handlePage },
  { "mainpage",        &handleMainpage },
  { "file",            &handleFile },
  { "dir",             &handleDir },
  { "example",         &handleExample },
  { "details",         &handleDetails },
  { "name",            &handleName },
  { "todo",            &handleTodo },
  { "test",            &handleTest },
  { "bug",             &handleBug },
  { "deprecated",      &handleDeprecated },
  { "xrefitem",        &handleXRefItem },
  { "related",         &handleRelated },
  { "relates",         &handleRelated },
  { "relatedalso",     &handleRelatedAlso },
  { "relatesalso",     &handleRelatedAlso },
  { "refitem",         &handleRefItem },
  { "subpage",         &handleSubpage },
  { "section",         &handleSection },
  { "subsection",      &handleSection },
  { "subsubsection",   &handleSection },
  { "paragraph",       &handleSection },
  { "anchor",          &handleAnchor },
  { "verbatim",        &handleFormatBlock },
  { "latexonly",       &handleFormatBlock },
  { "htmlonly",        &handleFormatBlock },
  { "xmlonly",         &handleFormatBlock },
  { "rtfonly",         &handleFormatBlock },
  { "manonly",         &handleFormatBlock },
  { "dot",             &handleFormatBlock },
  { "code",            &handleFormatBlock },
  { "addindex",        &handleAddIndex },
  { "if",              &handleIf },
  { "ifnot",           &handleIfNot },
  { "elseif",          &handleElseIf },
  { "else",            &handleElse },
  { "endif",           &handleEndIf },
  { "ingroup",         &handleIngroup },
  { "nosubgrouping",   &handleNoSubGrouping },
  { "showinitializer", &handleShowInitializer },
  { "hideinitializer", &handleHideInitializer },
  { "callgraph",       &handleCallgraph },
  { "callergraph",     &handleCallergraph },
  { "internal",        &handleInternal },
  { "_linebr",         &handleLineBr },
  { "static",          &handleStatic },
  { "pure",            &handlePure },
  { "private",         &handlePrivate},
  { "privatesection",  &handlePrivateSection },
  { "protected",       &handleProtected },
  { "protectedsection",&handleProtectedSection },
  { "public",          &handlePublic },
  { "publicsection",   &handlePublicSection },
  { "inherit",         &handleInherit },
  { 0, 0 }
};



/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    /** maps a command name to a handler function */
    static DocCmdFunc *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(89)
    {
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	m_map.insert(p->cmdName,&p->handler);
	p++;
      }
    }

    DocCmdFunc *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<DocCmdFunc> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;

static int              g_commentCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static QCString getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:       return "\\class";
    case Entry::STRUCTDOC_SEC:      return "\\struct";
    case Entry::UNIONDOC_SEC:       return "\\union";
    case Entry::EXCEPTIONDOC_SEC:   return "\\exception";
    case Entry::NAMESPACEDOC_SEC:   return "\\namespace";
    case Entry::PROTOCOLDOC_SEC:    return "\\protocol";
    case Entry::CATEGORYDOC_SEC:    return "\\category";
    case Entry::ENUMDOC_SEC:        return "\\enum";
    case Entry::PAGEDOC_SEC:        return "\\page";
    case Entry::MEMBERDOC_SEC:      return "\\fn";
    case Entry::OVERLOADDOC_SEC:    return "\\overload";
    case Entry::FILEDOC_SEC:        return "\\file";
    case Entry::DEFINEDOC_SEC:      return "\\def";
    case Entry::GROUPDOC_SEC:       return "\\defgroup";
    case Entry::MAINPAGEDOC_SEC:    return "\\mainpage";
    case Entry::PACKAGEDOC_SEC:     return "\\package";
    case Entry::DIRDOC_SEC:         return "\\dir";
    case Entry::EXAMPLE_SEC:        return "\\example";
    case Entry::MEMBERGRP_SEC:      return "\\name";
    default: return "";
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (!getDocSectionName(current->section).isEmpty())
  {
    //warn(yyFileName,yyLineNr,
    //	    "Warning: found a structural command %s for a section already "
    //	    "marked with structural command %s. Ignoring the latter command.",
    //	     getDocSectionName(s).data(),
    //         getDocSectionName(current->section).data()
    //	);
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
	//printf("found %s lii->type=%s\n",listName,lii->type);
	break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d\n",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            sectionTitle,SectionInfo::Anchor);
    Doxygen::sectionDict.insert(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static void addSection()
{
  sectionTitle+=commentScanYYtext;
  sectionTitle=sectionTitle.stripWhiteSpace();
  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
  current->anchors->append(si);
  Doxygen::sectionDict.insert(commentScanYYtext,si);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);
  xrefItemKey = newXRefItemKey;

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }

  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      stripTrailingWhiteSpace(current->doc);
      if (current->docFile.isEmpty())
      {
        current->docFile = yyFileName;
        current->docLine = yyLineNr;
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (current->briefFile.isEmpty())
      {
        current->briefFile = yyFileName;
        current->briefLine = yyLineNr;
      }
      pOutputString = &current->brief;
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */




































#line 3592 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define SkipGuardedSection 25
#define SkipInternal 26
#define NameParam 27
#define InGroupParam 28
#define FnParam 29
#define OverloadParam 30
#define InheritParam 31
#define ReadFormulaShort 32
#define ReadFormulaLong 33
#define AnchorLabel 34
#define HtmlComment 35
#define SkipLang 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 761 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3804 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1285 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8201 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 780 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 783 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 786 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 789 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 792 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 795 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 804 "commentscan.l"
{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 810 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 815 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 818 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 821 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 823 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 826 "commentscan.l"
{ // potentially interesting command
  					  QCString cmdName = QCString(&commentScanYYtext[1]).stripWhiteSpace();
  					  DocCmdFunc *funcPtr = DocCmdMapper::map(cmdName);
					  if (funcPtr) // special action is required
					  {
					    if ((*funcPtr)(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 855 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 858 "commentscan.l"
{ // language switch command
                                          QCString langId = &commentScanYYtext[2];
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 866 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=&commentScanYYtext[2];
					  formulaText+=formulaEnv;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 872 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 876 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 880 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 884 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr);
                                          g_memberGroupHeader.resize(0);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 889 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 892 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 895 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 898 "commentscan.l"
{ // . at start or in the middle of a word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 901 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 905 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 908 "commentscan.l"
{ // at least one blank line (or blank line command)
  					  if (inContext!=OutputBrief)
					  {
  					    addOutput(commentScanYYtext);
					    setOutput(OutputDoc);
					  }
					  else if (!current->brief.stripWhiteSpace().isEmpty())
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    setOutput(OutputDoc);
  					    addOutput(commentScanYYtext);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 922 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 930 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 934 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 31:
YY_RULE_SETUP
#line 941 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 942 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 945 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 947 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 35:
YY_RULE_SETUP
#line 952 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 957 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 962 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 968 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 971 "commentscan.l"
{ // new line
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 975 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 981 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 985 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 989 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 997 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1002 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1006 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1010 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1019 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 49:
YY_RULE_SETUP
#line 1024 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1028 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1032 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1041 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1046 "commentscan.l"
{ // first argument
					  current->name = commentScanYYtext;
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1055 "commentscan.l"
{
					  current->name = commentScanYYtext;
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1059 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1063 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1072 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1075 "commentscan.l"
{ // second argument; include file
					  current->includeFile = stripQuotes(commentScanYYtext);
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1079 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1083 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1088 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1091 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1095 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1099 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1103 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 66:
YY_RULE_SETUP
#line 1108 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1119 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1123 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1132 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1136 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1140 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "Warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 72:
YY_RULE_SETUP
#line 1157 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1161 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1164 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1175 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1184 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1189 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1193 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1196 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 81:
YY_RULE_SETUP
#line 1201 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1210 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1219 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1222 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1226 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1230 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1239 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1251 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1260 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the relates(also) command ------------ */
case 93:
YY_RULE_SETUP
#line 1266 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1274 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1278 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing argument of \\relates command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1286 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1292 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1297 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1301 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 100:
YY_RULE_SETUP
#line 1307 "commentscan.l"
{ // first argyment
  					  sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1313 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1321 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1328 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1338 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1342 "commentscan.l"
{ // any character without special meaning
  					  sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1346 "commentscan.l"
{ // unescape escaped command
  					  sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // unescape escaped character
  					  sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1354 "commentscan.l"
{ // anything else
  					  sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 110:
YY_RULE_SETUP
#line 1361 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1368 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1376 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1380 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1384 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 115:
YY_RULE_SETUP
#line 1391 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor);
                                          Doxygen::sectionDict.insert(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1398 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1406 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1416 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1423 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1426 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1430 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1434 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "Warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1443 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1446 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "Warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 124:
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( Comment );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1486 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1491 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1495 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 128:
/* rule 128 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1501 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1505 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1509 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1521 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( Comment );
					    }
					  }
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1538 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1553 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1557 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1559 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1565 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1569 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1577 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1582 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1587 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 142:
YY_RULE_SETUP
#line 1594 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1600 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1611 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1615 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1621 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1630 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1634 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1637 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1641 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1645 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1653 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1667 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1671 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 155:
YY_RULE_SETUP
#line 1677 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1683 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1691 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 158:
YY_RULE_SETUP
#line 1700 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1708 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1710 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1713 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1717 "commentscan.l"
ECHO;
	YY_BREAK
#line 5538 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1285 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1285 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1284);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1717 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  current->name = "mainpage";
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  g_memberGroupHeader.resize(0);
  BEGIN( NameParam );
  if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
  {
    closeGroup(current,yyFileName,yyLineNr);
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesDup = TRUE;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    BEGIN( SkipInternal );
  }
  else
  {
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private; 
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private; 
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected; 
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public; 
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"Warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in */     int lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isJavaDocStyle,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //fprintf(stderr,"parseCommentBlock() isBrief=%d isJavaDocStyle=%d lineNr=%d\n",
  //    isBrief,isJavaDocStyle,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isJavaDocStyle ? OutputBrief : OutputDoc );
  briefEndsAtDot = isJavaDocStyle;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\n===========\n",
	       current->brief.data(),current->doc.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  if (parseMore) position=inputPosition; else position=0;

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"Warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"Warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"Warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
}

void groupLeaveCompound(const char *,int,const char *)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"Warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
}


void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x)\n",e->name.data(),e->section);
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;
      g_memberGroupId = curGroupId++;
      //printf("new group id=%d header=%s\n",g_memberGroupId,g_memberGroupHeader.data());

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
    //else
    //{
    //  warn(fileName,line,"Warning: member groups cannot be nested. Ending current group!\n");
    //  closeGroup(e,fileName,line);
    //}
  }
}

void closeGroup(Entry *e,const char *fileName,int)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // know group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    e->groups->removeLast();
    delete grp;
    initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s)\n",g_memberGroupId,
  //       g_memberGroupRelates.data());
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s\n",g_autoGroupStack.top()->groupname.data(),e->name.data());
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


