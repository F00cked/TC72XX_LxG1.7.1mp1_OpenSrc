
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,int len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 497
#define YY_END_OF_BUFFER 498
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[3477] =
    {   0,
      232,  232,  232,  232,  232,  232,   34,   34,   40,   40,
      281,  281,  281,  281,  498,  492,  497,  487,  497,  488,
      491,  492,  497,  489,  492,  497,  490,  492,  497,  492,
      497,  492,  497,  143,  492,  497,  149,  492,  497,  149,
      492,  497,  144,  487,  497,  148,  149,  488,  491,  492,
      497,  149,  489,  492,  497,  149,  490,  492,  497,  149,
      492,  497,  149,  492,  497,  492,  497,  487,  497,  492,
      497,  492,  497,  492,  497,  492,  497,  377,  492,  497,
      384,  385,  492,  497,  399,  492,  497,  492,  497,  492,
      497,  408,  487,  497,  492,  497,  492,  497,  393,  492,

      497,  389,  492,  497,  492,  497,  387,  492,  497,  492,
      497,  392,  492,  497,  410,  492,  497,  492,  497,  388,
      492,  497,  492,  497,  492,  497,  391,  492,  497,  390,
      492,  497,  382,  492,  497,  382,  488,  491,  492,  497,
      382,  489,  492,  497,  382,  490,  492,  497,  382,  492,
      497,  381,  382,  492,  497,  380,  382,  492,  497,  492,
      497,  408,  487,  497,  492,  497,  492,  497,  425,  492,
      497,  492,  497,  411,  492,  497,  406,  407,  492,  497,
      426,  492,  497,  405,  492,  497,  404,  405,  492,  497,
      404,  487,  497,  405,  488,  491,  492,  497,  405,  489,

      492,  497,  405,  490,  492,  497,  405,  492,  497,  405,
      492,  497,  405,  492,  497,    9,  488,  491,  492,  497,
        7,  490,  492,  497,    2,  492,  497,   10,  492,  497,
       10,  492,  497,    1,  492,  497,  201,  492,  497,  201,
      488,  491,  492,  497,  201,  489,  492,  497,  201,  490,
      492,  497,   11,  201,  492,  497,  201,  492,  497,   11,
      201,  492,  497,   44,  492,  497,   44,  487,  497,   44,
      492,  497,  133,  489,  492,  497,  492,  497,  151,  492,
      497,  277,  492,  497,   30,  492,  497,  202,  492,  497,
      120,  492,  497,  492,  497,  200,  492,  497,  202,  492,

      497,  223,  492,  497,  157,  492,  497,  492,  497,  492,
      497,  119,  492,  497,  119,  492,  497,  203,  492,  497,
      119,  492,  497,  119,  492,  497,  119,  492,  497,  119,
      492,  497,  119,  492,  497,  119,  492,  497,  119,  492,
      497,  119,  492,  497,  119,  492,  497,  119,  492,  497,
      119,  492,  497,  119,  492,  497,  119,  492,  497,  119,
      492,  497,  119,  492,  497,  119,  492,  497,  119,  492,
      497,  444,  492,  497,  492,  497,   13,   15,  492,  497,
       14,  487,  497,   13,   15,  488,  491,  492,  497,   13,
       15,  489,  492,  497,   13,   15,  490,  492,  497,   13,

       15,  492,  497,   15,  492,  497,  492,  497,  487,  497,
      492,  497,  492,  497,  119,  492,  497,  492,  497,  492,
      497,  487,  497,  492,  497,  230,  492,  497,  492,  497,
      229,  492,  497,  228,  492,  497,  231,  492,  497,  492,
      497,  322,  489,  492,  497,  348,  492,  497,  350,  492,
      497,  349,  492,  497,  350,  492,  497,  336,  492,  497,
      321,  336,  492,  497,  321,  487,  497,  336,  488,  491,
      492,  497,  322,  336,  489,  492,  497,  336,  490,  492,
      497,  314,  336,  492,  497,  315,  336,  492,  497,  320,
      336,  492,  497,  336,  492,  497,  343,  492,  497,  343,

      488,  491,  492,  497,  343,  489,  492,  497,  343,  490,
      492,  497,  341,  343,  492,  497,  342,  343,  492,  497,
      343,  492,  497,  347,  492,  497,  346,  487,  497,  347,
      488,  491,  492,  497,  347,  489,  492,  497,  347,  490,
      492,  497,  347,  492,  497,  345,  347,  492,  497,  344,
      347,  492,  497,  321,  336,  492,  497,  321,  487,  497,
      336,  492,  497,  316,  336,  492,  497,  336,  492,  497,
      323,  336,  492,  497,  331,  336,  492,  497,  331,  336,
      492,  497,  331,  336,  492,  497,  331,  336,  492,  497,
      331,  336,  492,  497,   76,  492,  497,   76,  487,  497,

       76,  488,  491,  492,  497,   76,  489,  492,  497,   76,
      490,  492,  497,   78,  492,  497,   76,  492,  497,   75,
       76,  492,  497,   76,  492,  497,  218,  492,  497,  218,
      488,  491,  492,  497,  218,  489,  492,  497,  218,  490,
      492,  497,  218,  492,  497,  217,  218,  492,  497,  216,
      218,  492,  497,  232,  254,  492,  497,  232,  252,  254,
      492,  497,  252,  487,  497,  252,  254,  492,  497,  236,
      254,  488,  491,  492,  497,  234,  254,  489,  492,  497,
      239,  254,  490,  492,  497,  254,  492,  497,  254,  492,
      497,  241,  254,  492,  497,  243,  254,  492,  497,  243,

      254,  492,  497,  254,  492,  497,  242,  254,  492,  497,
      492,  497,   90,  492,  497,   88,  492,  497,   88,  492,
      497,  492,  497,  487,  497,  492,  497,  492,  497,   89,
      492,  497,  492,  497,  359,  370,  492,  497,  359,  370,
      492,  497,  358,  487,  497,  356,  370,  488,  491,  492,
      497,  366,  370,  489,  492,  497,  369,  370,  490,  492,
      497,  370,  492,  497,  370,  492,  497,  370,  492,  497,
      352,  370,  492,  497,  353,  370,  492,  497,  359,  370,
      492,  497,  357,  366,  370,  489,  492,  497,  360,  487,
      497,  370,  488,  491,  492,  497,  370,  492,  497,  370,

      492,  497,  355,  492,  497,  376,  492,  497,  375,  487,
      497,  372,  376,  488,  491,  492,  497,  376,  489,  492,
      497,  376,  490,  492,  497,  376,  492,  497,  376,  492,
      497,  376,  492,  497,  376,  488,  491,  492,  497,  373,
      376,  490,  492,  497,  364,  370,  488,  491,  492,  497,
      366,  370,  489,  492,  497,  370,  492,  497,  365,  370,
      492,  497,  351,  370,  492,  497,  139,  492,  497,  141,
      487,  497,  139,  492,  497,  139,  488,  491,  492,  497,
      139,  489,  492,  497,  139,  490,  492,  497,  139,  492,
      497,  139,  492,  497,  486,  492,  497,  486,  492,  497,

      486,  488,  491,  492,  497,  486,  489,  492,  497,  486,
      490,  492,  497,  492,  497,  486,  492,  497,  492,  497,
      485,  487,  497,  488,  491,  492,  497,  489,  492,  497,
      490,  492,  497,  492,  497,    5,  492,  497,    6,  492,
      497,    3,  492,  497,    4,  492,  497,  227,  492,  497,
      226,  227,  492,  497,  226,  487,  497,  227,  488,  491,
      492,  497,  227,  489,  492,  497,  227,  490,  492,  497,
      227,  492,  497,  225,  227,  492,  497,  224,  227,  492,
      497,  421,  492,  497,  422,  492,  497,  423,  492,  497,
      424,  492,  497,  222,  492,  497,  221,  488,  491,  492,

      497,  222,  489,  492,  497,  222,  490,  492,  497,  222,
      492,  497,  219,  492,  497,  220,  492,  497,  492,  497,
      246,  492,  497,  245,  492,  497,  129,  492,  497,  127,
      487,  497,  129,  488,  491,  492,  497,  129,  489,  492,
      497,  129,  490,  492,  497,  129,  492,  497,  128,  129,
      492,  497,  131,  492,  497,  131,  488,  491,  492,  497,
      131,  489,  492,  497,  131,  490,  492,  497,  131,  492,
      497,  131,  492,  497,  436,  438,  492,  497,  431,  438,
      492,  497,  431,  487,  497,  436,  438,  488,  491,  492,
      497,  436,  438,  489,  492,  497,  436,  438,  490,  492,

      497,  438,  492,  497,  438,  492,  497,  438,  492,  497,
      436,  438,  492,  497,  492,  497,   46,  492,  497,   45,
      492,  497,  492,  497,  492,  497,  449,  492,  497,  450,
      487,  497,  449,  488,  491,  492,  497,  449,  489,  492,
      497,  449,  490,  492,  497,  449,  492,  497,  449,  492,
      497,  449,  492,  497,  445,  449,  492,  497,  446,  449,
      492,  497,  137,  492,  497,  138,  487,  497,  137,  488,
      491,  492,  497,  137,  489,  492,  497,  137,  490,  492,
      497,  137,  492,  497,  492,  497,  492,  497,  146,  492,
      497,  146,  488,  491,  492,  497,  146,  489,  492,  497,

      146,  490,  492,  497,  146,  492,  497,  145,  146,  492,
      497,  335,  492,  497,  335,  492,  497,  335,  488,  491,
      492,  497,  335,  489,  492,  497,  335,  492,  497,  335,
      490,  492,  497,  332,  335,  492,  497,  335,  492,  497,
      332,  335,  492,  497,  333,  335,  492,  497,  334,  335,
      492,  497,  171,  175,  492,  497,  174,  487,  497,  173,
      175,  488,  491,  492,  497,  171,  175,  489,  492,  497,
      171,  175,  490,  492,  497,  171,  175,  492,  497,  492,
      497,   31,  492,  497,   33,  492,  497,   42,  492,  497,
       32,  492,  497,   43,  492,  497,   34,  492,  497,   34,

      487,  497,   34,  488,  491,  492,  497,   34,  489,  492,
      497,   34,  490,  492,  497,   35,  492,  497,   34,  492,
      497,  492,  497,   39,  492,  497,  492,  497,   36,  492,
      497,   37,  492,  497,   40,  492,  497,   40,  487,  497,
       40,  488,  491,  492,  497,   40,  489,  492,  497,   40,
      490,  492,  497,   41,  492,  497,   40,  492,  497,  379,
      492,  497,  108,  492,  497,  492,  497,  105,  492,  497,
      109,  492,  497,  109,  492,  497,  109,  492,  497,  492,
      497,  110,  492,  497,  106,  492,  497,  492,  497,  492,
      497,  492,  497,  492,  497,  492,  497,  116,  492,  497,

      492,  497,  117,  492,  497,  176,  492,  497,  176,  492,
      497,  169,  487,  497,  161,  176,  488,  491,  492,  497,
      176,  489,  492,  497,  167,  176,  490,  492,  497,  158,
      165,  176,  492,  497,  166,  176,  492,  497,  160,  176,
      492,  497,  176,  492,  497,  176,  492,  497,  160,  176,
      492,  497,  165,  176,  492,  497,  166,  176,  492,  497,
      176,  492,  497,  165,  176,  492,  497,  159,  165,  176,
      492,  497,  492,  497,  487,  497,  492,  497,  492,  497,
      492,  497,  132,  492,  497,  492,  497,  487,  497,  492,
      497,  492,  497,  248,  492,  497,  492,  497,  248,  492,

      497,  249,  492,  497,  247,  492,  497,  250,  492,  497,
      251,  492,  497,  101,  492,  497,  101,  488,  491,  492,
      497,  101,  489,  492,  497,  101,  490,  492,  497,  101,
      492,  497,   95,  101,  492,  497,   97,  101,  492,  497,
    16483,  258,  492,  497,  258,  492,  497,  487,  497,  258,
      488,  491,  492,  497,  258,  489,  492,  497,  258,  492,
      497,  258,  490,  492,  497,  258,  492,  497,  258,  492,
      497,  257,  258,  492,  497,  258,  492,  497,  262,  492,
      497,  264,  492,  497,  492,  497,  278,  313,  492,  497,
      281,  313,  492,  497,  281,  312,  487,  497,  282,  313,

      488,  491,  492,  497,  313,  489,  492,  497,  311,  313,
      490,  492,  497,  283,  313,  492,  497,  284,  313,  492,
      497,  313,  492,  497,  313,  492,  497,  301,  313,  492,
      497,  302,  313,  492,  497,  126,  492,  497,  125,  487,
      497,  126,  488,  491,  492,  497,  126,  489,  492,  497,
      126,  490,  492,  497,  126,  492,  497,  124,  126,  492,
      497,  492,  497,   81,  492,  497,  492,  497,   83,  492,
      497,   82,  492,  497,  182,  492,  497,  181,  487,  497,
      178,  182,  488,  491,  492,  497,  182,  489,  492,  497,
      182,  490,  492,  497,  182,  492,  497,  182,  492,  497,

      182,  492,  497,  182,  488,  491,  492,  497,  179,  182,
      490,  492,  497,  189,  190,  492,  497,  186,  487,  497,
      183,  190,  488,  491,  492,  497,  189,  190,  489,  492,
      497,  187,  190,  490,  492,  497,  184,  190,  492,  497,
      185,  190,  492,  497,  189,  190,  492,  497,  196,  199,
      492,  497,  198,  487,  497,  191,  199,  488,  491,  492,
      497,  196,  199,  489,  492,  497,  192,  199,  490,  492,
      497,  197,  199,  492,  497,  193,  199,  492,  497,  194,
      199,  492,  497,  430,  492,  497,  430,  492,  497,  429,
      487,  497,  430,  488,  491,  492,  497,  430,  489,  492,

      497,  430,  490,  492,  497,  427,  430,  492,  497,  428,
      430,  492,  497,  430,  492,  497,  420,  492,  497,  414,
      420,  492,  497,  414,  487,  497,  420,  488,  491,  492,
      497,  420,  489,  492,  497,  420,  490,  492,  497,  418,
      420,  492,  497,  419,  420,  492,  497,  420,  492,  497,
      412,  420,  492,  497,  413,  420,  492,  497,  420,  492,
      497,  329,  492,  497,  330,  487,  497,  325,  329,  488,
      491,  492,  497,  329,  489,  492,  497,  329,  492,  497,
      326,  329,  490,  492,  497,  329,  492,  497,  324,  329,
      492,  497,  328,  329,  492,  497,  265,  336,  492,  497,

      266,  336,  492,  497,  269,  492,  497,  269,  488,  491,
      492,  497,  269,  489,  492,  497,  269,  490,  492,  497,
      269,  492,  497,  269,  492,  497,  274,  492,  497,  273,
      274,  492,  497,  273,  487,  497,  274,  488,  491,  492,
      497,  274,  489,  492,  497,  274,  490,  492,  497,  270,
      274,  492,  497,  271,  274,  492,  497,  272,  274,  492,
      497,  274,  492,  497,  279,  313,  492,  497,  312,  487,
      497,  308,  313,  488,  491,  492,  497,  279,  313,  489,
      492,  497,  313,  490,  492,  497,  279,  313,  492,  497,
      313,  492,  497,  313,  488,  491,  492,  497,  309,  313,

      490,  492,  497,  280,  313,  492,  497,  280,  313,  489,
      492,  497,  303,  313,  492,  497,  304,  313,  492,  497,
      313,  492,  497,  305,  313,  492,  497,  306,  313,  492,
      497,  290,  299,  492,  497,  298,  487,  497,  290,  299,
      488,  491,  492,  497,  290,  299,  489,  492,  497,  290,
      299,  490,  492,  497,  299,  492,  497,  290,  299,  492,
      497,  299,  492,  497,  290,  299,  492,  497,  299,  492,
      497,16673,  296,  297,  492,  497,  292,  487,  497,  296,
      297,  488,  491,  492,  497,  296,  297,  489,  492,  497,
      296,  297,  490,  492,  497,  296,  297,  492,  497,  297,

      492,  497,  299,  492,  497,  299,  488,  491,  492,  497,
      299,  489,  492,  497,  299,  490,  492,  497,  299,  492,
      497,  299,  492,  497,  207,  492,  497,  207,  488,  491,
      492,  497,  207,  489,  492,  497,  207,  490,  492,  497,
      207,  492,  497,  204,  207,  492,  497,  207,  492,  497,
      215,  492,  497,  215,  492,  497,  487,  497,  215,  488,
      491,  492,  497,  215,  489,  492,  497,  215,  492,  497,
      215,  490,  492,  497,  215,  492,  497,  214,  215,  492,
      497,  211,  215,  492,  497,  215,  492,  497,  492,  497,
      487,  497,  492,  497,  208,  492,  497,  483,  492,  497,

      483,  488,  491,  492,  497,  483,  489,  492,  497,  483,
      490,  492,  497,  472,  483,  492,  497,  483,  492,  497,
      483,  492,  497,  492,  497,  487,  497,  492,  497,  475,
      492,  497,  492,  497,  474,  492,  497,  492,  497,  483,
      492,  497,  483,  492,  497,  483,  492,  497,  483,  492,
      497,  483,  492,  497,  476,  483,  492,  497,  482,  492,
      497,  482,  488,  491,  492,  497,  482,  489,  492,  497,
      482,  490,  492,  497,  481,  482,  492,  497,  482,  492,
      497,  484,  492,  497,  484,  488,  491,  492,  497,  484,
      489,  492,  497,  484,  490,  492,  497,  484,  492,  497,

      492,  497,  451,  487,  497,  488,  491,  492,  497,  489,
      492,  497,  490,  492,  497,  492,  497,  461,  463,  492,
      497,  462,  487,  497,  461,  463,  488,  491,  492,  497,
      461,  463,  489,  492,  497,  461,  463,  490,  492,  497,
      463,  492,  497,  463,  492,  497,  461,  463,  492,  497,
      463,  492,  497,  463,  492,  497,  461,  463,  492,  497,
      463,  492,  497,  463,  492,  497,  467,  470,  492,  497,
      469,  487,  497,  467,  470,  488,  491,  492,  497,  467,
      470,  489,  492,  497,  467,  470,  490,  492,  497,  470,
      492,  497,  470,  492,  497,  467,  470,  492,  497,  470,

      492,  497,  467,  470,  492,  497,  470,  492,  497,16850,
      494,  496,  143,  142,  143,  494,  496,  147,  399,  384,
      385,  385,  384,  385,  383,  378,  399,  384,  385,  408,
      388,  398,  494,  496,  386,  388,  390,  390,  406,  407,
      406,  407,  426,  408,  406,  407,  426,   44,   44,  133,
      119,  151,  256,   30,  494,  496,  121,   16,  119,   92,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,   13,   13,  494,   13,  496,   12,  119,  119,   93,

      119,  228,  494,  496,  228,  321,  320,  320,  321,  331,
      494,  496,  319,  331,  331,  331,  331,  331,  331,   77,
      232,  232,  252,  252,  234,  234,  237,  494,  233,  496,
      235,   88,   88,   88,   88,   89,   89,   89,  359,  359,
      362,  494,  363,  496,  367,  359,  357,  362,  494,  363,
      496,  361,  374,  374,  494,  374,  496,  371,  363,  496,
      141,  141,  140,  486,  486,  495,  493,  494,  486,  493,
      496,  485,  494,  496,  226,  222,  222,  494,  222,  496,
      245,  245,  436,  431,  437,  432,  494,  433,  496,  436,
      436,  436,   45,   45,  136,  333,  494,  496,  333,  171,

      172,  171,  494,  171,  496,   32,   33,   32,   34,   34,
      494,   34,  496,   37,   37,   37,   36,   40,   41,   40,
      494,   40,  496,  108,  109,  109,  109,  109,  110,  110,
      116,  116,  117,  117,  162,  494,  496,  163,  164,  170,
      276,  122,  247,  247,  247,   94,16483,   98,   96,  257,
      257,  257,  260,  259,  261,  263,  278,  281,  286,  494,
      287,  496,  123,   81,   81,   82,   82,  180,  180,  494,
      180,  496,  177,  189,  189,  494,  189,  496,  196,  427,
      414,  415,  416,  328,  328,  267,  268,  273,  272,  272,
      279,  279,  494,  279,  496,  307,  280,  290,  291,  290,

      496,  290,16673, 8481,  296,  296,  494,  296,  496,  211,
      213,  212,  211,  210,  208,  208,  208,  209,  208,  473,
      474,  474,  474,  479,  451,  494,  496,  461,  452,  456,
      494,  455,  496,  461,  461,  453,  453,  454,  455,  496,
      467,  468,  468,  494,  468,  496,  467,16850, 8658,  384,
      384,  385,  385,  384,  385,  396,  439,  397,  441,  406,
      407,  406,  407,    8,   44,   44,  256,  439,  441,   91,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      439,  441,  439,  441,  319,  331,  331,  331,  331,  331,
       74,  234,  240,  237,  238,  233,   88,   88,   89,  368,
      361,  140,  436,  436,  436,   45,   84,   85,  448,  447,
      150,  439,  441,   43,  109,  109,  109,  168,  247, 8291,
      100,  257,  310,  285,  188,  195,  327,  294,  213,  210,
      208,  208,  474,  479,  461,  458,  453,  454,  454,  154,
      384,  384,  385,  395,  440,  394,  442,  394,  442,  409,
      380,  406,  407,  406,  407,    8,   44,   44,  255,  440,
      440,  440,  155,  442,  442,  442,  442,  156,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  154,  440,  154,
      442,  331,  331,  331,  337,  331,  234,  240,   88,   88,
      368,  436,  436,  436,   45,   85,  150,   38,  109,  109,
      111,  168, 8291,  310,  285,  188,  195,  327,  295,  461,
      457,  465,  380,  380,  406,  407,  153,  152,   44,   44,
      135,  275,  156,  119,  119,  119,  119,  119,  119,  119,
      119,  119,   17,   17,   17,   17,   92,   72,   71,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,   12,  317,
      331,  331,  331,  331,   73,  135,  234,  253,   88,  354,
      130,  434,  436,  436,  436,  436,  107,  109,  109,  112,
      288,  293,  477,  459,  461,  460,  380,  406,  407,   44,
       44,   72,  156,   63,  119,  119,  119,  119,   65,   64,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,16452,  119,  119,  119,   70,   69,

       86,  119,  119,  119,  317,  317,  331,  338,  331,  331,
       88,  436,  436,  436,  109,  477,  480,  464,  406,  407,
      401,   44,   44,   65,16452,   70,  134,  119,  119,  119,
      119,  119,  119,  119,   48,  119,   51,  119,   19,  119,
      119,   56,  119,  119,  119,  119,  119,   24,  119,  119,
      119,   47, 8260,   67,  119,  119,  119,  119,  119,  119,
      339,  340,  331,   88,  436,  436,  436,  109,  113,  300,
      206,  205,  406,  407,  403,  400,   44,   44,   48,   51,
       19,   56,   24,   47, 8260,   29,  103,  119,  119,  119,
      119,   66,  102,  119,  119,  119,  119,   19,   57,   52,

      119,   26,  119,  119,  119,   24,  119,  119,   20,  119,
      119,  119,   49,  318,  331,   88,  435,  436,  436,  436,
      113,  478,  406,  407,   44,   44,   66,   57,   52,   26,
       20,   49,   27,  119,  119,   50,  119,   53,  443,  119,
      119,  119,   26,  119,  119,  119,  119,  119,   20, 8271,
       92,16463,   54,  318,  318,   88,  436,  417,  478,  406,
      407,  402,   44,   44,   50,   53,   54,   61,  104,  119,
      119,   62,  443,  443,  119,   58,   55,   55,16464,   55,
       55,   92,  119,  119,   25,  119,  119,  119, 8271,   91,
      244,   87,   88,  436,  471,  406,  407,  425,   44,   44,

       62,   58,   55,   25,   60,   28,  119,   55,  119,   18,
       25,  119,  119,  119,  436,  425,   44,   44,   18, 8272,
      119,   18,  119,   21,  115,  114,   44,   44,   21,  118,
       23,  119,   21,  115,  114,   44,   44,   23,   23,  119,
       44,   44,   22,   44,   44,   22,   59,   22,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44
    } ;

static yyconst flex_int16_t yy_accept[2898] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   13,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   18,   20,
       24,   27,   30,   32,   34,   37,   40,   43,   46,   52,
       56,   60,   63,   66,   68,   70,   72,   74,   76,   78,
       81,   85,   88,   90,   92,   95,   97,   99,  102,  105,
      107,  110,  112,  115,  118,  120,  123,  125,  127,  130,
      133,  136,  141,  145,  149,  152,  156,  160,  162,  165,
      167,  169,  172,  174,  177,  181,  184,  187,  191,  194,
      199,  203,  207,  210,  213,  216,  221,  225,  228,  231,
      234,  237,  240,  245,  249,  253,  257,  260,  264,  267,

      270,  273,  277,  279,  282,  285,  288,  291,  294,  296,
      299,  302,  305,  308,  310,  312,  315,  318,  321,  324,
      327,  330,  333,  336,  339,  342,  345,  348,  351,  354,
      357,  360,  363,  366,  369,  372,  375,  377,  381,  384,
      390,  395,  400,  404,  407,  409,  411,  413,  415,  418,
      420,  422,  424,  426,  429,  431,  434,  437,  440,  442,
      446,  449,  452,  455,  458,  461,  465,  468,  473,  478,
      482,  486,  490,  494,  497,  500,  505,  509,  513,  517,
      521,  524,  527,  530,  535,  539,  543,  546,  550,  554,
      558,  561,  564,  568,  571,  575,  579,  583,  587,  591,

      595,  598,  601,  606,  610,  614,  617,  620,  624,  627,
      630,  635,  639,  643,  646,  650,  654,  658,  663,  666,
      670,  676,  681,  686,  689,  692,  696,  700,  704,  707,
      711,  713,  716,  719,  722,  724,  726,  728,  730,  733,
      735,  739,  743,  746,  752,  757,  762,  765,  768,  771,
      775,  779,  783,  789,  792,  797,  800,  803,  806,  809,
      812,  818,  822,  826,  829,  832,  835,  840,  845,  851,
      856,  859,  863,  867,  870,  873,  876,  881,  885,  889,
      892,  895,  898,  901,  906,  910,  914,  916,  919,  921,
      924,  928,  931,  934,  936,  939,  942,  945,  948,  951,

      955,  958,  963,  967,  971,  974,  978,  982,  985,  988,
      991,  994,  997, 1002, 1006, 1010, 1013, 1016, 1019, 1021,
     1024, 1027, 1030, 1033, 1038, 1042, 1046, 1049, 1053, 1056,
     1061, 1065, 1069, 1072, 1075, 1079, 1083, 1086, 1092, 1097,
     1102, 1105, 1108, 1111, 1115, 1117, 1120, 1123, 1125, 1127,
     1130, 1133, 1138, 1142, 1146, 1149, 1152, 1155, 1159, 1163,
     1166, 1169, 1174, 1178, 1182, 1185, 1187, 1189, 1192, 1197,
     1201, 1205, 1208, 1212, 1215, 1218, 1223, 1227, 1230, 1234,
     1238, 1241, 1245, 1249, 1253, 1257, 1260, 1266, 1271, 1276,
     1280, 1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1308,

     1312, 1316, 1319, 1322, 1324, 1327, 1329, 1332, 1335, 1338,
     1341, 1346, 1350, 1354, 1357, 1360, 1363, 1366, 1368, 1371,
     1374, 1377, 1380, 1382, 1385, 1388, 1390, 1392, 1394, 1396,
     1398, 1401, 1403, 1406, 1409, 1412, 1415, 1421, 1425, 1430,
     1435, 1439, 1443, 1446, 1449, 1453, 1457, 1461, 1464, 1468,
     1473, 1475, 1477, 1479, 1481, 1483, 1486, 1488, 1490, 1492,
     1494, 1497, 1499, 1502, 1505, 1508, 1511, 1514, 1517, 1522,
     1526, 1530, 1533, 1537, 1542, 1545, 1548, 1550, 1555, 1559,
     1562, 1566, 1569, 1572, 1576, 1579, 1582, 1585, 1587, 1591,
     1595, 1599, 1605, 1609, 1614, 1618, 1622, 1625, 1628, 1632,

     1636, 1639, 1642, 1647, 1651, 1655, 1658, 1662, 1664, 1667,
     1669, 1672, 1675, 1678, 1681, 1687, 1691, 1695, 1698, 1701,
     1704, 1709, 1714, 1718, 1721, 1727, 1732, 1737, 1741, 1745,
     1749, 1753, 1756, 1762, 1767, 1772, 1776, 1780, 1784, 1787,
     1790, 1793, 1798, 1802, 1806, 1810, 1814, 1817, 1820, 1824,
     1827, 1832, 1836, 1840, 1844, 1848, 1851, 1855, 1859, 1862,
     1865, 1868, 1874, 1878, 1881, 1886, 1889, 1893, 1897, 1901,
     1905, 1908, 1913, 1917, 1921, 1924, 1927, 1930, 1934, 1937,
     1942, 1946, 1950, 1954, 1958, 1962, 1965, 1969, 1972, 1978,
     1983, 1987, 1991, 1994, 1999, 2004, 2008, 2013, 2017, 2021,

     2024, 2028, 2032, 2036, 2039, 2045, 2050, 2055, 2058, 2062,
     2065, 2069, 2073, 2077, 2080, 2086, 2091, 2096, 2100, 2103,
     2106, 2111, 2115, 2119, 2122, 2125, 2128, 2133, 2137, 2141,
     2144, 2148, 2151, 2154, 2157, 2159, 2164, 2168, 2171, 2175,
     2178, 2182, 2186, 2189, 2191, 2193, 2195, 2198, 2201, 2206,
     2210, 2214, 2218, 2221, 2224, 2226, 2228, 2230, 2233, 2235,
     2238, 2240, 2243, 2246, 2249, 2252, 2255, 2259, 2262, 2267,
     2271, 2275, 2279, 2282, 2285, 2290, 2294, 2298, 2301, 2303,
     2306, 2310, 2313, 2316, 2318, 2322, 2325, 2331, 2336, 2341,
     2344, 2347, 2351, 2354, 2357, 2361, 2364, 2367, 2371, 2374,

     2380, 2385, 2390, 2393, 2396, 2400, 2403, 2407, 2411, 2412,
     2413, 2414, 2414, 2415, 2416, 2416, 2416, 2417, 2418, 2419,
     2419, 2419, 2419, 2419, 2419, 2420, 2420, 2420, 2422, 2422,
     2422, 2422, 2423, 2423, 2423, 2423, 2425, 2426, 2427, 2428,
     2428, 2428, 2430, 2430, 2430, 2430, 2431, 2431, 2432, 2432,
     2433, 2434, 2435, 2435, 2435, 2435, 2436, 2437, 2437, 2437,
     2437, 2438, 2439, 2439, 2439, 2439, 2439, 2439, 2441, 2443,
     2444, 2445, 2445, 2445, 2445, 2447, 2447, 2448, 2448, 2448,
     2448, 2448, 2448, 2448, 2448, 2448, 2448, 2449, 2450, 2451,
     2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,

     2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
     2451, 2451, 2452, 2452, 2453, 2453, 2453, 2454, 2454, 2455,
     2456, 2457, 2458, 2459, 2459, 2459, 2459, 2459, 2460, 2461,
     2462, 2462, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
     2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
     2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489,
     2490, 2491, 2491, 2491, 2492, 2493, 2495, 2497, 2498, 2498,
     2498, 2498, 2499, 2499, 2499, 2499, 2500, 2501, 2501, 2501,
     2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2510,
     2510, 2510, 2510, 2510, 2511, 2512, 2513, 2513, 2514, 2515,

     2516, 2517, 2518, 2519, 2520, 2520, 2520, 2521, 2522, 2524,
     2525, 2525, 2526, 2527, 2527, 2527, 2529, 2531, 2532, 2532,
     2532, 2533, 2534, 2534, 2535, 2535, 2536, 2536, 2536, 2536,
     2537, 2537, 2537, 2538, 2538, 2538, 2539, 2540, 2541, 2541,
     2541, 2541, 2543, 2545, 2546, 2546, 2546, 2547, 2548, 2550,
     2552, 2553, 2553, 2554, 2556, 2558, 2559, 2561, 2562, 2563,
     2563, 2564, 2564, 2565, 2566, 2566, 2567, 2569, 2572, 2572,
     2573, 2574, 2575, 2576, 2577, 2579, 2581, 2582, 2583, 2583,
     2584, 2585, 2586, 2588, 2590, 2591, 2592, 2593, 2594, 2594,
     2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2596, 2596,

     2596, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2604, 2606,
     2607, 2608, 2608, 2609, 2610, 2612, 2614, 2615, 2615, 2615,
     2616, 2617, 2618, 2619, 2620, 2622, 2624, 2625, 2626, 2627,
     2627, 2627, 2628, 2629, 2630, 2631, 2631, 2631, 2631, 2631,
     2632, 2633, 2634, 2635, 2635, 2635, 2636, 2637, 2638, 2639,
     2640, 2641, 2641, 2641, 2641, 2641, 2642, 2642, 2642, 2643,
     2643, 2643, 2643, 2644, 2645, 2646, 2646, 2647, 2648, 2649,
     2649, 2650, 2650, 2650, 2650, 2651, 2651, 2651, 2652, 2652,
     2652, 2653, 2653, 2654, 2655, 2656, 2656, 2657, 2658, 2659,
     2659, 2659, 2659, 2659, 2661, 2663, 2664, 2665, 2666, 2667,

     2668, 2668, 2669, 2671, 2673, 2674, 2675, 2675, 2675, 2677,
     2679, 2680, 2680, 2680, 2680, 2681, 2682, 2683, 2684, 2684,
     2685, 2685, 2685, 2686, 2686, 2687, 2688, 2689, 2690, 2691,
     2692, 2694, 2696, 2697, 2698, 2699, 2700, 2702, 2702, 2702,
     2703, 2704, 2705, 2706, 2708, 2710, 2710, 2710, 2710, 2710,
     2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710,
     2710, 2711, 2711, 2712, 2713, 2714, 2714, 2715, 2715, 2715,
     2716, 2717, 2718, 2719, 2720, 2720, 2720, 2721, 2721, 2721,
     2721, 2721, 2721, 2722, 2722, 2722, 2723, 2723, 2723, 2724,
     2724, 2724, 2724, 2724, 2724, 2725, 2725, 2725, 2725, 2725,

     2726, 2727, 2728, 2729, 2729, 2730, 2732, 2734, 2735, 2735,
     2735, 2735, 2735, 2735, 2735, 2735, 2735, 2735, 2736, 2736,
     2736, 2737, 2738, 2741, 2742, 2743, 2745, 2747, 2747, 2747,
     2747, 2748, 2749, 2750, 2750, 2750, 2750, 2751, 2751, 2751,
     2752, 2752, 2753, 2753, 2753, 2754, 2754, 2754, 2756, 2756,
     2758, 2758, 2758, 2760, 2760, 2760, 2760, 2760, 2760, 2760,
     2762, 2762, 2762, 2763, 2763, 2764, 2764, 2764, 2764, 2764,
     2764, 2764, 2765, 2765, 2765, 2765, 2765, 2765, 2765, 2766,
     2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767,
     2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767,

     2767, 2767, 2767, 2767, 2767, 2767, 2767, 2768, 2768, 2768,
     2768, 2768, 2768, 2768, 2768, 2768, 2769, 2769, 2769, 2769,
     2770, 2770, 2770, 2770, 2770, 2770, 2770, 2770, 2770, 2771,
     2772, 2773, 2773, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789,
     2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2809, 2810, 2810, 2810, 2810, 2811, 2812, 2812, 2813, 2813,
     2813, 2813, 2813, 2813, 2813, 2814, 2814, 2814, 2815, 2815,
     2816, 2817, 2818, 2819, 2820, 2821, 2821, 2822, 2822, 2823,

     2823, 2824, 2824, 2824, 2825, 2826, 2826, 2827, 2827, 2827,
     2827, 2827, 2828, 2829, 2829, 2830, 2830, 2831, 2831, 2831,
     2831, 2831, 2832, 2832, 2833, 2833, 2834, 2835, 2836, 2836,
     2837, 2837, 2837, 2838, 2839, 2840, 2841, 2841, 2842, 2843,
     2843, 2844, 2844, 2845, 2845, 2845, 2845, 2846, 2847, 2848,
     2848, 2848, 2848, 2848, 2848, 2848, 2849, 2849, 2849, 2849,
     2849, 2849, 2849, 2849, 2849, 2849, 2850, 2850, 2850, 2851,
     2851, 2852, 2852, 2853, 2853, 2854, 2854, 2854, 2854, 2854,
     2855, 2855, 2855, 2856, 2856, 2856, 2856, 2857, 2857, 2857,
     2857, 2857, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2859,

     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2860,
     2861, 2862, 2863, 2863, 2863, 2863, 2863, 2864, 2865, 2865,
     2865, 2865, 2866, 2866, 2866, 2866, 2866, 2867, 2867, 2867,
     2867, 2867, 2867, 2868, 2869, 2870, 2870, 2870, 2870, 2871,
     2871, 2872, 2873, 2874, 2874, 2876, 2876, 2878, 2880, 2881,
     2881, 2881, 2881, 2882, 2882, 2884, 2885, 2886, 2886, 2886,
     2886, 2886, 2886, 2886, 2887, 2887, 2887, 2887, 2888, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889, 2889,

     2889, 2889, 2889, 2889, 2889, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2891, 2892, 2893, 2894, 2894, 2894, 2895,
     2896, 2897, 2898, 2899, 2899, 2899, 2899, 2899, 2899, 2899,
     2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
     2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2938,
     2940, 2942, 2942, 2942, 2942, 2942, 2942, 2943, 2944, 2945,
     2946, 2947, 2947, 2947, 2948, 2948, 2949, 2949, 2949, 2949,
     2949, 2950, 2951, 2951, 2952, 2952, 2952, 2952, 2952, 2953,

     2954, 2955, 2956, 2957, 2958, 2959, 2959, 2960, 2961, 2961,
     2962, 2962, 2962, 2962, 2962, 2963, 2963, 2964, 2964, 2964,
     2964, 2964, 2965, 2965, 2965, 2966, 2966, 2966, 2967, 2967,
     2967, 2968, 2968, 2968, 2968, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2970, 2970, 2970,
     2970, 2970, 2970, 2970, 2971, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2973, 2973, 2973, 2973,
     2973, 2974, 2974, 2974, 2975, 2977, 2977, 2977, 2977, 2977,
     2977, 2977, 2978, 2979, 2980, 2981, 2981, 2981, 2981, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,

     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2982, 2982, 2982, 2982,
     2982, 2982, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983,
     2984, 2984, 2984, 2984, 2984, 2984, 2984, 2985, 2986, 2987,
     2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2998,
     2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008,
     3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018,
     3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028,
     3029, 3030, 3030, 3030, 3030, 3030, 3032, 3033, 3034, 3035,
     3035, 3036, 3038, 3038, 3038, 3038, 3039, 3040, 3040, 3040,

     3041, 3042, 3044, 3045, 3046, 3047, 3049, 3050, 3050, 3050,
     3050, 3051, 3051, 3051, 3051, 3051, 3051, 3052, 3052, 3052,
     3052, 3052, 3052, 3052, 3052, 3052, 3052, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3054, 3054, 3054, 3056, 3057, 3057, 3057, 3057,
     3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057,
     3058, 3060, 3060, 3060, 3060, 3060, 3061, 3062, 3062, 3062,
     3062, 3062, 3062, 3062, 3063, 3063, 3063, 3063, 3063, 3063,
     3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063,
     3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063, 3063,

     3063, 3063, 3063, 3063, 3064, 3065, 3065, 3065, 3065, 3065,
     3065, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3072,
     3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082,
     3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092,
     3093, 3094, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103,
     3104, 3105, 3106, 3106, 3106, 3106, 3107, 3108, 3108, 3109,
     3110, 3111, 3111, 3112, 3113, 3114, 3115, 3116, 3116, 3116,
     3116, 3116, 3116, 3116, 3116, 3116, 3116, 3116, 3116, 3116,
     3116, 3116, 3116, 3116, 3116, 3116, 3116, 3117, 3117, 3118,
     3118, 3118, 3118, 3118, 3118, 3118, 3119, 3119, 3119, 3119,

     3119, 3119, 3119, 3121, 3121, 3121, 3122, 3122, 3123, 3124,
     3124, 3124, 3125, 3125, 3125, 3125, 3125, 3125, 3125, 3125,
     3125, 3125, 3125, 3125, 3125, 3125, 3125, 3125, 3125, 3125,
     3125, 3125, 3125, 3126, 3126, 3126, 3127, 3127, 3127, 3127,
     3128, 3128, 3128, 3128, 3128, 3128, 3128, 3129, 3130, 3131,
     3132, 3133, 3133, 3133, 3133, 3133, 3134, 3135, 3136, 3136,
     3136, 3137, 3138, 3139, 3139, 3140, 3141, 3142, 3143, 3144,
     3145, 3146, 3147, 3148, 3148, 3149, 3150, 3151, 3152, 3153,
     3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3161, 3161,
     3161, 3161, 3162, 3163, 3164, 3164, 3165, 3166, 3167, 3168,

     3169, 3169, 3169, 3170, 3170, 3170, 3171, 3171, 3171, 3171,
     3171, 3171, 3171, 3171, 3171, 3171, 3171, 3172, 3173, 3173,
     3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173,
     3173, 3175, 3176, 3176, 3177, 3178, 3179, 3179, 3179, 3179,
     3179, 3179, 3180, 3181, 3181, 3181, 3182, 3182, 3182, 3183,
     3183, 3183, 3183, 3183, 3183, 3183, 3184, 3184, 3184, 3185,
     3186, 3186, 3186, 3186, 3186, 3186, 3186, 3186, 3186, 3186,
     3186, 3187, 3189, 3190, 3191, 3192, 3193, 3193, 3193, 3194,
     3195, 3196, 3196, 3196, 3196, 3196, 3197, 3198, 3199, 3200,
     3200, 3201, 3202, 3202, 3203, 3204, 3205, 3206, 3207, 3208,

     3209, 3209, 3210, 3211, 3211, 3212, 3213, 3214, 3214, 3216,
     3216, 3217, 3219, 3220, 3221, 3221, 3222, 3222, 3222, 3222,
     3222, 3222, 3222, 3222, 3222, 3222, 3222, 3223, 3223, 3223,
     3223, 3223, 3223, 3223, 3223, 3225, 3225, 3226, 3227, 3227,
     3227, 3228, 3228, 3228, 3228, 3229, 3229, 3230, 3230, 3230,
     3231, 3231, 3231, 3231, 3231, 3231, 3232, 3232, 3232, 3232,
     3233, 3233, 3233, 3234, 3234, 3234, 3235, 3236, 3237, 3238,
     3239, 3240, 3240, 3240, 3240, 3240, 3241, 3242, 3243, 3244,
     3245, 3246, 3247, 3248, 3249, 3250, 3250, 3253, 3253, 3253,
     3254, 3255, 3256, 3256, 3257, 3258, 3258, 3258, 3259, 3259,

     3259, 3259, 3259, 3259, 3259, 3259, 3260, 3260, 3260, 3260,
     3260, 3260, 3262, 3263, 3264, 3265, 3265, 3266, 3266, 3267,
     3267, 3267, 3267, 3267, 3267, 3267, 3268, 3268, 3268, 3268,
     3269, 3271, 3272, 3273, 3274, 3275, 3275, 3275, 3275, 3275,
     3276, 3277, 3278, 3280, 3281, 3283, 3284, 3285, 3285, 3286,
     3287, 3288, 3289, 3291, 3291, 3292, 3294, 3295, 3295, 3295,
     3295, 3295, 3295, 3295, 3295, 3296, 3296, 3296, 3296, 3296,
     3299, 3300, 3301, 3301, 3302, 3303, 3304, 3304, 3304, 3304,
     3305, 3305, 3305, 3305, 3306, 3307, 3307, 3307, 3307, 3308,
     3309, 3309, 3310, 3310, 3311, 3312, 3313, 3314, 3315, 3316,

     3316, 3316, 3316, 3316, 3316, 3316, 3316, 3316, 3317, 3318,
     3319, 3319, 3319, 3320, 3320, 3320, 3320, 3320, 3320, 3320,
     3320, 3321, 3322, 3323, 3324, 3324, 3325, 3325, 3326, 3326,
     3327, 3327, 3327, 3328, 3329, 3329, 3329, 3329, 3330, 3330,
     3331, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3338,
     3339, 3339, 3339, 3340, 3341, 3342, 3343, 3343, 3343, 3343,
     3344, 3345, 3346, 3346, 3347, 3348, 3349, 3350, 3351, 3352,
     3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362,
     3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372,
     3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382,

     3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392,
     3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402,
     3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412,
     3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422,
     3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432,
     3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442,
     3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452,
     3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462,
     3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472,
     3473, 3474, 3475, 3476, 3477, 3477, 3477

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   35,   37,   38,   35,   39,   35,   40,   41,   42,
       43,   44,   45,   46,   35,   35,   47,   35,   48,   35,
       49,   50,   51,    1,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   35,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   35,   77,    1,   78,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,    1,   14,    1,   15,   16,   17,
       17,   17,   18,   19,   20,   21,   22,    1,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   25,   26,
       27,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   28,   29,   30
    } ;

static yyconst flex_int16_t yy_base[3326] =
    {   0,
        0,    2,   21,    0,   99,  109,  159,    0,  238,    0,
      317,    0,  116,  123,  396,    0,  474,  484,  493,  499,
      513,  519,  576,    0,  537,  547,  655,    0,  734,    0,
      812,  822,  831,  837,  860,  878,  556,  892,  899,  909,
      986,    0,  918,  928, 1063, 1069, 1082, 1102, 1121, 1134,
     1162, 1181, 1259,    0, 1338,    0, 1416, 1423, 1436, 1456,
     1429, 1443, 1194, 1469, 1501, 1521, 1519, 1534, 1553, 1562,
      938,  947,  960, 1089,  953, 1211, 1571, 1580, 1213, 1230,
     1590, 1616, 1471, 1625, 1648, 1661, 1668, 1674, 1725,    0,
     1623, 1802, 1484, 1804, 1878, 1927, 1977,    0, 2056,    0,

     1817, 1831, 1597, 1683, 2135,    0, 1696, 1811, 2214,    0,
     1702, 1837, 2293,    0, 1844, 1858, 2372,    0, 1903, 1936,
     1950, 2449, 2474,    0, 2553,    0, 2630, 2637, 2684,    0,
     2763,    0, 2841, 2918, 2996,    0, 2451, 2650, 1957, 2848,
     3075,    0, 2869, 2875, 2925, 2946, 3154,    0, 2897, 3231,
     2972, 3244, 3257, 3283, 2657, 3270, 3310,    0, 3389,    0,
     3466, 3468, 3481, 3483, 3496, 3516, 3503, 3529, 3539, 3552,
     3606, 3676, 3747,    0, 3571, 3632, 2953, 3585, 3650, 3702,
     3683, 3689, 3824, 3826, 3716, 3839, 3846, 3853, 3874, 3887,
     3901, 3907, 3914, 3920, 3937, 3939, 4006,    0, 4085,    0,

     4162, 4164, 4230,    0, 4308, 4384, 3613, 3657, 2895, 3264,
     3723, 3952, 4177, 4318, 4179, 4346, 8552,21259,21259,21259,
    21259,21259,    1,    0,  103,21259,  134, 1152,21259,21259,
    21259,  126,   13, 4395, 1172, 1466, 4336, 4402, 8519,21259,
     1900,  120, 1243, 3836, 1693, 1870, 4419,21259,21259,  152,
    21259,  132, 8517,21259, 8473, 2936, 2462,    0,21259,    0,
    21259,21259,21259,21259,  133,21259, 3670, 4427, 4441, 4449,
     4460,21259, 8505,21259, 3963,  127,21259,21259,21259,21259,
    21259,21259,  480,  411, 8462,21259, 8472,21259, 1635, 3864,
    21259,21259,21259,21259,21259, 3970,  494, 3974, 4536, 3980,

     4471,  882, 4482,    4, 3295,  978, 4207,21259,  500, 8498,
     4504,21259,21259, 8492,  791, 4509, 4525, 8466, 4550, 4608,
     4612, 4616, 4621, 4625, 4649, 4656, 4662, 4686, 4695, 4699,
     4724, 4728, 4734, 4759, 4770,21259, 2984,    0,21259,    0,
        0,    0,  514, 8488, 4564, 4774, 4783, 8492, 4809, 3992,
     4517, 4576,    0, 4798,  517,21259,    0,21259,  520,21259,
    21259,21259,21259, 4816,21259, 3625, 4666,21259,21259,21259,
    21259,21259, 1144,  546,21259,21259,21259,21259,21259,21259,
      818,21259,21259,21259,21259,21259,  855,21259,21259, 4823,
     4835,    0,21259,  856, 3565,    0, 8446, 8449,  492, 8429,

    21259,21259,21259,21259,21259, 4211,  874,21259, 8466,21259,
    21259,21259,21259,  882,21259,21259,    0, 3597, 1251, 1969,
    21259,  544, 8441,  905, 8482,21259, 3741,21259,  821,21259,
        0,21259, 4840, 4848, 4852, 4865, 4877, 8464, 4907, 4216,
        0, 1073,21259,21259,  569, 8428,  908, 8469,21259,21259,
     4912, 1114,  816,21259,21259,  956,  494,21259,21259,21259,
    21259,21259,21259, 8442,  959,    0,21259,21259,21259,21259,
     1054,21259,21259,21259, 8455,  832,21259,21259,21259, 1116,
      981,    0, 1201,    0,    0,    0, 8433, 1168, 8447,21259,
     8443, 8432, 8431, 1190,21259,21259,21259,21259,21259, 4475,

     4916,21259,21259,21259, 1209,21259,21259,21259,21259,21259,
    21259,    0,21259,    0,    0, 1215,21259,21259,    0,21259,
        0,21259,21259,21259,21259,21259, 1217,21259,21259,21259,
    21259,21259, 1483, 8375,    0, 4920, 4924,    0,    0,    0,
     8403,21259, 1491, 1060,    0,21259, 8402,    0, 4930,21259,
    21259,21259,21259,21259, 1497, 8361, 8359,21259,21259,21259,
    21259, 8407,21259,21259, 1504,    0,  902,21259,21259,21259,
    21259, 1517,21259,21259, 4934,21259,21259,    0,21259, 4938,
     1530, 4942,    0,21259,    0,21259, 8406,    0,    0, 1533,
        0,21259,  946, 4947,    0,21259,    0,    0,    0,    0,

        0,21259, 1536,    0,21259, 4960,21259, 4964,    0,    0,
        0,    0,    0, 1093, 1540,21259, 1097,    0,21259,  834,
     1622, 1640,    0,    0,21259, 8378, 8376, 8377, 8360,    0,
        0,    0,    0,21259, 4969, 4977,21259,21259, 8353,21259,
    21259, 4981, 8375, 1548, 4987, 8367, 8363, 8381,21259,21259,
     4999, 5007, 5015, 5023, 1824,21259, 5029, 5042, 5055, 5068,
     5081, 1561, 5085,21259, 5089,21259,21259,21259,21259,21259,
    21259, 1570, 8358, 5093,21259, 5104, 5108,21259,21259, 5119,
    21259, 1588, 8358, 5130, 5141,21259, 5152, 8328,    0, 5156,
     5163,21259,21259, 8327,21259, 5167, 1664,21259,21259,21259,

    21259,21259,21259,21259,21259, 1670, 8351,    0,    0,    0,
    21259, 8350,21259,21259,21259,21259,21259, 8353, 1813,    0,
    21259,21259,    0,21259,21259,    0, 8316,21259,21259, 1827,
        0,21259,21259,    0, 8304, 1835,21259,21259,21259, 1156,
    21259,21259,21259,21259,21259,21259, 1839,21259, 5175, 5179,
    21259,21259,21259,21259,21259, 1848, 8327, 8322, 8272,21259,
    21259,21259,21259,    0, 8286, 1898,21259,    0,21259,21259,
    21259,21259,21259,21259, 5185, 1901,21259, 5189, 5208,21259,
    21259,21259,21259,21259, 5212, 1907,    0,21259,21259,    0,
    21259, 1923,    0,21259,21259,    0,    0,21259,21259, 1940,

    21259,21259,    0,21259,    0,    0,    0, 8316, 1948, 1013,
     1608, 5216,    0,21259,    0,    0,    0, 2620, 5173,21259,
    21259,21259,21259, 2628, 1086,21259,21259,21259,21259, 2632,
    21259, 8265,21259, 5236, 5247,21259,21259,    0,21259, 2640,
    21259, 5255, 8278, 5261, 5270,    0, 5278,21259,21259,21259,
    21259, 3882, 2652, 8260, 5284, 5289, 5295,21259, 8302, 5306,
     5311, 4362, 1931, 8257, 8260, 8252,21259,21259,21259,21259,
    21259,21259, 2653,21259,21259,21259,21259, 2659, 8313,21259,
     8312, 8310, 8297, 2860,    0,21259,    0,    0,    0, 2850,
     2870,   91, 5272, 5288, 4364, 2882, 2893,    0,21259,    0,

        0,    0, 8271, 2944, 8265, 1094, 1886, 5320,21259,21259,
     1706, 3610,21259, 3644, 5351, 3221,  963, 1188,21259, 8277,
     5355, 5362, 5379, 8236, 1451, 5387,    0, 5391, 5396, 5415,
     5425, 5433, 5437, 5445, 5457, 5461,21259,21259, 1455, 5467,
     5486, 5494, 5498, 5503, 8229, 5507,    0, 5511, 5533, 5541,
     1221, 3515, 5545, 8185, 5553,21259, 5557, 5568, 5579, 5587,
        0,    0, 5591, 8217, 5598, 5606, 5614, 5623, 5629, 1961,
     5633, 5646, 5658, 8228, 5666, 8212, 2467, 3175, 8180, 8159,
     8214, 1230, 5683, 3239, 5693, 3260, 5711, 5701, 2922, 8200,
      423, 8166, 8163, 8160, 2589, 8138,  869, 8132, 8143, 8130,

     3235, 8136, 2778, 1008, 8111, 8098, 3417, 4495, 8105, 5718,
        0, 5723, 5727, 1419, 5740, 5748, 5783, 5787, 5674, 4740,
     5402, 5800,21259, 8098, 1512, 3234, 5811, 5815, 8132, 5822,
     8104, 5826, 5846, 5850, 5855, 5863, 5887, 5891, 5896, 5900,
     5927, 5932, 5937, 5961, 5965, 5972, 5976, 6000, 6008, 6024,
     6032, 6036, 6064, 6071, 6075, 6103, 6107, 6111, 6139, 6144,
     6148, 5944, 6049, 6152,    0,    0,    0, 8086, 5839, 8128,
        0, 6156, 6079, 6180, 6189, 6193,21259, 6116, 6217, 6202,
        0, 5112, 6223,    0, 6228, 6060, 6232, 6236, 6243, 8083,
     8094, 1593, 8079,    0, 1511, 4312, 6251, 6262,    0, 8078,

     8080, 8047, 8039, 8050, 6272, 6276,21259,    0, 6290, 6308,
     3491,    0, 4993, 8096, 1565, 6312,    0,21259, 6316, 8041,
     6320, 6324, 6328, 6346, 8078, 6350, 6354, 8074,    0, 6358,
     6380, 6388, 6396, 6400, 6413,    0,    0, 3589, 5652, 8083,
     1796, 1600, 4371,21259, 6421, 3511, 3897, 3496,21259,21259,
     8089, 1895,21259,21259,21259,21259, 3584, 8088, 8073, 2632,
     8071, 2978,    0, 3645, 8050,21259,21259,    0, 8065,21259,
     8063, 8062, 6425,    0,    0,    0,    0,    0, 7993,    0,
     6429,21259,21259,21259, 7996, 7995, 7997, 8035, 8038, 8025,
     6433, 6439, 6444, 6457, 7966, 7965, 8028,21259, 1618, 6461,

     1659,    0, 1708, 4541,    0,    0,21259,    0,    0,    0,
     3551, 6466,    0,    0,    0,    0, 6476, 6480, 8015, 6484,
     6488,21259,    0, 3680,    0,    0, 3715, 1397, 1783, 8009,
     8004, 2848, 2892,    0,    0, 7976,  821, 7976, 7982,    0,
        0,    0,    0, 8005, 3492,21259, 5194, 6495,21259,21259,
    21259, 6500, 6513, 6523, 6527,21259, 6544, 3927,21259, 6550,
     6563, 6576, 6589, 6593, 6597, 7964,21259, 6601, 6605, 7985,
    21259, 6613, 7984,    0, 6618, 6531, 6624, 6646, 6650, 6658,
        0, 6668,21259,21259,21259, 7944,21259,    0, 6672, 7983,
     3518, 6679, 3547, 1854, 1921,21259,    0,    0, 7970, 7968,

     7967,21259,21259,21259,21259,    0, 7978, 3678,    0,    0,
        0, 7968, 3691, 3720,21259, 6683,21259,21259, 7910,    0,
     7965, 3716,    0, 6692,21259,21259, 6697, 6703, 6707,    0,
        0,    0,21259,    0,    0,21259,    0, 7906, 7909, 4187,
     6716, 6720,    0,    0,    0, 7902, 7901, 4303, 7810, 7827,
     7817, 7811, 7803, 7801, 3819, 7794, 6724, 6732, 6740, 7808,
     6744, 6759, 6763,21259, 6774, 7807, 6780, 6789, 6797, 6805,
     6809, 6813,21259, 6824, 4328,    0, 4356, 7825, 7790, 6828,
     7821,    0, 6835, 6839, 6850, 6858, 6862, 6873,    0, 6339,
     3933, 7777, 7768, 4407, 3736, 7768, 7763, 7755, 7809,21259,

     7808, 7807,    0, 3558,21259,21259,21259, 2818, 7779, 7721,
     7719, 4447, 7713, 7729, 7728, 7723, 7708, 5048, 7757, 7751,
    21259, 3973, 4435,    0,21259,21259,21259, 3203, 7703, 4363,
     4487, 6881, 6885, 1864, 3543, 7742, 6889, 6894, 6902, 6913,
     6917, 6921, 6938, 6946,    0, 6954, 6928, 6962, 6966,21259,
        0, 4198,21259, 7733, 6970, 7689, 6978, 6992, 6996, 7004,
     7008, 7021, 7032,    0, 7726, 7036, 7664, 7665, 7672, 7638,
     7697,21259, 7690, 3941, 2447, 3856, 2956, 3935, 7074, 7049,
     7061, 7633, 7629, 7640, 1107, 7622, 7619, 4428, 3773, 7633,
     7634, 7616, 7628, 7612, 7618, 3939, 7625, 7619, 2828, 7610,

     7602, 7599, 7592, 7592, 6282, 7596, 7055, 7084, 7097, 7102,
     7146, 7158, 7622, 7612, 4690, 4705, 4765, 3921, 7114, 4992,
     5651, 4100, 7164, 7585, 7561, 7544, 4133, 7560,21259, 7172,
     7186, 7196, 7548, 7202, 7210, 7214, 7219, 7243, 7247, 7252,
     7260, 7284, 7289, 7293, 7297, 7326, 7330, 7334, 7339, 7363,
     7367, 7374, 7398, 7402, 7406, 7410, 7435, 7441, 7446, 7470,
     7474, 7482, 7486, 7511, 7517, 7521, 7525, 7553, 7557, 7562,
     7567, 7549, 7301, 7586, 7591, 7579, 7596, 7597, 7598, 7542,
     7545, 7536, 7509, 7516,21259,    0, 4414,21259, 7563, 7256,
     7505, 7504, 7507, 7615, 7510, 7628,21259, 7525, 7026, 7540,

    21259, 7538, 4335, 7632,21259, 7639,    0, 7471, 7487, 7647,
     7655, 7663, 7667, 7671,    0, 7530,21259, 7528, 4373, 3849,
     4160, 7534, 7523, 7529, 7477, 7475, 7461, 7443,    0, 7492,
     7693, 7701,21259, 7709,21259,21259, 7714, 7718, 7483, 7478,
     7476,  528,21259, 7482, 7489, 7469, 7471, 4613, 4510, 7455,
     7449, 7446, 7430, 7411, 7443,21259, 7442, 4427, 5706, 7723,
     7369, 5806, 7724, 7364, 7390, 7383, 7729, 7737, 7752, 7756,
    21259, 7760,    0, 7419,21259, 7417, 4551, 3905, 4316, 7401,
     7415, 7411,21259, 7409, 4563, 7408,21259, 7406, 4636, 7359,
     7387,21259, 7383, 4695, 7328, 7316, 7325, 7304,21259, 7310,

     7302, 7298, 7292, 7297, 7302,    0, 7285, 7773, 7788, 7792,
     7796, 7800, 7327, 7324, 7276, 7804,    0, 4465, 7270, 7261,
     7272,   87,    0, 7883, 7267, 7250,21259, 7253, 7244, 7246,
     7221, 7217, 7265, 4802, 4871, 3598, 7222,    0,21259, 7812,
     7817, 7821,    0, 7826,21259, 7262,21259, 4191,21259, 7961,
     7969, 7250, 7848, 7852, 7978, 7983, 7253, 7860, 7216, 7210,
     7180, 7168, 7225,21259, 4745, 7204, 7203, 8047, 7995, 7154,
     7149, 7140, 7145, 7132, 7129, 7130, 7136, 7129, 7128, 7123,
     7121, 7115, 7088, 7094, 7081, 7099, 7085, 7061, 1766, 7069,
     7052, 7044, 7040, 7051, 7030, 7023, 7023, 7039, 4638, 7030,

     8000, 8008, 8021, 7870,21259, 8025, 8054, 7073, 4536, 8069,
     7053, 8082,21259, 5904, 4145,21259, 7060, 6582,21259, 6629,
     4322, 4324,    0, 7003, 6999, 6999, 6971, 6971, 6969, 8119,
     8123, 8127, 8131, 8135, 8163, 8167, 8171, 8199, 8260, 8204,
     8228, 8289, 8294, 8299, 8303, 8328, 8342, 8216, 8353, 8357,
     8366, 8382, 8392, 8396, 8422, 8428, 8435, 8452, 8461, 8465,
     8469, 8478, 8495, 8502, 8506, 8530, 8534, 8541, 6962,21259,
    21259, 6950, 6948, 6950, 7874, 6962, 6932, 6945, 6914, 8077,
     6905, 6935, 8086, 4882, 6949,21259, 4882, 6879,    0, 8175,
     8545, 8567, 6934,21259, 5055, 6919, 4368, 6876, 6871, 1123,

     6856, 6891, 8208, 8180,21259,    0, 4571, 4609, 6864,21259,
     6834, 6832, 6835, 6857,21259, 5119, 8240, 8571, 8575, 6823,
     6834,21259, 5256, 6810,21259,    0, 6823,21259, 5320, 6813,
    21259, 5351, 6758, 6811,21259, 5366, 6763, 6750, 6748,    0,
     6740, 6729, 6714, 6720, 6705, 8526,21259, 4367, 5756, 6717,
     6688, 6681, 6679, 6713,21259, 8637, 6682,    0, 6652, 6657,
     6627, 6637, 6624,  858, 8540,21259, 4454, 8605,    0, 8715,
     8723, 8439, 8614,    0, 8727, 6618, 6623, 6613, 6613, 6654,
     6645,21259,21259, 8793, 8731, 6591, 6575, 6573, 6587, 6568,
     6574, 8244, 6558, 6551, 6519, 6518, 6505, 6496, 6508, 6476,

     6476, 6484, 6453, 6468, 6463, 6453, 6447, 6454, 6435, 6440,
     1636, 6429, 6419, 6402, 6402,21259, 6407, 8737, 8753, 6433,
     6428,21259, 5519, 5565,    0, 8760, 8764, 6440, 4452,    0,
     6380, 6382, 6352, 6367, 3239, 6349, 8777, 8787, 8815, 8828,
     8802, 8865, 8869, 8880, 8893,21259, 8897, 6385, 6380, 8904,
    21259, 8908, 8921, 8936, 8946, 8950, 8960, 8984, 8988, 8993,
     9018, 9022, 9026, 9031, 9035, 9061, 9065, 9078, 9089, 9106,
     9113, 9119, 9123, 9147, 9152, 9157, 9161, 9189, 9193, 9197,
    21259, 6325, 6323, 6302, 6304, 8253, 8338, 9073, 8832, 8622,
    21259,    0, 6355, 6334, 6283,21259, 9205, 6325, 6324,21259,

    21259,    0, 6268, 6251, 6247, 1925, 5038, 6257, 4488, 6250,
    21259, 6261, 6259, 9222, 6258, 6249,21259, 6247, 6238, 6232,
     6213, 6170, 6204, 6198, 6142, 6128,21259, 6124, 6113, 6121,
     6125, 6111, 6109, 6108, 6095, 6112, 6106, 6073, 6078, 6061,
     6032, 4739, 4893, 6041,    0,21259, 6031, 6018, 6026, 6017,
     5985, 6015, 5958, 5955, 5949, 5953, 5934, 5921, 9236,    0,
     9245, 5926, 5902, 8627, 5908, 9249, 9262,   46,  472, 9271,
      503, 9275,  757, 9279,  806,  843,  867,  902, 1069, 1067,
     1148, 1201, 1392, 1418, 1432, 1475, 1499, 1591, 1657, 1661,
     1788, 1793, 1827, 1860, 9284, 1848, 1899, 2394, 2416, 9288,

     2652, 9296, 9301, 2669,21259, 2811, 2837, 2840, 2896, 2913,
     2935, 9308, 9318, 9332, 9342, 9366,21259, 9371, 9375, 9380,
     9404, 9408, 9412, 9447, 9417, 9453, 9457, 9461, 9486, 9490,
     9494, 9498, 9502, 9526, 9530, 9535, 9540, 9565, 9569, 9573,
     9578, 9605, 9613, 9617, 9629, 9642,21259, 9646, 9653, 9658,
     9683, 9325, 2922, 9687, 2933, 9692, 9698, 9710,21259, 9714,
     9721, 3181, 9729, 3198, 3197, 3401, 5056, 3451, 5520, 3475,
     3462, 4778, 3478, 3479, 3532, 3552, 3575, 3615, 3645, 3676,
     3759, 3779, 3816, 3815, 3829, 3841, 4803, 5220,21259, 3906,
     3915, 3925, 3939, 4097, 4132,21259, 4151, 4253, 4280, 4279,

     4293, 4345, 9733, 9737, 4368, 9756, 9760, 9764, 9768, 4398,
     4427, 9772, 4433, 9776, 4454, 4470, 4481, 9783, 9790, 4511,
     9794, 4494, 4506, 9798, 4525, 4533, 4533, 4533, 4534, 9803,
     4552, 9807, 9811, 4591, 4591, 9816, 4587, 4621, 4630,21259,
     4648, 4659, 4656, 4646, 4655, 9825, 9832, 9836, 9840, 9847,
     9864, 4662, 4664, 9872, 9889, 9899, 9903, 9909, 4718, 9933,
    10005, 9937, 9941, 9945, 9949, 9974, 9979,10035,10039,10043,
    10047,10071,10076,10083,10087,10100, 4708,10111,10116,10124,
    21259,10141,10152,10156,10165,10169,10180, 9988,10197, 4733,
    10204,21259,10215,10219, 4741,10223, 4752, 4768, 4769, 5150,

     4802, 5872,    0, 4810, 4789, 4872, 4784, 4783, 4783, 4799,
     4788, 4808, 4809, 4826, 4837, 4831,21259,21259, 4830, 4850,
     4850, 4889, 4879, 4897, 4883, 4903, 4907, 4918, 4922, 4911,
    10231,10240, 4937,10248,10253,10257, 4929, 4934,10261, 4941,
     4951,10265,10269, 4968,10279,10283,10287,10295,10301,10305,
     4974,10309, 4969, 4978,10317,10321, 4973,10325,10331,10339,
    10347, 4983, 4974,10351, 4991, 4984, 4999,10355, 4998, 5005,
    10359,10363,10367,10371,10378,10395, 5005,10403,21259,10419,
    10423, 5122, 5017, 5030, 5037,10430,10434,10447,10458,10462,
    10467,10472,10496,10500,10505,10510,10522,10534,10538,10546,

    10550,10554,10577,10611,10582,10586,10594, 5046,10590, 5057,
    10619,    0, 5072, 5072, 5108,    0, 5109,10623, 5073, 5088,
     5088, 5097, 5099, 5132, 5130, 5401, 5201, 5126, 5141, 5162,
     5161, 5159, 5189, 5178,10627,10636,10644,10649, 5187,10653,
    10659, 5188,10675, 5197,10683,10687,10691, 5198,10697,10701,
     5198, 5212, 5222, 5218,10709,10713,10719,10723, 5238,10731,
     5231, 5246,10735, 5249,10739,10746,10750,10754,10758,10783,
    10793, 5291, 5264, 5250, 5260,10797,10807,10870,10811,10824,
    10831,10835,10840,10904,10848,10910, 5299, 5313, 5267,10920,
    10864,10934,10948,10952, 5266, 5308, 5315,10956, 5274, 5303,

     5303, 5304, 5339, 5515, 5794, 5420, 5335, 5347, 5357, 5355,
     5381,10960,10969,10977,10982, 5388,10986,10990,10994,10998,
    11004, 5387, 5385,11008, 5385,11012, 5404,11016,11020,11024,
    11030,11034,11038,11042,21259, 5460, 5403, 5402, 5411,11046,
    11062,21259,11119, 5455, 5456,11070,11077,11197,11094,11201,
    11205,11210,21259, 5422,11101,11214, 5431, 5561, 5562, 5430,
     5466, 5472, 5475, 6043,21259, 5489, 5488, 5518, 5521,11236,
    11105,11240, 5542,11109,11244,11248, 5533,11253,11266,11275,
     5542, 5536, 5541,11279,11283, 5543, 5565, 5556,11288,    0,
    11292,11296,11300,11304,11312,11326,11330,11336, 5558, 6013,

     6090, 5553, 5567, 5575, 5564, 5580, 5580,11360,11365,11371,
     5575,11375,11382, 5592,11386, 5603,11397, 5595,11401,11408,
    21259,11412,11416,11420,11426,11436, 6281,    0, 6365,    0,
     5606, 5614,11450,11458,11462, 5621,11466,11470, 5633,11474,
    11490,11494,11498,11502,    0,    0,11506,11522,11526,11530,
     5630, 5642,11534,11538,11548,11552,11562,11567,11574,11578,
    11584,11588,11600,11604,11610,11614,11622,11626,11630,11634,
    11638,11642,11648,11656,11664,11668,11672,11678,11682,11690,
    11694,11700,11704,11712,11716,11722,11726,11734,11738,11744,
    11748,11756,11760,11766,11770,11778,11782,11788,11792,11800,

    11804,11810,11814,11822,11826,11832,11836,11844,11848,11854,
    11858,11866,11870,11876,11880,11888,11892,11898,11902,11910,
    11914,11920,11924,11932,11936,11942,11946,11954,11958,11964,
    11968,11976,11980,11986,11990,11998,12002,12008,12012,12020,
    12024,12030,12034,12042,12046,12052,12056,12064,12068,12074,
    12078,12086,12090,12096,12100,12108,12112,12118,12122,12130,
    12134,12140,12144,12152,12156,12162,12166,12174,12178,12184,
    12188,12196,12200,12206,12210,12218,12222,12228,12232,12240,
    12244,12250,12254,12262,12266,12272,12276,12284,12288,12294,
    12298,12306,12310,12316,12320,21259,12339,12369,12399,12429,

    12459,12489,12519,12549,12579,12609,12639,12669,12699,12729,
    12759,12789,12819,12849,12879,12909,12939,12969,12999,13029,
    13059,13089,13119,13149,13179,13209,13239,13269,13299,13329,
    13359,13389,13419,13449,13479,13509,13539,13569,13599,13629,
    13659,13689,13719,13749,13779,13809,13839,13869,13899,13929,
     5685,13958,13981,14010,14039,14062,14085,14114,14137, 5693,
     5815,14160,14187,14211,14240,14269,14292,14316,14345,14369,
    14398,14427,14450, 5694, 5898, 5709, 5900,14474,14504,14534,
     5713,14563,14586,14615,14638,14662,14692,14722,14752,14782,
    14812, 5714, 5927,14842, 5715, 5972, 5723,14871,14895, 5731,

     6121, 5735, 5990,14925, 5745, 5992,14955, 5747,14984,15008,
     5753, 6734, 5755, 6105, 5756, 6163, 5769, 6184,15038,15067,
    15090,15113,15136,15160,15189,15212,15236,15266,15296, 5770,
     6193, 5774, 6233,15326,15356,15386,15416,15446, 5782,15476,
     6244,15506,15536,15566,15596,15626,15655, 5797,15679,15703,
    15732, 5798,15755,15778,15801,15830,15853,15877,15907,15937,
    15967,15996,16019, 5809,16048,16071,16094,16117,16140,16163,
     5813,16186,16209,16232, 6265,16255,16282,16305, 5903,16329,
    16359,16389, 5822,16418,16441,16464,16487,16510,16534, 5837,
    16563,16586,16609, 6282, 6322,16633,16663,16693,16723,16753,

    16782,16805, 5846,16828,16851, 6354,16875,16905,16935,16965,
    16995,17025, 6355,17055, 6371, 5935,17084,17107,17131, 6565,
     6389,17161, 6428,17191,17220,17244, 7104,17266, 6489, 6495,
     6527,17290,17320,17349,17372,17395,17418,17443,17472, 5848,
    17495,17518, 6533,17542,17572,17602,17632, 6539, 6552,17662,
    17692,17722,17752,17782,17812, 6613,17842,17872,17902,17932,
    17962,17992,18021,18045,18069,18098,18121,18144,18167, 5852,
     6714, 5858,18190,18213, 6640,18237,18267, 6022,18297,18327,
    18356,18379,18402,18425,18448, 6771,18471,18500,18523,18547,
    18577,18606,18635,18658,18687,18710,18733, 5860, 6832,18757,

    18786,18815,18838,18861,18884,18908,18938,18967,18990,19013,
    19042, 6772,19066,19096,19126,19156,19185,19208,19231,19254,
     6780,19284,19314, 5861, 6855,19343,19366, 6036,19382, 7162,
    19406,19436,19465,19488,19511, 6833,19541, 6093,19571,19601,
    19631,19661,19690,19713, 6884,19736, 6910,19766, 5863,19796,
    19826,19855,19878, 6937,19901,19924,19953,19976,19999,20022,
     7066,20045,20069,20098,20121,20144, 7101,20167,20190,20214,
    20244,20273, 6967,20297,20327,20357,20387,20416,20439,20463,
    20493, 7141,20522, 5873, 7214,20546,20575,20599, 5883,20629,
    20659,20689,20719,20748,20772,20802, 5902,20831,20854, 6968,

    20877,20900,20923, 7444, 5914,20946,20970,21000,21029,21052,
    21076,21105,21129, 7367,21158,21181, 7457, 6997,21205, 5934,
    21234, 8037, 8976, 7026, 7044
    } ;

static yyconst flex_int16_t yy_def[3326] =
    {   0,
     2897, 2897, 2896,    3, 2898, 2898, 2896,    7, 2896,    9,
     2896,   11, 2899, 2899, 2896,   15, 2900, 2900, 2897, 2897,
     2901, 2901, 2896,   23, 2902, 2902, 2896,   27, 2896,   29,
     2897, 2897, 2897, 2897, 2903, 2903, 2904, 2904, 2905, 2905,
     2896,   41, 2906, 2906, 2907, 2907, 2908, 2908, 2908, 2908,
     2908, 2908, 2896,   53, 2896,   55, 2909, 2909, 2909, 2909,
     2897, 2897, 2910, 2910, 2910, 2910, 2911, 2911, 2912, 2912,
     2897, 2897, 2913, 2913, 2914, 2914, 2897, 2897, 2897, 2897,
     2915, 2915, 2897, 2897, 2897, 2897, 2916, 2916, 2896,   89,
     2917, 2917, 2918, 2918, 2919, 2919, 2896,   97, 2896,   99,

     2920, 2920, 2921, 2921, 2896,  105, 2922, 2922, 2896,  109,
     2923, 2923, 2896,  113, 2924, 2924, 2896,  117, 2925, 2925,
     2897, 2897, 2896,  123, 2896,  125, 2897, 2897, 2896,  129,
     2896,  131, 2926, 2926, 2896,  135, 2897, 2897, 2897, 2897,
     2896,  141, 2897, 2897, 2927, 2927, 2896,  147, 2897, 2897,
     2928, 2928, 2929, 2929, 2930, 2930, 2896,  157, 2896,  159,
     2931, 2931, 2931, 2931, 2932, 2932, 2933, 2933, 2934, 2934,
     2935, 2935, 2896,  173, 2936, 2936, 2937, 2937, 2938, 2938,
     2939, 2939, 2939, 2939, 2940, 2940, 2929, 2929, 2941, 2941,
     2942, 2942, 2943, 2943, 2944, 2944, 2896,  197, 2896,  199,

     2945, 2945, 2896,  203, 2945, 2945, 2946, 2946, 2947, 2947,
     2948, 2948, 2949, 2949, 2950, 2950, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2951, 2952, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2953, 2954, 2896, 2896,
     2955, 2896, 2956, 2896, 2896, 2896, 2957, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2958, 2959, 2960, 2896, 2961,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2962, 2962, 2962,
     2962, 2896, 2896, 2896, 2963, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2964, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2965, 2896, 2966, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2967, 2967, 2968, 2967, 2967,
     2967, 2967, 2967, 2967, 2967, 2967, 2967, 2967, 2967, 2967,
     2967, 2967, 2967, 2967, 2967, 2896, 2969, 2970, 2896, 2970,
     2970, 2970, 2970, 2896, 2896, 2896, 2971, 2896, 2972, 2973,
     2896, 2896, 2974, 2896, 2896, 2896, 2975, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2976, 2896, 2896, 2896, 2977, 2977, 2977, 2977, 2977,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2978, 2978, 2896, 2896,
     2896, 2979, 2980, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2981, 2896, 2982, 2982, 2896, 2896, 2983, 2896, 2984, 2985,
     2986, 2986, 2896, 2896, 2896, 2987, 2896, 2896, 2896, 2896,
     2896, 2986, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2988, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2989, 2989, 2989, 2989, 2989, 2896, 2989, 2990, 2896,
     2990, 2990, 2990, 2990, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2991, 2896, 2991, 2991, 2991, 2896, 2896, 2992, 2896,
     2993, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2994, 2896, 2896, 2994, 2994, 2994,
     2896, 2896, 2896, 2994, 2995, 2896, 2996, 2997, 2998, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2999, 2896, 2896, 2896, 3000, 3001, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 3002, 2896, 2896,
     2896, 2896, 3003, 2896, 3004, 2896, 2896, 3004, 3004, 3004,
     3005, 2896, 2896, 2896, 3006, 2896, 3007, 3007, 3007, 3007,

     3007, 2896, 3007, 3008, 2896, 2896, 2896, 3009, 3010, 3010,
     3010, 3010, 3010, 2896, 3010, 2896, 2896, 3011, 2896, 3012,
     3012, 3012, 3013, 3014, 2896, 2896, 2896, 2896, 2896, 3015,
     3016, 3017, 3018, 2896, 2896, 2896, 2896, 2896, 3019, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     3020, 3020, 3020, 3021, 2896, 2896, 3022, 3022, 3022, 3022,
     2896, 2896, 2896, 2896, 3023, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3024,
     2896, 2896, 2896, 3025, 3026, 2896, 2896, 3027, 3028, 2896,
     2896, 2896, 2896, 3029, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 3030, 3031, 3032,
     2896, 3033, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3034,
     2896, 2896, 3035, 2896, 2896, 3035, 3036, 2896, 2896, 3035,
     3037, 2896, 2896, 3037, 3038, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 3039, 3040, 2896, 2896, 3041, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 3042, 2896, 2896, 3042,
     2896, 3042, 3043, 2896, 2896, 3044, 3044, 2896, 2896, 2896,

     2896, 2896, 3045, 2896, 3045, 3045, 3045, 2896, 3045, 2896,
     3045, 2896, 3046, 2896, 3046, 3046, 3046, 3046, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 3047, 3047, 2896, 2896, 3048, 2896, 2896,
     2896, 3049, 3050, 3051, 3051, 3052, 3053, 2896, 2896, 2896,
     2896, 3054, 2896, 2896, 2896, 2896, 3055, 2896, 2896, 3056,
     3057, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3058, 2896,
     3058, 3058, 3058, 3058, 3059, 2896, 3059, 3059, 3059, 2896,
     2896, 3059, 2896, 2896, 3059, 3060, 2896, 3061, 2896, 3061,

     3061, 3061, 2896, 2896, 3061, 2896, 3061, 2896, 2896, 2896,
     3062, 2896, 2896, 3062, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 3063, 2896, 2896, 2896, 3064, 3065, 3066, 3063,
     3063, 3067, 3068, 3064, 2896, 3065, 2896, 2896, 2896, 3069,
     3069, 3070, 2896, 2896, 2896, 2896, 3071, 3072, 3073, 2896,
     2896, 2896, 3071, 2896, 2896, 2896, 3072, 3073, 3073, 3074,
     3075, 3075, 2896, 2896, 3076, 3076, 3076, 3077, 3077, 2896,
     3076, 3078, 2896, 3079, 3077, 2896, 2896, 2896, 2896, 2896,
     3080, 3081, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 3082, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     3083, 3084, 3085, 2896, 3086, 3086, 2896, 3087, 2896, 2896,
     2896, 3083, 2896, 2896, 2896, 2896, 2896, 3084, 2896, 3084,
     3082, 2896, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084,
     3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084,
     3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084,
     3084, 3085, 3085, 3088, 3089, 3089, 3089, 2896, 2896, 2896,
     3090, 3091, 3092, 3090, 2896, 3091, 2896, 3092, 3092, 3093,
     3094, 2896, 2896, 3094, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 3095, 2896, 2896, 2896, 2896, 3095, 3095,

     3095, 3095, 3095, 3095, 2896, 2896, 2896, 3096, 3096, 2896,
     2896, 3097, 3097, 3098, 3099, 2896, 3100, 2896, 2896, 2896,
     3101, 2896, 3102, 3101, 2896, 3101, 2896, 2896, 3103, 3104,
     3105, 3103, 3104, 3105, 3105, 3106, 3107, 3107, 2896, 3108,
     3109, 2896, 2896, 2896, 2896, 2896, 3107, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 3110, 3110, 2896, 2896, 2896, 3110, 3111, 2896,
     3111, 3111, 2896, 3112, 3112, 3112, 3113, 3113, 2896, 3114,
     2896, 2896, 2896, 2896, 3114, 3114, 3114, 3115, 3116, 3115,
     3117, 2896, 3118, 3117, 2896, 2896, 3119, 2896, 3120, 2896,

     3120, 3121, 2896, 2896, 3121, 3122, 2896, 3122, 3122, 3123,
     2896, 2896, 3123, 3124, 3124, 3124, 3125, 2896, 2896, 2896,
     3125, 2896, 3126, 2896, 3126, 3126, 2896, 3127, 3127, 2896,
     3128, 3127, 3127, 3129, 3129, 2896, 2896, 2896, 2896, 3130,
     3130, 3131, 3131, 3132, 3133, 2896, 2896, 2896, 2896, 2896,
     2896, 3134, 3134, 3135, 2896, 2896, 3135, 2896, 2896, 3136,
     3136, 3136, 3137, 2896, 3137, 3138, 2896, 2896, 3139, 2896,
     2896, 2896, 2896, 3140, 3141, 3142, 3140, 3141, 3142, 3142,
     3143, 2896, 2896, 2896, 2896, 3144, 2896, 3145, 2896, 3146,
     3147, 2896, 2896, 2896, 2896, 2896, 3148, 3148, 3149, 3149,

     2896, 2896, 2896, 2896, 2896, 3150, 3151, 3152, 3150, 3150,
     3153, 3154, 3155, 2896, 2896, 2896, 2896, 2896, 2896, 3156,
     3157, 3158, 3156, 2896, 2896, 2896, 2896, 2896, 2896, 3159,
     3159, 3159, 2896, 3160, 3161, 2896, 3161, 2896, 2896, 3161,
     2896, 2896, 3162, 3162, 3162, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 3163, 3163, 3164, 3165,
     3166, 2896, 2896, 2896, 3166, 3165, 2896, 3167, 3167, 3168,
     3169, 2896, 2896, 3169, 2896, 3170, 2896, 3171, 2896, 2896,
     2896, 3172, 3173, 3174, 3172, 3173, 3174, 3174, 3175, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3176, 2896,

     3176, 3176, 3177, 2896, 2896, 2896, 2896, 3177, 3178, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 3177, 3179, 2896,
     2896, 3179, 2896, 3180, 2896, 2896, 2896, 2896, 2896, 2896,
     3180, 2896, 2896, 2896, 2896, 2896, 3181, 3182, 3182, 3183,
     2896, 3184, 3185, 3185, 3186, 3187, 2896, 3188, 3189, 2896,
     3190, 2896, 2896, 3191, 3192, 2896, 2896, 3193, 3194, 3195,
     3196, 3196, 3197, 3198, 3199, 3196, 2896, 2896, 2896, 2896,
     3200, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     3201, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 3202, 2896, 2896,
     3203, 3204, 2896, 3205, 2896, 2896, 3206, 2896, 2896, 2896,
     3207, 2896, 3201, 2896, 2896, 2896, 2896, 2896, 2896, 3208,
     3208, 2896, 2896, 3208, 3208, 3208, 3208, 3208, 3208, 3208,
     3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208,
     3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208,
     3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 3208, 2896,
     3209, 2896, 3210, 2896, 3211, 2896, 3206, 2896, 3207, 2896,
     2896, 2896, 2896, 2896, 2896, 3206, 2896, 2896, 3207, 2896,
     3212, 3212, 3212, 3212, 3212, 2896, 2896, 3213, 3214, 3215,

     2896, 2896, 2896, 2896, 2896, 2896, 3216, 2896, 2896, 3217,
     3217, 3218, 3219, 3220, 3221, 3222, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 3223, 3223, 3223, 3224, 3225,
     3226, 3226, 2896, 3227, 2896, 2896, 2896, 2896, 2896, 3206,
     2896, 3207, 2896, 2896, 3228, 3229, 2896, 3230, 3230, 2896,
     2896, 2896, 2896, 2896, 3231, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 3232, 2896, 3233, 3233, 2896, 3234,
     2896, 3235, 3236, 3237, 2896, 2896, 2896, 2896, 2896, 2896,
     3238, 3239, 2896, 2896, 2896, 3240, 2896, 2896, 2896, 2896,
     3241, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 3242, 2896, 3243, 2896, 2896,
     2896, 3244, 3245, 2896, 2896, 3246, 3247, 2896, 2896, 2896,
     2896, 3248, 3249, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 3250, 2896, 2896, 2896, 2896, 3251, 2896, 2896,
     3252, 3253, 3254, 3255, 2896, 2896, 2896, 2896, 2896, 3256,
     3256, 2896, 3257, 3258, 3259, 3260, 3261, 3262, 2896, 2896,
     2896, 2896, 3263, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     3264, 3264, 3265, 2896, 2896, 3266, 3266, 2896, 3267, 3268,
     3269, 2896, 2896, 2896, 2896, 2896, 3270, 2896, 2896, 2896,
     2896, 2896, 3271, 2896, 2896, 2896, 2896, 2896, 2896, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 3273, 3273, 3273, 2896,
     3273, 3274, 2896, 3275, 3276, 2896, 2896, 2896, 3277, 2896,
     3278, 3279, 3280, 2896, 2896, 2896, 2896, 2896, 3281, 3281,

     3281, 3282, 3283, 2896, 2896, 3284, 3285, 3285, 2896, 2896,
     2896, 2896, 2896, 3286, 2896, 2896, 2896, 2896, 3287, 2896,
     3288, 2896, 2896, 2896, 2896, 3289, 3290, 2896, 2896, 3291,
     2896, 2896, 2896, 3292, 2896, 2896, 2896, 2896, 2896, 3293,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3294, 2896,
     2896, 2896, 2896, 3295, 2896, 2896, 2896, 3296, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3297, 3297,
     3298, 3299, 3299, 3300, 3301, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3302, 2896,
     3303, 2896, 3304, 3304, 3305, 3306, 2896, 3307, 3307, 3308,
     2896, 2896, 2896, 2896, 2896, 2896, 3309, 3309, 3309, 3309,
     3309, 3309, 3309, 3309, 3309, 2896, 2896, 2896, 2896, 2896,
     2896, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
     3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
     3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
     2896, 2896, 2896, 2896, 2896, 3310, 3310, 3310, 3310, 2896,
     2896, 3311, 2896, 2896, 2896, 2896, 3312, 2896, 2896, 2896,

     2896, 3313, 3313, 3313, 3313, 3314, 3314, 2896, 2896, 2896,
     2896, 2896, 2896, 3315, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 3295, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3297, 3300,
     3301, 2896, 2896, 2896, 2896, 1984, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3316,

     3303, 2896, 3306, 3307, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 3309, 3309, 3309, 3309, 2896, 2896, 3309, 2896, 3309,
     3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
     3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
     3309, 3309, 3309, 3309, 3309, 2896, 2896, 2896, 3309, 3309,
     3309, 2896, 2896, 2896, 2896, 2896, 3310, 2896, 2896, 3310,
     3310, 2896, 3312, 3313, 3313, 3313, 3314, 2896, 3317, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 3301, 2896, 2896, 2896, 2896, 1984, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 3309, 3309, 3309, 3309,
     3309, 2896, 2896, 2896, 2896, 3309, 3309, 2896, 2896, 2896,
     3309, 2896, 3309, 2896, 2896, 3309, 3309, 2896, 3309, 3309,
     3309, 3309, 3309, 2896, 2896, 3309, 2361, 3309, 2896, 2896,
     2896, 3309, 3309, 3309, 3309, 3309, 3309, 2896, 2896, 2896,
     2896, 2896, 2896, 3310, 2896, 3312, 3313, 3313, 3313, 3314,

     2896, 3317, 3318, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     3301, 2896, 2896, 2896, 1984, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 3309, 3309, 3309, 3309, 2896, 2896, 2896, 2896, 3309,
     3309, 2896, 2896, 2896, 2896, 3309, 3309, 2896, 2896, 2896,
     2896, 3309, 2896, 2896, 3309, 3309, 3309, 2896, 3309, 3309,

     2896, 2896, 3309, 2896, 3309, 3309, 2896, 2896, 3310, 2896,
     3312, 3313, 3313, 3313, 2896, 3318, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 3301, 2896, 1984, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 3309, 3309, 2896, 3309, 2896,
     2896, 2896, 2896, 2896, 2896, 3309, 3309, 3309, 2896, 3309,
     3309, 3309, 3309, 3309, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 3312, 3313, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 3301, 2896, 1984, 2896, 2896, 2896, 2896, 2896, 2896,
     3319, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     3309, 3309, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3309,
     2896, 2896, 2896, 2896, 2896, 3309, 3309, 2896, 2896, 3309,
     3309, 3309, 2896, 2896, 2896, 2896, 3313, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3301,
     1984, 2896, 2896, 2896, 2896, 3319, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3309, 3320,
     3321, 3309, 2896, 2896, 2896, 3309, 3309, 3309, 3313, 3322,

     3323, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1984, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 3321,
     2896, 3309, 2896, 3309, 2896, 2896, 3322, 3324, 3323, 3325,
     2896, 2896, 1984, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 3309, 2896, 3324, 3325, 1984, 2896, 2896, 2896,
     2896, 2896, 2896, 3309, 1984, 2896, 2896, 2896, 2896, 2896,
     1984, 2896, 2896, 2896, 2896, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,

     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896, 1984, 2896,
     1984, 2896, 1984, 2896, 1984,    0, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896
    } ;

static yyconst flex_int16_t yy_nxt[21339] =
    {   0,
     2896, 2896,  219, 2896,  219, 2896,  220,  221,  220,  221,
      222, 2896,  222, 1014,  909,  919,  920, 1014,  223,  910,
      223,  218,  218,  219,  218,  218,  218,  220,  221,  224,
      218,  222,  218,  218,  218,  218,  218,  218,  218,  223,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  218,
      218,  218,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  218,  218,  218,

      227,  228,  227,  227,  912,  229,  230,  912, 2310,  231,
      227,  228,  227,  227,  913,  229,  230,  232,  219,  231,
     1954,  939,  262,  263,  939,  219,  264,  232,  977,  262,
      263,  977, 1408,  264,  265,  915,  915,  915,  915,  917,
      266,  265,  267, 1954,  918,  951,  909,  266,  233,  267,
      952,  910,  916,  950,  950,  950,  950, 1408,  233,  218,
      234,  235,  236,  234,  218,  220,  221,  237,  218,  222,
      218,  218,  218,  218,  218,  218,  238,  223,  218,  218,
      218,  239,  240,  218,  218,  218,  218,  218,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  218,  218,  218,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  242,  218,  243,  218,  244,
      245,  246,  244,  218,  220,  221,  247,  248,  222,  249,
      218,  248,  250,  251,  250,  218,  252,  218,  218,  218,
      253,  248,  254,  248,  218,  218,  255,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  249,  218,  218,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  242,  218,  257,  218,  218,  219,
      218,  218,  218,  220,  221,  258,  218,  222,  218,  259,
      218,  218,  218,  218,  218,  223,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  218,  218,  218,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  218,  218,  218,  218,  268,  269,  270,

      268,  218,  220,  221,  271,  218,  222,  218,  218,  218,
      250,  272,  250,  218,  252,  218,  218,  218,  273,  240,
      274,  218,  272,  218,  255,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  218,  218,  218,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  276,  218,  218,  278,  279,  278,  278,  978,
      280,  281,  979, 1025,  282,  278,  279,  278,  278, 1026,
      280,  281,  283,  909,  282,  219, 1151, 1152,  910,  286,

      221,  219,  283,  287,  288,  286,  221,  909,  289,  287,
      288,  223,  910, 1020,  289,  219,  290,  223, 1021,  293,
      294,  219,  290,  295, 2311,  293,  294, 1066,  296,  295,
     1082,  297, 1067,  917,  296, 1083,  298,  297,  918,  339,
      284, 1821,  298,  340,  341, 1113,  285,  342, 1113,  339,
      284, 1102, 1871,  340,  341,  343,  285,  342,  219,  909,
     1103,  344,  376,  377,  910,  343,  378,  379,  380,  291,
     1139,  344, 2313, 1139,  381,  291,  218,  299,  300,  301,
      299,  218,  220,  302,  303,  304,  222,  305,  218,  304,
      306,  307,  306,  308,  309,  218,  218,  218,  310,  311,

      312,  313,  218,  314,  315,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  317,  316,
      316,  316,  316,  316,  318,  218,  218,  319,  320,  316,
      321,  322,  323,  324,  316,  316,  325,  326,  327,  328,
      329,  316,  330,  316,  331,  332,  333,  334,  335,  316,
      316,  316,  336,  218,  337,  218,  345,  346,  345,  345,
      218,  220,  221,  347,  218,  222,  218,  218,  218,  218,
      218,  218,  218,  223,  218,  218,  218,  348,  218,  218,
      218,  218,  218,  218,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  218,  218,  218,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  218,  218,  350,  218,  351,  352,  351,  351,  218,
      220,  221,  353,  218,  222,  218,  218,  218,  218,  354,
      218,  218,  355,  218,  218,  218,  218,  218,  218,  356,
      218,  218,  218,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  218,  218,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      218,  218,  218,  351,  352,  351,  351, 1139,  220,  221,
     1139, 2315,  222,  351,  352,  351,  351, 1118,  220,  221,
      359,  909,  222,  219, 1159, 1160,  910,  220,  360,  219,
      359,  222,  361,  220,  360, 1024,  362,  222,  361,  223,
     1651, 1025,  362,  363,  364,  223, 1230, 1026, 1231,  363,
      364,  366,  367,  366,  366, 1652,  368,  369,  909, 1095,
      370,  371,  372,  910, 1096,  373, 2316, 1120,  374,  366,
      367,  366,  366, 1008,  368,  369, 1008, 1095,  370,  371,
      372, 2152, 1096,  373,  219,  909,  374, 2317,  376,  377,

      910,  383,  378,  379,  380,  384,  385,  362, 1200,  386,
      381,  383, 1200,  362, 2152,  384,  385,  387, 1116,  386,
      402, 1142,  388, 1117,  403,  404, 1143,  387,  405,  406,
      402, 2318,  388, 1487,  403,  404,  407, 1009,  405,  406,
      219,  408,  409, 1488,  220,  221,  407, 1211,  222,  219,
     1211,  408,  409,  220,  221,  490,  223,  222, 2319,  491,
      492,  483,  219,  493,  483,  223,  484,  485, 1436, 1149,
      486,  494, 1154,  487, 1150,  389, 1436, 1155,  488, 1019,
     1019, 1019, 1019, 1161, 1162,  389,  365,  390,  391,  390,
      390,  365,  368,  369,  392,  365,  370,  365,  365,  365,

      365,  393,  365,  365,  394,  365,  365,  365,  393,  393,
      365,  395,  365,  365,  365,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  365,  365,  365,  396,  396,  396,
      397,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  398,  396,  399,  396,  400,  396,
      396,  396,  393,  365,  365,  219, 1338, 1142, 1498,  411,
      412,  219, 1157,  413, 1138,  411,  412, 1138, 1499,  413,
     1111,  414, 1339,  418,  419,  420,  418,  414,  421,  422,
      483,  219,  423,  483, 1224,  484,  485, 1224, 1227,  486,

      424, 1227,  487,  418,  419,  420,  418,  488,  421,  422,
      425,  415,  423,  416, 1185, 1147, 1186,  415, 1147,  416,
      424, 1148,  418,  419,  420,  418, 2320,  421,  422,  909,
      425,  423, 1187, 2321,  910,  418,  419,  420,  418,  424,
      421,  422, 1354, 1355,  423, 1087, 1087, 1087, 1087,  425,
     1429, 1430,  424,  915,  915,  915,  915, 1314,  426,  427,
     1314, 1773,  425,  418,  419,  420,  418, 1315,  421,  422,
      916, 1774,  423,  922,  922,  922,  922, 2103,  426,  427,
      424, 1167,  418,  419,  420,  418, 1168,  421,  422,  923,
      429,  423, 1170, 1436,  924, 2104,  460,  426,  428,  424,

      461,  462, 1164, 1171,  463, 1164, 1436,  464, 1172,  429,
      426,  428,  465,  490, 1165,  219, 2322,  491,  492,  220,
      221,  493,  909,  222,  497,  498, 1450,  910, 1175,  494,
      909,  223,  219, 1176, 1451,  910,  220,  221,  426,  430,
      222,  497,  498,  466,  940,  940,  940,  940,  223, 1474,
     1474,  941, 1110, 1110, 1110, 1110, 2323,  426,  430,  218,
      218,  219,  218,  218,  218,  220,  221,  431,  218,  222,
      218,  218,  218,  218,  218,  218,  218,  223,  218,  218,
      218,  218,  432,  218,  218,  218,  218,  218,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  218,  218,  218,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  218,  218,  218,  218,  435,
      436,  435,  435,  218,  220,  221,  437,  218,  222,  218,
      218,  218,  218,  218,  218,  218,  223,  218,  218,  218,
      438,  218,  218,  218,  218,  218,  218,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  218,  218,  218,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  218,  218,  440,  442,  443, 1230,
      442, 1231,  444,  445,  452,  443,  446,  452, 1014,  444,
      453,  219, 1014,  446,  447,  220,  221,  442,  454,  222,
      442,  447,  455,  445,  448,  219,  446,  223, 2324,  220,
      221,  448,  939,  222,  456,  939,  939,  442,  454,  939,
      442,  223,  455,  445,  448,  449,  446,  922,  922,  922,
      922,  460,  449,  219,  456,  461,  462,  220,  221,  463,
     2325,  222,  464,  923,  448,  457,  219,  465,  924,  223,
      530,  531,  450,  451,  532,  508,  909,  509, 2326,  450,

      451,  910,  533,  460, 1183,  457,  458,  467,  462, 1184,
      909,  468,  449,  449,  464,  910, 1585,  909,  466,  465,
      458,  443,  910,  460, 1586,  469,  470,  467,  462,  446,
      909,  468,  449,  449,  464,  910,  443,  471,  534,  465,
      469,  470,  472, 1203,  446, 2327, 1208,  448, 1204, 1215,
      466, 1209,  471, 1225, 1216,  475,  476,  472, 1226,  477,
      478, 1247,  448,  479,  475,  476, 1248, 2328,  477,  478,
      466,  480,  479,  219, 1095, 1525, 1526,  220,  221, 1096,
      480,  222,  219,  909, 1603, 1603,  220,  221,  910,  223,
      222,  500,  501,  500,  500,  473,  502,  503,  223,  561,

      504,  909,  481,  562,  563, 1585,  910,  564,  505, 1340,
      473,  481, 1340, 1586,  506,  565,  507,  500,  501,  500,
      500, 1341,  502,  503, 1200,  523,  504,  219, 1200,  524,
      525,  220,  221,  526,  505,  222,  983,  983,  983,  983,
      506,  527,  507,  223, 1230, 2329, 1231,  495,  496,  508,
      219,  509, 1582,  984,  220,  221,  495,  496,  222,  510,
      511, 1583, 1230,  219, 1231, 1200,  223,  220,  221, 1200,
      219,  222,  510,  511,  513,  514,  219, 1294,  515,  223,
      513,  514, 1295,  909,  515,  561,  516, 1232,  910,  562,
      563, 2193,  516,  564,  946,  946,  946,  946,  219,  528,

     2194,  565,  569,  570,  586, 1233,  571,  912,  587,  588,
      912, 2330,  589, 1639,  572,  945,  517,  913,  518,  573,
      590, 1640,  517, 2331,  518,  218,  218,  219,  218,  218,
      218,  220,  221,  519,  218,  222,  218,  218,  218,  218,
      218,  218,  218,  223,  218,  218,  218,  218,  520,  218,
      218,  218,  218,  218,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  218,  218,  218,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  218,  218,  218,  523, 1230,  219, 1231,  524,  525,
      530,  531,  526,  219,  532, 1619, 1619,  569,  570,  551,
      527,  571,  533,  552,  553, 1258, 1303,  554, 1258,  572,
     1259, 1304, 2005,  551,  573,  555, 2006,  552,  553,  586,
     1309,  554, 2332,  587,  588, 1310,  598,  589,  909,  555,
      599,  600,  909,  910,  601,  590,  602,  910,  534, 1680,
      598,  909,  603, 2333,  599,  600,  910, 1680,  601, 1436,
      602,  944,  944,  944,  944,  556,  603, 1436,  528,  536,
      537,  536,  536, 2334,  538,  539,  557, 1431,  540,  556,
     1431,  541,  945,  558,  559,  542,  543, 1151, 1152, 1432,

      557,  935,  935,  935,  935,  610,  544,  558,  559,  611,
      612,  909, 2335,  613,  909,  614,  910,  923, 2337,  910,
      909,  615,  924,  937,  938,  910, 1680,  544,  536,  537,
      536,  536, 1394,  538,  539, 1394, 1331,  540,  610, 1680,
      541, 1332,  611,  612,  542,  543,  613, 1230,  614, 1231,
     1395, 2338,  219,  909,  615,  544,  220,  221,  910,  219,
      222,  909,  977,  220,  221,  977, 1337,  222,  223,  656,
     1110, 1110, 1110, 1110,  616,  223,  544,  218,  218,  219,
      218,  218,  218,  220,  221,  545,  218,  222,  218,  218,
      218,  218,  218,  218,  218,  223,  218,  218,  218,  218,

      546,  218,  218,  218,  218,  218,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  218,  218,  218,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  218,  218,  218,  218,  218,  219,  218,
      218,  218,  220,  221,  548,  218,  222,  218,  218,  218,
      218,  218,  218,  218,  223,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  218,  218,  218,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  218,  218,  218,  218,  218,  219,  218,  218,
      218,  220,  221,  566,  218,  222,  218,  218,  218,  218,
      218,  218,  218,  223,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  218,  218,  218,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  218,  218,  218,  574,  575,  352,  575,  575,  574,
      576,  577,  578,  574,  579,  574,  574,  574,  574,  580,
      574,  574,  581,  574,  574,  574,  574,  582,  574,  574,
      574,  574,  574,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  574,  574,  574,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      584,  574,  574,  218,  218,  219,  218,  218,  218,  220,

      221,  591,  218,  222,  592,  218,  218,  218,  218,  218,
      218,  223,  218,  218,  218,  593,  594,  218,  218,  218,
      218,  218,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  218,  218,  218,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  596,
      218,  218,  218,  218,  219,  218,  218,  218,  220,  221,
      604,  218,  222,  605,  218,  218,  218,  606,  218,  218,
      223,  218,  218,  218,  607,  594,  218,  218,  218,  218,

      218,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      218,  218,  218,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  596,  218,
      218,  219, 1766,  219, 2339,  220,  221,  220,  221,  222,
     1766,  222,  655,  958,  958,  958,  958,  223,  977,  223,
      959,  977, 2340,  616,  218,  617,  219,  218,  617,  218,
      220,  221,  618,  218,  222,  619,  218,  218,  218,  218,
      218,  218,  223,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  218,  218,  218,  620,  620,  620,  621,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  622,  620,  620,  620,
      218,  218,  218,  218,  218,  219,  218,  218,  218,  220,
      221,  623,  218,  222,  218,  218,  218,  218,  218,  218,
      218,  223,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  218,  218,  218,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  218,
      218,  218,  219, 1344, 1159, 1160,  220,  221, 1345,  219,
      222,  909,  625,  220,  221,  909,  910,  222,  223,  625,
      910, 1484,  219,  909, 1485,  223,  220,  221,  910,  702,
      222,  655,  626,  703,  704,  909,  909,  705,  223,  626,
      910,  910,  909,  627,  628,  706,  629,  910, 2202,  707,
      627,  628, 2029,  629,  218,  218,  219,  218,  218,  218,
      220,  221,  630,  218,  222,  218,  218,  218,  218,  218,

      218,  218,  223,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  218,  218,  218,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      218,  218,  218,  218,  218,  219,  218,  218,  218,  220,
      221,  632,  218,  222,  218,  218,  218,  218,  218,  218,
      218,  223,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  633,  633,  633,  633,  633,  633,  633,  633,

      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  218,  218,  218,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  218,
      218,  218,  635,  636,  635,  635, 1496,  637,  638, 1497,
      219,  639,  640,  641,  220,  221,  642,  643,  222,  644,
      656, 1722, 1400, 1404,  645,  646,  223,  647, 1405,  648,
     1230,  219, 1231, 1401, 2341,  220,  221,  219, 1402,  222,
     1792,  220,  221, 1406,  666,  222, 1722,  223, 1407,  649,
      666,  641,  667,  223, 2342, 1422, 1793,  219,  667,  219,

     1405,  875,  876,  220,  221,  877, 1406,  222,  686,  687,
     2343, 1423, 1648,  878, 1230,  223, 1231,  650,  641,  635,
      636,  635,  635, 1008,  637,  638, 1008,  219,  639,  640,
      641,  669,  670,  642,  643,  671,  644,  955,  955,  955,
      955,  645,  646,  672,  647,  688,  648,  956,  219,  673,
     2344,  674,  669,  670, 1649,  219,  671, 1426,  945,  772,
      773, 1767, 1427,  774,  672,  775,  649, 2345,  641, 1767,
      673,  776,  674,  690,  691,  690,  690, 1009,  692,  693,
     1161, 1162,  694,  695,  696, 1062, 1062, 1062, 1062, 2346,
      697, 2388, 1063, 2390,  650,  641,  218,  651,  652,  651,

      651,  218,  220,  221,  653,  218,  222,  218,  218,  218,
      218,  218,  218,  218,  223,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  218,  218,  218,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  218,  218,  218,  218,  657,  658,  657,  657,
      218,  220,  221,  659,  660,  222,  218,  218,  660,  218,
      661,  218,  218,  662,  218,  218,  218,  218,  663,  218,

      664,  218,  218,  218,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  218,  218,  218,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  218,  218,  218,  675,  676,  677,  676,  676,  675,
      678,  679,  680,  675,  681,  675,  675,  675,  675,  675,
      675,  675,  682,  675,  675,  675,  683,  675,  675,  675,
      675,  675,  675,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  675,  675,  675,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      675,  675,  685,  219, 1434, 1467, 2395,  220,  221, 1435,
     1468,  222,  686,  687, 1736,  690,  691,  690,  690,  223,
      692,  693, 1475, 2397,  694,  695,  696, 1476,  690,  691,
      690,  690,  697,  692,  693, 2398,  219,  694,  695, 1736,
      875,  876,  702, 1477,  877,  697,  703,  704, 1478,  688,
      705,  699,  878,  700,  690,  691,  690,  690,  706,  692,
      693, 1492,  707,  694,  695, 2209, 1015, 1015, 1015, 1015,

     1493,  697, 1527, 1016, 2210, 1528, 1494,  699, 1017,  700,
      218,  218,  219,  218,  218,  218,  220,  221,  708,  218,
      222,  218,  218,  218,  218,  218,  218,  218,  223,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  218,  218,
      218,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  218,  218,  218,  218,
      218,  219,  218,  218,  218,  220,  221,  710,  218,  222,

      218,  218,  218,  218,  218,  218,  218,  223,  218,  218,
      218,  218,  711,  218,  218,  218,  218,  218,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  218,  218,  218,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  218,  218,  218,  714, 1502,
      714, 2399,  715,  716,  715,  716,  717, 1503,  717,  718,
     2401,  718, 1504,  714,  719,  714,  719,  721,  716,  721,
      716,  722, 1139,  722,  718, 1139,  718, 1139,  724,  719,

     1139,  719,  725,  726, 2404,  732,  727,  728,  729,  733,
      734, 1658, 1658,  735,  730,  720, 1452,  720,  724, 1452,
     1453,  736,  725,  726, 1620, 2405,  727,  728,  729, 1621,
      720,  732,  720, 1454,  730,  733,  734, 1677, 1677,  735,
      740,  741, 2407,  740, 2408,  742,  743,  736, 1436,  744,
      745,  746, 1211,  740,  741, 1211,  740,  747,  742,  743,
     1678, 1436,  744,  745,  746, 1679, 1097, 1097, 1097, 1097,
      747, 1404,  366,  367,  366,  366, 1405,  368,  369,  737,
      738,  370,  769,  770, 1098, 1587,  373,  219, 1587,  374,
     1138,  772,  773, 1138, 2409,  774, 1111,  775, 1109, 1110,

     1110, 1109, 1623,  776, 1111,  737,  738,  749,  750,  749,
      749,  912,  751,  752,  912,  219,  753,  754,  755,  869,
      870,  913, 2410,  871,  756,  872, 1085, 1085, 1085, 1085,
      757,  873,  758,  366,  367,  366,  366, 2411,  368,  369,
     1086, 1964,  370,  769,  770,  912, 1164,  373,  912, 1164,
      374,  778,  779,  778,  778,  913,  780,  781, 1165,  219,
      782,  783,  784,  869,  870,  785, 1964,  871,  786,  872,
     2412,  963,  963,  963,  963,  873,  759,  749,  750,  749,
      749, 1224,  751,  752, 1224,  788,  753,  754,  755,  789,
      790,  788,  964,  791,  756,  789,  790, 1685, 1685,  791,

      757,  792,  758,  778,  779,  778,  778,  792,  780,  781,
     1689, 1689,  782,  783,  784, 1706, 1227,  785,  788, 1227,
      786, 1314,  692,  797, 1314,  880,  694,  798,  799,  881,
      882, 1315,  793,  883,  800, 1694, 1694, 1718,  793, 2413,
     1718,  884, 1119, 1119, 1119, 1119,  759,  760,  760,  761,
      760,  760,  760,  762,  763,  764,  760,  765,  760,  760,
      760,  760,  760,  760,  760,  766,  760,  760,  760,  760,
      767,  760,  760,  760,  760,  760,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  760,  760,  760,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  767,  760,  760,  788, 1706,  788, 2414,
      794,  790,  794,  790,  795, 1780,  795,  943,  944,  944,
      943,  788,  792, 1781,  792,  692,  797, 2415,  788,  694,
      798,  799,  692,  693, 1896,  788,  694,  800,  945,  692,
      693, 1766, 1896,  694,  800,  985,  985,  985,  985, 1706,
      801,  800,  802,  793, 1766,  793,  804,  801, 2416,  802,
      805,  806,  986, 1375,  807, 2417, 1375,  808,  811,  804,
     1376,  811,  809,  805,  806, 1377, 1706,  807, 1147, 2418,

      812, 1147,  810,  814, 1148,  809, 2419,  815,  816,  814,
     1924,  817,  925,  815,  816,  810,  804,  817, 1924,  818,
      821,  822,  804,  810,  823,  818,  821,  822, 1258,  819,
      823, 1258,  824, 1259, 1394,  819,  810, 1394,  824,  219,
     1767,  219,  825,  827,  828,  827,  828,  829,  825,  829,
      819, 1764, 1395, 1767,  880,  830,  819,  830,  881,  882,
     1765, 1765,  883,  825,  973,  973,  973,  973, 2420,  825,
      884,  983,  983,  983,  983,  985,  985,  985,  985, 2421,
      974,  988,  988,  988,  988,  976, 1422,  831,  984,  831,
     2422, 1405,  986, 1078, 1078, 1078, 1078, 1816, 1817, 1788,

     1079, 2423,  990,  832, 1789,  832,  833,  834,  835,  834,
      834,  833,  836,  837,  838,  833,  839,  833,  833,  833,
      833,  833,  833,  833,  840,  833,  833,  833,  833,  841,
      833,  833,  833,  833,  833,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  843,  833,  833,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  833,  833,  833,  218,  844,  845,  844,  844,
      218,  220,  221,  846,  218,  222,  218,  218,  218,  218,

      218,  218,  218,  223,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  218,  218,  218,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  218,  218,  218,  219, 1896,  219, 2424,  849,  850,
      849,  850,  851,  852,  851,  852, 1816, 1823, 1896,  886,
      853,  899,  853,  887,  888,  900,  901,  889, 1340,  902,
      890, 1340,  903, 1827, 2425,  891, 1450,  904, 1828, 1452,

     1341,  892, 1452,  905, 1451,  893, 2426,  906,  983,  983,
      983,  983, 1105, 1105, 1105, 1105, 1746, 1134, 1134, 1134,
     1134, 1816, 1817, 1106, 1135,  984,  894,  854,  906,  854,
      218,  855,  856,  855,  855,  218,  220,  221,  857,  218,
      222,  218,  858,  218,  218,  218,  218,  218,  223,  218,
      218,  218,  859,  218,  218,  218,  218,  218,  218,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  218,  218,
      218,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,

      860,  860,  860,  860,  860,  860,  218,  218,  861,  862,
      219, 1699,  862, 1587,  849,  850, 1587, 1588,  851,  895,
      886, 1924,  895, 1738,  887,  888,  853, 1585,  889, 1375,
     1589,  896, 1375,  863, 1924, 1586,  897,  926,  926,  926,
      926, 1377,  892, 2427,  927, 1886,  893,  907,  899, 2428,
      907, 1699,  900,  901, 1887, 1887,  902, 1375,  924,  908,
     1375, 2429,  864, 1390,  904, 1418, 1390,  894, 1418, 1377,
      905, 1738, 1587, 1585,  906, 1587, 1588, 1419,  865, 1699,
      866, 1586, 1420, 1894,  867,  862,  219, 1391,  862, 1589,
      849,  850, 1895, 1895,  851,  906,  921,  922,  922,  921,

     1816, 1823,  853,  930,  930,  930,  930, 2430, 1394,  863,
      931, 1394,  923, 1738,  929, 1587, 1392,  924, 1587,  923,
      944,  944,  944,  944, 2433, 2139, 1395,  947,  965,  966,
      966,  965, 1623, 2140, 1393,  967, 1735, 1915,  864, 1735,
     1738,  945,  971,  971,  971,  971, 1916, 1916, 1419,  967,
      966,  966,  966,  966,  865, 1727,  866,  967, 2437, 1450,
      867, 2896, 2896, 2896, 2896, 2029, 1718, 1451, 2896, 1718,
     2204,  925,  988,  988,  988,  988, 1173, 1173, 1173, 1173,
      933, 2438, 1777, 1010, 1010, 1010, 1010,  969, 1431, 2269,
     1011, 1431, 2269,  990, 1778, 1727, 1008,  949, 1779, 1008,

     1432,  969, 2439,  970,  990,  985,  985,  985,  985,  969,
     1027, 1027, 1027, 1027, 1505, 1505, 1505, 2896,  915,  915,
      915,  915,  986, 1727, 1781, 2896, 1027, 1027, 1027, 1027,
     2440,  990, 1230, 1029, 1231,  916, 2896,  987,  988,  988,
      987, 2441, 1587,  989, 1807, 1587, 1641,  990, 1808, 1029,
     1009, 1027, 1027, 1027, 1027, 2023, 2023, 2023,  990, 1642,
     1013, 1922, 1908, 2444,  991, 1069, 1069, 1069, 1069, 2447,
     1923, 1923,  990, 1928, 1029, 2448, 1030,  915,  915,  915,
      915, 2450, 1929, 1929,  992, 2451, 1070,  993,  994, 2452,
      995,  996,  997, 1230,  916, 1231,  998,  999, 1000, 1001,

     1002, 1033, 1003, 2453, 2454, 1004, 1005, 1006, 1007, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 2458, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
      990, 1230, 1029, 1231,  990, 1230, 1029, 1231,  990, 1799,
     1029, 2106, 1799,  990, 2016, 1029, 1931,  990, 2461, 1029,
     1027, 1027, 1027, 1027, 2462, 1932, 1932, 1027, 1027, 1027,
     1027, 1034, 2463, 1027, 1027, 1027, 1027, 1085, 1085, 1085,
     1085,  990, 1037, 1029, 1035, 1039, 1038, 1036,  990, 2107,
     1029, 1086, 1907, 2464,  990, 1040, 1029, 1027, 1027, 1027,
     1027, 1515, 2465, 1042, 1515, 1041, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 2466, 1935, 1515, 1044,  990, 1515,
     1029, 2467, 2468, 1043, 1936, 1936, 2469,  990, 1518, 1029,
     2470,  990, 1045, 1029, 1484, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1518, 2477, 1027, 1027, 1027, 1027, 1518,
     2287, 1515, 1046, 2287, 1515, 1516,  990, 1049, 1029, 2482,
      990, 1047, 1029, 1517, 1518, 1472,  990, 1048, 1029, 2500,
     1027, 1027, 1027, 1027, 1981, 1981, 1814, 1050, 1518, 1814,
     1051, 1027, 1027, 1027, 1027, 1069, 1069, 1069, 1069, 2406,
     1052,  990, 2406, 1029, 1069, 1069, 1069, 1069, 1053, 1518,
     1055, 1071,  990, 1815, 1029, 2508, 1070, 2510, 1054,  983,

      983,  983,  983, 1735, 2287, 1070, 1735, 2287, 2512, 1056,
     1075, 1075, 1075, 1075, 1815, 1419,  984,  985,  985,  985,
      985, 2513, 1059, 1057, 1088, 1088, 1088, 1088, 1058, 2514,
     1060, 1070, 2515, 1077,  986, 1061, 1088, 1088, 1088, 1088,
     2517, 1122, 1122, 1122, 1122, 2518, 2519, 2520, 1089, 1122,
     1122, 1122, 1122, 1127, 1127, 1127, 1127, 1123, 1940, 2521,
     1089, 1073, 1125, 1940, 1706, 1123, 1127, 1127, 1127, 1127,
     1125, 2522, 1735, 2406, 1128, 1735, 2406, 1090, 1127, 1127,
     1127, 1127, 2523, 1884, 1419, 1129, 1884, 1128, 2092, 1090,
     2524, 1091, 1601, 1092, 2288, 1093, 2525, 2288, 2526, 1128,

     1126, 2094, 2094, 1091, 2289, 1092, 2527, 1093, 1127, 1127,
     1127, 1127, 2528, 1145, 1145, 1145, 1145, 1173, 1173, 1173,
     1173, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1128,
     1146, 1192, 1192, 1192, 1192,  915,  915,  915,  915,  983,
      983,  983,  983,  985,  985,  985,  985, 1193, 1212, 1212,
     1212, 1212,  916, 2529, 1958, 1131,  984, 2530, 1958, 1738,
      986, 1218, 1218, 1218, 1218, 1220, 1220, 1220, 1220, 2531,
      915,  915,  915,  915, 2532, 2533, 2534, 1219,  915,  915,
      915,  915,  983,  983,  983,  983, 1222,  916,  985,  985,
      985,  985, 2536, 1818, 1113,  916, 1818, 1113, 2539,  984,

     1252, 1252, 1252, 1252, 2540,  986, 2542, 1253, 1252, 1252,
     1252, 1252, 1599, 1599, 1599, 1253, 2896, 2896, 2896, 2896,
     1522, 2543, 2544, 2896, 1255, 1255, 1255, 1255, 2548, 2552,
     1260, 1260, 1260, 1260, 2553, 2554, 1256, 1261, 1262, 2558,
     2559, 1522, 1262, 1260, 1260, 1260, 1260, 2172, 2561, 1418,
     1261, 1262, 1418, 2562, 2564, 1262, 2896, 2896, 2896, 2896,
     1230, 1419, 1231, 2896, 2896, 1617, 1420, 2565, 2896, 1260,
     1260, 1260, 1260, 1793, 2099, 2099, 1261, 1262, 1230, 2573,
     1231, 1262,  983,  983,  983,  983,  985,  985,  985,  985,
     1264, 1264, 1264, 1264, 1268, 1268, 1268, 1268, 2267,  984,

     2574, 2575, 2591,  986, 1269, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1515, 2593, 1270, 1515, 1576, 2400, 1271,
     1272, 1272, 1272, 1272, 2595, 1577, 1273, 1274, 2571, 1656,
     1273, 1272, 1272, 1272, 1272, 2102, 2572, 1266, 2113, 2113,
     1518, 1273, 1279, 1279, 1279, 1279, 2596, 2597, 1940, 1280,
     2599, 1940, 1273, 1282, 1282, 1282, 1282, 1289, 1289, 1289,
     1289, 1518, 2600, 1283, 1289, 1289, 1289, 1289, 1292, 1292,
     1292, 1292, 1230, 2601, 1231, 1284, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 2602, 1293, 1324, 1324, 1324, 1324,
     1327, 1327, 1327, 1327, 2603, 1659, 1325, 1276, 1659, 1660,

     1285, 1958, 2606, 2607, 1328, 2606, 2106, 1660, 1326, 1327,
     1327, 1327, 1327, 1329, 1329, 1329, 1329, 1342, 1342, 1342,
     1342, 2288, 1661, 1328, 2288, 1958, 2608, 1346, 1347, 1341,
     1348, 2289, 1349, 2609, 1336, 1350, 1351, 1357, 1357, 1357,
     1357, 2610, 2611, 1661, 1358, 1352, 2616, 1353, 1357, 1357,
     1357, 1357, 2618, 2620, 2621, 1358, 1362, 1362, 1362, 1362,
     2622, 1326, 1368, 1368, 1368, 1368, 1675, 1363, 2623, 1369,
     1364, 1368, 1368, 1368, 1368, 2116, 2116, 2624, 1369, 1372,
     1372, 1372, 1372, 2625, 1360, 1380, 1380, 1380, 1380, 1373,
     1380, 1380, 1380, 1380, 2620, 1360, 1380, 1380, 1380, 1380,

     1409, 2627, 2628, 1382, 2629, 2636, 1381, 1380, 1380, 1380,
     1380, 1381, 1387, 1387, 1387, 1387, 2637, 1381, 2638, 1388,
     2639, 1433, 1433, 1433, 1433, 2653, 1410, 1411, 1381, 1412,
     1683, 1413, 1504, 1432, 1414, 1415, 2657, 1409, 1425, 2119,
     2119, 2658, 1410, 1411, 1416, 1412, 1417, 1413, 2659, 1940,
     1414, 1415,  915,  915,  915,  915,  921,  922,  922,  921,
     1416, 1687, 1417,  922,  922,  922,  922, 2660, 2661,  916,
     2121, 2121,  923, 1384, 2662, 1484, 1692,  924, 2654,  923,
      930,  930,  930,  930,  924, 2124, 2124,  931,  926,  926,
      926,  926,  935,  935,  935,  935,  923, 1438, 1438, 1438,

     1438, 2663, 2604, 1519, 1439, 2604, 1519, 1520,  923,  924,
     1958, 2666, 2605,  924,  937,  938,  930,  930,  930,  930,
     1521, 2606, 2667,  931, 2606, 2668, 2896, 2896, 2896, 2896,
     1522,  925,  923, 2896, 1441, 1441, 1441, 1441, 1443, 1443,
     1443, 1443, 2896, 2669, 2673, 1444, 1446, 1446, 1446, 1446,
      923, 1522, 2677,  927, 2678, 2682, 2683,  933,  935,  935,
      935,  935,  935,  935,  935,  935, 2571,  924,  940,  940,
      940,  940, 2686, 2687,  923,  941, 2688, 1481,  923,  924,
      937,  938, 1529,  924,  937,  938, 1774, 2896, 2896, 2896,
     2896, 2699, 2702,  933, 2896, 1447, 1447, 1447, 1447,  943,

      944,  944,  943, 2896,  944,  944,  944,  944,  946,  946,
      946,  946,  955,  955,  955,  955, 2604,  937,  938, 2604,
      945, 2269,  956,  929, 2269,  945, 2605, 1807, 2402,  945,
     2703, 1808, 2704,  945,  958,  958,  958,  958, 2023, 2023,
     2023,  959,  950,  950,  950,  950, 1455, 1455, 1455, 1455,
     1706, 2705, 2706,  947,  955,  955,  955,  955,  955,  955,
      955,  955, 2700, 2701,  956, 2700, 2701,  945,  956,  958,
      958,  958,  958, 1807,  925,  945,  959, 1808, 2707,  945,
     2896, 2896, 2896, 2896, 2023, 2023, 2023, 2896, 1457, 1457,
     1457, 1457,  963,  963,  963,  963, 1738, 2448,  956,  965,

      966,  966,  965, 2711, 2714, 2715,  967,  966,  966,  966,
      966, 2716, 2717,  964,  967, 2896, 2896, 2896, 2896, 2718,
     2717, 2512, 2896,  949,  973,  973,  973,  973, 1706, 2731,
      973,  973,  973,  973,  971,  971,  971,  971, 1706, 1738,
      974,  967, 2732, 1738, 2735,  976,  974, 1461, 1461, 1461,
     1461,  976, 1820, 1139, 1462, 1820, 1139, 2736,  969,  973,
      973,  973,  973, 2739, 1821, 2717,  969,  973,  973,  973,
      973, 1505, 1505, 1505,  970, 1019, 1019, 1019, 1019, 1822,
      976, 1706, 2896,  974,  983,  983,  983,  983,  976, 1738,
     2896, 2751, 1460,  969,  985,  985,  985,  985, 2752, 2757,

     1822,  984, 1480, 1480, 1480, 1480, 2758, 1659,  911, 2896,
     1659,  986, 1479, 1480, 1480, 1479,  961, 1081,  989, 1010,
     1010, 1010, 1010,  990, 1027, 1027, 1027, 1027, 1062, 1062,
     1062, 1062, 1094,  990, 1661, 1063, 1121, 1177, 1188,  991,
      990, 1015, 1015, 1015, 1015,  990, 1191, 1029, 1016, 2896,
     2896, 2896, 2896, 1017, 1199, 1661, 2896, 1375, 1202,  992,
     1375, 2896,  993,  994, 1376,  995,  996,  997, 1210, 1377,
     1217,  998,  999, 1000, 1001, 1002, 1228, 1003, 1234, 1240,
     1004, 1005, 1006, 1007, 1507, 1507, 1507, 1507, 1509, 1509,
     1509, 1509, 1242, 1297, 1508, 2664, 1017, 1299, 2664, 1510,

     1511, 1523, 1523, 1523, 1523, 1320, 2665, 1662, 1011, 1513,
     1662, 1514, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1361, 1371,  990, 1027, 1027, 1027, 1027, 1532, 1532, 1532,
     1532,  962, 1437,  990, 1664, 1029, 1449,  990,  962, 1029,
     1069, 1069, 1069, 1069,  990, 1012, 1029, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1664, 1027, 1027, 1027, 1027,
     1072, 1070, 1530, 1531, 1027, 1027, 1027, 1027,  990, 1130,
     1029, 1275,  990, 2896, 1029, 1378, 2896,  990, 1013, 1029,
     2896, 1383, 1533, 1465, 1630,  990, 1724, 1029, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1228, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1515, 1299, 1536, 1515,  990,
     1465, 1029, 1534,  990, 1084, 1029, 1099, 1537,  990, 1535,
     1029, 1084,  990, 1099, 1029, 1753, 1465, 1538, 1027, 1027,
     1027, 1027, 1518, 1027, 1027, 1027, 1027, 2026, 1027, 1027,
     1027, 1027, 1630, 1178, 1539, 1062, 1062, 1062, 1062,  990,
     1178, 1029, 1063, 1518,  990, 1541, 1029, 2691, 1630,  990,
     1540, 1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     2307, 1542, 2305, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1543, 2304,  990, 2302, 1029, 1190,  990, 1190, 1029,
     2301, 1547, 1546, 1544,  990, 1190, 1029, 1545,  990, 1548,

     1029, 1027, 1027, 1027, 1027, 2300, 1205, 1549, 1213, 1027,
     1027, 1027, 1027, 1205, 2700, 1213, 1550, 2700, 1551, 2299,
     2298, 2727,  990, 2297, 1029, 1027, 1027, 1027, 1027, 1724,
      990, 1553, 1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 2296, 1552, 1228, 2664, 1724,  990, 2664, 1029, 2295,
     2896, 2896, 2896, 2896,  990, 2665, 1029, 2896,  990, 1228,
     1029, 1087, 1087, 1087, 1087, 1027, 1027, 1027, 1027, 2294,
     1554, 1555, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1078, 1078, 1078, 1078, 1556, 1558,  990, 1079, 1029, 1557,
     2293, 2701, 2292,  990, 2701, 1029, 2291,  990, 2729, 1029,

     1299, 2290, 2286, 1559, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1299, 1078, 1078, 1078,
     1078, 1235, 1560, 1561, 1079,  990, 1201, 1029, 1235,  990,
     1201, 1029, 2285,  990, 2284, 1029, 2283, 1201, 1563, 1562,
     1027, 1027, 1027, 1027, 1201, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1570, 1570, 1570, 1570, 1075, 1075, 1075,
     1075,  990, 2282, 1029, 2281, 2280,  990, 1565, 1029, 1564,
      990, 1566, 1029, 2279, 2278, 2277, 1029, 2276, 1070, 1241,
     1077, 1573, 1573, 1573, 1573, 2275, 1241, 2274, 1071, 2273,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 2272, 2272,

     1243, 1567, 1070, 1574, 1574, 1574, 1574, 1243, 1692, 1298,
     1569, 1070, 1568, 1077, 1692, 1070, 1298, 1077, 2896, 2896,
     2896, 2896, 2271, 1687, 1519, 2896, 1077, 1519, 1578, 1085,
     1085, 1085, 1085, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1088, 1579, 1687, 1086, 1097, 1097, 1097, 1097, 1683, 1300,
     1300, 1522, 1097, 1097, 1097, 1097, 1300, 1683, 1073, 1675,
     1323, 1089, 1098, 1590, 1590, 1590, 1590, 1323, 1675, 1656,
     1098, 1656, 1522, 1105, 1105, 1105, 1105, 1596, 1596, 1596,
     1596,  962, 2896, 1799, 1106, 2896, 1799, 1597,  962, 2896,
     1090, 1109, 1110, 1110, 1109, 2270, 2268, 1111, 1084, 2266,

     1598, 1505, 1505, 1505, 1091, 1084, 1092, 2265, 1093, 1110,
     1110, 1110, 1110, 1604, 1605, 1606, 1604, 1119, 1119, 1119,
     1119, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1610,
     1610, 1610, 1610, 2264, 1617, 1617, 1611, 1123, 1099, 2262,
     1390, 1123, 1125, 1390, 1601, 1099, 1125, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1123, 1391, 1601, 2896, 1123, 1125, 2896,
     1615, 1178, 1125, 2896, 2255, 2254, 1128, 1615, 1178, 2253,
     1128, 1134, 1134, 1134, 1134, 1190, 1608, 1190, 1135, 1614,
     1614, 1614, 1614, 1392, 1190, 2252, 1129, 1127, 1127, 1127,

     1127, 1134, 1134, 1134, 1134, 1205, 1529, 1481, 1135, 2211,
     1128, 1393, 1205, 1613, 2896, 2896, 2896, 2896, 1128, 2208,
     2207, 2896, 1145, 1145, 1145, 1145, 1173, 1173, 1173, 1173,
     1181, 1181, 1181, 1181, 1192, 1192, 1192, 1192, 2206, 1146,
     1192, 1192, 1192, 1192, 1213, 1631, 1631, 1631, 1631, 2205,
     1193, 1213, 1632, 2029, 2202, 2200, 1193, 1633, 1192, 1192,
     1192, 1192, 1637, 1637, 1637, 1637, 1131, 1212, 1212, 1212,
     1212, 2199, 2198, 2197, 1193, 2196, 1638, 1220, 1220, 1220,
     1220, 1218, 1218, 1218, 1218, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 2195, 2192, 2191, 1662, 1219, 1222, 1662,

     1663, 1252, 1252, 1252, 1252, 1235, 2190, 2189, 1253, 2188,
     1222, 1241, 1235, 1663, 2896, 2896, 2896, 2896, 1241, 2187,
     2186, 2896, 2185, 1664, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1279, 1279, 1279, 1279, 1256, 2184, 2183, 1280,
     1256, 2182, 1643, 1243, 1664, 1255, 1255, 1255, 1255, 1673,
     1243, 1260, 1260, 1260, 1260, 1298, 1673, 1256, 1261, 1262,
     2181, 2180, 1298, 1262, 2896, 2896, 2896, 2896, 1300, 1300,
     1201, 2896, 2896, 2179, 1201, 1300, 2896, 1260, 1260, 1260,
     1260, 1201, 2178, 1818, 1261, 1262, 1818, 2177, 1201, 1262,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1268, 1268, 1268, 1268, 1667, 1667, 1667, 1667,
     1522, 2176, 1269, 1668, 1272, 1272, 1272, 1272, 1669, 1272,
     1272, 1272, 1272, 1270, 2175, 1672, 1672, 1672, 1672, 1323,
     1818, 1522, 1274, 1818, 2173, 1273, 1323, 1266, 2172, 2171,
     1273, 1266, 2170, 2169, 2168, 1266, 1273, 1272, 1272, 1272,
     1272, 1279, 1279, 1279, 1279, 1472, 1717, 1522, 1280, 2896,
     2896, 2896, 2896, 1717, 1472, 2165, 2896, 2164, 1273, 1282,
     1282, 1282, 1282, 1289, 1289, 1289, 1289, 2163, 1522, 1283,
     1292, 1292, 1292, 1292, 1316, 1316, 1316, 1316, 2162, 2151,
     2150, 1284, 2149, 1324, 1324, 1324, 1324, 1293, 1327, 1327,

     1327, 1327, 1276, 1325, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1328, 2148, 2147, 1326, 1285, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1357, 1357, 1357, 1357, 1341,
     1713, 1713, 1358, 2896, 2896, 2896, 2896, 1713, 1958, 2145,
     2896, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 2144,
     1229, 1229, 1363, 1229, 2143, 1364, 1363, 1229, 2142, 1364,
     1362, 1362, 1362, 1362, 1709, 1709, 1709, 1709, 1326, 2141,
     2132, 1363, 1360, 2131, 1364, 1362, 1362, 1362, 1362, 2130,
     2896, 1710, 1710, 1710, 1710, 2129, 1363, 1743, 1099, 1364,
     1368, 1368, 1368, 1368, 1743, 1099, 1615, 1369, 2896, 2896,

     2896, 2896, 2128, 1615, 1940, 2896, 1711, 1711, 1711, 1711,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 2126, 2125,
     1373, 1692, 2122, 1687, 1373, 1372, 1372, 1372, 1372, 1380,
     1380, 1380, 1380, 1683, 2117, 1373, 1380, 1380, 1380, 1380,
     1387, 1387, 1387, 1387, 1675, 2114, 1757, 1388, 1757, 1673,
     1381, 1716, 1716, 1716, 1716, 1757, 1673, 1381, 1382, 1380,
     1380, 1380, 1380, 1387, 1387, 1387, 1387, 1656, 2111, 1902,
     1388, 1902, 1381, 2110, 2896, 2896, 2896, 2896, 1902, 2109,
     1381, 2896, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1740, 1740, 1740, 1740, 1432, 1438, 1438, 1438, 1438, 2108,

     1713, 1713, 1439, 2896, 2896, 2896, 2896, 1713, 1189, 2105,
     2896,  924,  937,  938, 1447, 1447, 1447, 1447, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1717, 2102, 1384, 1447,
     1447, 1447, 1447, 1717,  923, 2101,  937,  938,  923, 1443,
     1443, 1443, 1443, 2100, 1617, 2095, 1444, 2896, 2896, 2896,
     2896,  937,  938, 1743, 2896, 1446, 1446, 1446, 1446, 1601,
     1743, 1883,  927, 1447, 1447, 1447, 1447,  955,  955,  955,
      955, 1455, 1455, 1455, 1455, 2089,  924,  956,  947, 1457,
     1457, 1457, 1457, 1099, 2160,  937,  938, 2088,  945,  956,
     1099, 2160,  945, 1457, 1457, 1457, 1457, 1750, 1750, 1750,

     1750, 2087, 2086,  956, 1751,  973,  973,  973,  973, 1461,
     1461, 1461, 1461, 2516, 2085, 2084, 1462, 2083, 1752, 2082,
     2516,  974, 2896, 2896, 2896, 2896,  976, 1884, 2081, 2896,
     1884, 2036,  929,  973,  973,  973,  973, 1758, 1758, 1758,
     1758, 2035, 2745, 2034, 1462, 1599, 1599, 1599,  949, 2745,
     1769, 1769, 1769, 1769,  976, 2033, 1507, 1507, 1507, 1507,
     2746, 2032, 1523, 1523, 1523, 1523, 1508, 2746, 1017, 1011,
     1755,  990, 2031, 2029, 1754, 1768, 1769, 1769, 1768, 1812,
     1757,  989, 1757,  990, 2022, 1801, 1801, 1801, 1801, 1757,
     2017, 2015, 1802, 2014, 2013, 2012,  990, 1017, 1509, 1509,

     1509, 1509,  991, 1804, 1804, 1804, 1804, 2011, 2024, 1510,
     1511, 2010, 2024, 1805, 2009, 1519, 2008, 2024, 1519, 1513,
     1229, 1229,  992, 1229, 2024,  993,  994, 1229,  995,  996,
      997, 2007, 1623, 2004,  998,  999, 1000, 1001, 1002, 1013,
     1003, 2003, 1522, 1004, 1005, 1006, 1007, 1806, 1806, 1806,
     1806, 2002, 2001, 2000, 1807, 1902, 1999, 1902, 1808, 1509,
     1509, 1509, 1509, 1522, 1902, 1523, 1523, 1523, 1523, 1998,
     1510, 1511, 1011, 1027, 1027, 1027, 1027, 1997, 1229, 1229,
     1513, 1229, 1514, 1996, 1995, 1229,  990, 1027, 1027, 1027,
     1027, 1994, 1993, 1992,  990, 1991, 1029, 1532, 1532, 1532,

     1532, 1990, 1830, 1027, 1027, 1027, 1027, 1989,  990, 1988,
     1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1987,
     1027, 1027, 1027, 1027,  990, 1986, 1029, 1983, 1982, 1831,
     1229, 1229,  990, 1229, 1029, 1472,  990, 1229, 1029, 1979,
     1978,  990, 1013, 1029, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1533, 1027, 1027, 1027, 1027, 1590, 1590, 1590,
     1590, 1027, 1027, 1027, 1027,  990, 1977, 1029, 1976,  990,
      974, 1029, 1970, 1832,  990, 1967, 1029, 1965, 1733, 1963,
     1833, 1835,  990, 1834, 1029, 1027, 1027, 1027, 1027, 1962,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1573, 1573, 1573, 1573,  990, 1837, 1029, 1071,
     1961,  990, 1836, 1029, 1960,  990, 1959, 1029, 1838,  990,
     1958, 1029, 1957, 1070, 1953, 1839, 1952, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1951,
     1027, 1027, 1027, 1027, 1950, 1841, 1949, 1840,  990, 1714,
     1029, 1948,  990, 1843, 1029, 1842,  990, 1946, 1029, 1945,
     1944,  990, 1943, 1029, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1942, 1941, 1940, 1027, 1027, 1027, 1027, 1073,
     1939, 1938, 1844, 1229, 1229,  990, 1229, 1029, 1937,  990,
     1229, 1029, 1845, 1692, 1846, 1847,  990, 1692, 1029, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1933, 1687, 1848, 1687, 1683,
      990, 1683, 1029, 1926,  990, 1925, 1029, 1675,  990, 1675,
     1029, 1266,  990, 1850, 1029, 1849, 1027, 1027, 1027, 1027,
     1666, 1823, 1027, 1027, 1027, 1027, 1817, 1027, 1027, 1027,
     1027, 2024, 1656, 1656, 1852, 2024, 1913,  990, 2403, 1029,
     2024, 2403, 1853,  990, 2403, 1029, 1912, 2024,  990, 1851,
     1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1911,
     2403, 1910, 1854, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1909,  990, 1230, 1029, 1647,  990, 1906, 1029, 1905,

     1739, 1855, 1870, 1857,  990, 1856, 1029, 1739,  990, 1189,
     1029, 1901, 1027, 1027, 1027, 1027, 1900, 1858, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1899, 1898, 1624,  990, 1859, 1029, 1897, 1622, 1617,  990,
     1617, 1029, 1889,  990, 1860, 1029, 1888,  990, 1601, 1029,
     1601, 1883, 1862, 1861, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1881, 1570, 1570, 1570, 1570, 1863, 1570, 1570,
     1570, 1570, 1879, 1878, 1877,  990, 1821, 1029, 1876,  990,
     1515, 1029, 1864, 1515, 1875, 1865, 1029, 1574, 1574, 1574,
     1574, 1029, 1574, 1574, 1574, 1574, 1866, 1814, 1818, 1820,

     1814, 1818, 1820, 1739, 1874, 1873, 1872, 1518, 1869, 1868,
     1077, 1821, 1487, 1829, 1826, 1077, 1880, 1880, 1880, 1880,
     1870, 1739, 1871, 1867, 1815, 1522, 1822, 1825, 1518, 1596,
     1596, 1596, 1596, 1604, 1605, 1606, 1604, 1824, 1812, 1597,
     1606, 1605, 1606, 1606, 1810, 1815, 1522, 1822, 1610, 1610,
     1610, 1610, 1598, 1800, 1798, 1611, 2896, 2896, 2896, 2896,
     1797, 1796, 1795, 2896, 1890, 1890, 1890, 1890, 1122, 1122,
     1122, 1122, 1614, 1614, 1614, 1614, 1794, 1791, 1790, 1129,
     1123, 1787, 1786, 1785, 1123, 1125, 1784, 1783, 1782, 1125,
     1776, 1775, 1772, 1128, 1631, 1631, 1631, 1631, 1771, 1770,

     1472, 1632, 2896, 2896, 2896, 2896, 1633, 1472, 1762, 2896,
     1192, 1192, 1192, 1192, 2896, 1637, 1637, 1637, 1637, 1904,
     1904, 1904, 1904, 1892, 1659, 1662, 1193, 1659, 1662, 1638,
     1667, 1667, 1667, 1667, 1761, 1760, 1759, 1668, 2896, 2896,
     2896, 2896, 1669,  974, 1749, 2896, 1748, 1739, 1739, 1131,
     2896, 1661, 1664, 1917, 1917, 1917, 1917, 1918, 1918, 1918,
     1918, 1672, 1672, 1672, 1672, 1669, 1739, 1737, 1274, 1734,
     1733, 1732, 1661, 1664, 1362, 1362, 1362, 1362, 1920, 1731,
     1730, 1729, 1273, 1728, 1726, 1363, 1725, 1723, 1364, 1709,
     1709, 1709, 1709, 1710, 1710, 1710, 1710, 1711, 1711, 1711,

     1711, 1711, 1711, 1711, 1711, 1716, 1716, 1716, 1716, 1400,
     1400, 1400, 1382, 1740, 1740, 1740, 1740, 1721, 1740, 1740,
     1740, 1740, 1447, 1447, 1447, 1447, 1381,  955,  955,  955,
      955, 1720, 1719, 1398,  924,  937,  938,  956, 1276,  924,
      937,  938, 1396, 1385,  937,  938, 1715, 1714,  945, 1968,
     1968, 1968, 1968, 1972, 1972, 1972, 1972, 1367, 1367, 1707,
     1973, 1758, 1758, 1758, 1758, 1705, 1704, 1703, 1462, 1702,
     1752, 1804, 1804, 1804, 1804, 1880, 1880, 1880, 1880, 1701,
     1700, 1805, 1384, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,

     1955, 1955, 1956, 1956, 1956, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1955, 1955, 1955, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1955,
     1955, 1955, 1750, 1750, 1750, 1750, 1698, 1697, 1696, 1751,
     1968, 1968, 1968, 1968, 1695, 1692, 1690, 1969, 1687,  973,
      973,  973,  973, 1752,  973,  973,  973,  973, 1683, 1681,
     1301, 1752, 1301, 1675, 1287,  974, 1985, 1985, 1985, 1985,

      976, 1801, 1801, 1801, 1801,  976, 1277, 1671, 1802, 2896,
     2896, 2896, 2896, 1017, 1666, 1656, 2896,  990, 1654, 1653,
     1650, 2896, 2018, 2018, 2018, 2018, 1806, 1806, 1806, 1806,
     1647, 1645, 1644, 1807, 1198, 1636, 1635, 1808, 2728, 1754,
     1975, 2728, 1189, 2020, 2728, 2021, 1629, 1754, 1984, 1985,
     1985, 1984, 1189, 1628,  989, 2896, 2896, 2896, 2896, 1627,
     2728, 1626, 2896, 1625, 1170, 1170, 2896, 1170, 1166,  990,
     1801, 1801, 1801, 1801, 1624,  991, 1158, 2025, 1880, 1880,
     1880, 1880, 1017, 2027, 2027, 2027, 2027, 2090, 2090, 2090,
     2090, 1158, 1622, 1617, 1510,  992, 1132, 2091,  993,  994,

     1123,  995,  996,  997, 1513, 1609, 1601,  998,  999, 1000,
     1001, 1002, 1595, 1003, 1594, 1593, 1004, 1005, 1006, 1007,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1592,  990, 1591, 1029, 1584,  990, 1581, 1029, 1580,  990,
     1074, 1029, 1572,  990, 1032, 1029, 2037,  990, 1529, 1029,
     1524, 1506, 1501, 2038, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1890, 1890, 1890, 1890,
     2039, 1904, 1904, 1904, 1904,  990, 1500, 1029, 1495,  990,
     1491, 1029, 1123,  990, 1490, 1029, 1489, 1125, 1486, 2040,

     1027, 1027, 1027, 1027, 2041, 2050, 2050, 2050, 2050, 1192,
     1192, 1192, 1192, 1483, 1482, 2042, 1032, 1027, 1027, 1027,
     1027,  990, 1481, 1029, 1472, 1193,  990, 1470, 1029, 1027,
     1027, 1027, 1027, 1469, 1466, 2044, 1464, 2043,  990, 1459,
     1029, 1917, 1917, 1917, 1917, 2174, 2174, 2174, 2174, 1456,
      990,  953, 1029, 1669, 2256, 2256, 2256, 2256,  934, 2045,
     2046, 2047, 2047, 2047, 2047, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,  919,
     2051, 2059, 2048, 1428, 2049, 2046, 2046, 2046, 2046, 1425,
     1027, 1027, 1027, 1027, 2052, 1027, 1027, 1027, 1027, 1400,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2046, 2046,
     2046,  990, 1400, 1029, 1400, 1400,  990, 1398, 1029, 1397,
     2051,  990, 1396, 1029, 1385,  990, 1379, 1029, 1367, 1027,
     1027, 1027, 1027, 1356, 1336, 1322, 2046, 2046, 2046, 2896,
     2896, 2896, 2896, 1027, 1027, 1027, 1027, 1319, 1318, 2053,
      990, 1317, 1029, 1313, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 2054, 2055,  990, 1308, 1029, 1027, 1027, 1027,
     1027, 1302, 1301, 1296, 2056,  990, 1291, 1029, 1287,  990,
     1277, 1029, 1267, 1027, 1027, 1027, 1027, 1251,  990, 1250,
     1029, 1249, 2057, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1246, 1245, 1239,  990, 2060, 1029, 2257, 1238, 1237,
     2058, 1236, 1207, 1198,  990, 1196, 1029, 1195,  990, 1189,
     1029, 1182, 2061, 1027, 1027, 1027, 1027, 1179, 2062, 1027,
     1027, 1027, 1027, 1170, 1170, 2063, 1027, 1027, 1027, 1027,
     1972, 1972, 1972, 1972,  990, 1170, 1029, 1973, 2065, 1170,
      990, 1166, 1029, 1027, 1027, 1027, 1027,  990, 1158, 1029,
     1153, 2064, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027,  990, 1144, 1029, 1141, 2066, 1027,
     1027, 1027, 1027,  990, 2067, 1029, 1132,  990, 1118, 1029,
     1115,  990, 1107, 1029, 1104, 2068, 1027, 1027, 1027, 1027,

      990, 1101, 1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1100, 2069, 2070, 1074, 1068, 1032,  990, 1023, 1029,
     1022,  982,  980, 2072,  990, 2071, 1029,  972,  990,  954,
     1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,  953,
     2073,  934, 1027, 1027, 1027, 1027, 1890, 1890, 1890, 1890,
     2074, 2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2075,
     2896, 2896, 1123,  990, 2077, 1029, 2076, 1125, 1122, 1122,
     1122, 1122, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     2133, 2134, 2896, 2896, 1123, 2135, 2078, 2896, 2136, 1125,
     2896, 2896, 2896, 1920, 2153, 2154, 2896, 1920, 2137, 2155,

     2138, 2896, 2156, 2896, 2896, 2079, 1968, 1968, 1968, 1968,
     2896, 2080, 2157, 2896, 2158, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2090, 2090, 2090, 2090, 1752, 2306, 2306,
     2306, 2306, 2896, 2091, 2896, 2896, 2097, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1956, 1956, 1956, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1955, 1955, 1955, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,

     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1955, 1955, 1955, 2159, 2159, 2159, 2159,
     2896, 2896, 2896, 1969, 1968, 1968, 1968, 1968,  973,  973,
      973,  973, 2167, 2167, 2167, 2167, 2896, 1752, 2018, 2018,
     2018, 2018, 2896, 2896,  974, 1752, 2896, 2896, 2896,  976,
     2896, 2896, 2896,  990, 2018, 2018, 2018, 2018, 2896, 2020,
     2896, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2896,
     2896, 2896, 1510, 2896, 2896, 2020, 1510, 2021, 1027, 1027,
     1027, 1027, 1513, 2161, 1514, 2896, 1513, 2896, 1027, 1027,
     1027, 1027, 2896, 1754, 2166, 2167, 2167, 2166, 2896,  990,

      989, 1029, 2896, 2216, 2216, 2216, 2216, 2896, 2896,  990,
     2212, 1029, 2896, 2896, 2896,  990, 1027, 1027, 1027, 1027,
     2896,  991, 2896, 2896,  990, 2896, 1029, 2896, 2213, 1027,
     1027, 1027, 1027, 2896, 2896, 2896, 2896,  990, 2896, 1029,
     2896,  992, 2896, 2896,  993,  994, 2896,  995,  996,  997,
      990, 2896, 1029,  998,  999, 1000, 1001, 1002, 2896, 1003,
     2896, 2896, 1004, 1005, 1006, 1007, 1027, 1027, 1027, 1027,
     2219, 2219, 2219, 2219, 2896, 2896, 2896, 2214, 2217, 2896,
     2215, 1027, 1027, 1027, 1027, 2896, 2896,  990, 2896, 1029,
     2896,  990, 2261, 1029, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027,  990, 2896, 1029, 2050, 2050, 2050, 2050, 1027,
     1027, 1027, 1027, 2896, 2896,  990, 2896, 1029, 2896,  990,
     2896, 1029, 1027, 1027, 1027, 1027,  990, 2896, 1029, 2896,
      990, 2896, 1029, 2896, 2218, 2896, 2220, 1027, 1027, 1027,
     1027, 2896, 2896,  990, 2896, 1029, 2896, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 2896, 2896, 2221,  990, 2896,
     1029, 1027, 1027, 1027, 1027, 2896, 2896, 2896,  990, 2896,
     1029, 2896,  990, 2896, 1029, 2223, 2896, 2730, 2222, 2896,
     2730, 2896,  990, 2730, 1029, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 2896, 1027, 1027, 1027, 1027, 2896, 2730,

     2224, 2225, 2896, 2896, 2896, 2226,  990, 2896, 1029, 2896,
      990, 2896, 1029, 2896, 2896,  990, 2227, 1029, 2896, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 2896, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
      990, 2228, 1029, 2896,  990, 2896, 1029, 2896,  990, 2896,
     1029, 2896, 2896,  990, 2229, 1029, 2896,  990, 2896, 1029,
     2896, 2230, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     2896, 2896, 2896, 2231, 2258, 2258, 2258, 2258, 2232, 1027,
     1027, 1027, 1027,  990, 2259, 1029, 2896,  990, 2233, 1029,
     1027, 1027, 1027, 1027, 2896, 2896, 2896, 2234, 2896, 2896,

      990, 2896, 1029, 2896, 2896, 2235, 2896, 1027, 1027, 1027,
     1027,  990, 2896, 1029, 1027, 1027, 1027, 1027, 2896, 2237,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,  990, 2236,
     1029, 2896, 2238, 2896, 2896,  990, 2896, 1029, 2896, 2896,
     2896,  990, 2260, 1029, 2896,  990, 2896, 1029, 1027, 1027,
     1027, 1027, 2896, 1027, 1027, 1027, 1027, 2239, 2246, 2246,
     2246, 2246, 2248, 2248, 2248, 2248, 2896, 2241, 2240,  990,
     2896, 1029, 2896, 2896,  990, 2243, 1029, 2896, 2896,  990,
     2896, 1029, 2896,  990, 2896, 1029, 2896, 2896, 2896, 2242,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 2896, 2244, 2245, 2896, 1122, 1122, 1122, 1122,
     2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2896,  990,
     2896, 1029, 1123, 1667, 1667, 1667, 1667, 1125, 2896, 2896,
     1668, 2896, 2896, 2247, 2896, 1669, 2896, 2159, 2159, 2159,
     2159, 2896, 2896, 2896, 1969, 2250,  973,  973,  973,  973,
     2308, 2309, 2309, 2308, 2896, 2896, 2896, 2251, 1752, 2249,
     2896, 2896,  974, 2309, 2309, 2309, 2309,  976, 2896, 2896,
     2896, 2263, 2312, 2312, 2312, 2312, 2314, 2314, 2314, 2314,
     2174, 2174, 2174, 2174,  990, 2336, 2336, 2336, 2336, 1801,
     1801, 1801, 1801, 2896, 2896, 2896, 1802, 2018, 2018, 2018,

     2018, 1017, 2027, 2027, 2027, 2027, 2896, 2896, 2303, 1027,
     1027, 1027, 1027, 1510, 1754, 2896, 2896, 2896, 2020, 1027,
     1027, 1027, 1027, 1513, 2896, 1514, 2256, 2256, 2256, 2256,
      990, 2896, 1029, 1027, 1027, 1027, 1027, 2896, 2896, 2347,
      990, 2896, 1029, 1027, 1027, 1027, 1027, 2217, 2896, 2896,
     2896, 2348, 2896, 2896,  990, 2896, 1029, 2896, 2896, 2896,
     2247, 2896, 2896, 2896,  990, 2896, 1029, 2216, 2216, 2216,
     2216, 2896, 1027, 1027, 1027, 1027, 2219, 2219, 2219, 2219,
     2896, 2354, 2354, 2354, 2354, 2896, 2896, 2896,  990, 2896,
     1029, 2355, 2349,  990, 2896, 1029, 2350,  990, 2896, 1029,

     2896, 2896,  990, 2896, 1029, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 2896, 2360, 2360,
     2360, 2360, 2896,  992, 2896, 2896,  990, 2896, 1029, 2352,
      990, 1533, 1029, 2896,  990, 2896, 1029, 2896, 2896,  990,
     2351, 1029, 2896, 2896, 2353, 2896, 1006, 2896, 2358, 2358,
     2358, 2358, 2896, 2359, 1027, 1027, 1027, 1027, 2362, 2362,
     2362, 2362, 1027, 1027, 1027, 1027, 2896, 2896, 2356,  990,
     2896, 1029, 2357, 2896, 1549,  990, 2896, 1029, 2896,  990,
     2896, 1029, 2896,  990, 2896, 1029, 2896, 2364, 2364, 2364,
     2364, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2368,

     2368, 2368, 2368, 1027, 1027, 1027, 1027, 2896, 2365, 2361,
     1029, 2896,  990, 2363, 1029, 2896,  990, 2896, 1029, 2896,
      990, 2896, 1029, 2896,  990, 2896, 1029, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 2896, 1027, 1027, 1027, 1027,
     2896, 1027, 1027, 1027, 1027, 2896, 2896, 2896,  990, 2896,
     1029, 2896,  990, 2896, 1029, 2896, 2896,  990, 2369, 1029,
     2896, 2896,  990, 2367, 1029, 2366, 2374, 2374, 2374, 2374,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2370, 2379,
     2379, 2379, 2379, 2896, 2896, 2896, 2371, 2375, 2896, 1029,
     2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2896, 2896,

      990, 2896, 1029, 2896, 2896, 2372, 2380, 2380, 2380, 2380,
     2373, 2896, 2896, 2896, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 2896, 2896, 2896, 2377, 2896,  990, 2896, 1029,
     1027, 1027, 1027, 1027, 2376,  990, 2896, 1029, 2896,  990,
     2896, 1029, 2378, 2246, 2246, 2246, 2246, 2248, 2248, 2248,
     2248,  990, 2896, 1029, 1027, 1027, 1027, 1027, 2896, 1027,
     1027, 1027, 1027, 2896,  990, 2896, 1029, 2896,  990, 2896,
     1029, 2896, 2896, 2896, 2383,  990, 2896, 1029, 2896, 2896,
      990, 2381, 1029, 2382, 1027, 1027, 1027, 1027, 2258, 2258,
     2258, 2258, 2384, 2256, 2256, 2256, 2256, 2896, 2259, 2391,

     2391, 2391, 2391, 2896, 2896,  990, 2896, 1029, 2896, 2392,
     2896, 2258, 2258, 2258, 2258, 2393, 2393, 2393, 2393, 2896,
     2386, 2259, 2896, 2896, 2896, 2896, 2896, 2896, 2385, 2896,
     1122, 1122, 1122, 1122,  973,  973,  973,  973, 2432, 2432,
     2432, 2432, 2896, 2896, 2896, 2387, 1123, 2896, 2896, 2896,
      974, 1125, 2896, 2896, 2896,  976, 2389, 2306, 2306, 2306,
     2306, 2434, 2434, 2434, 2434, 2435, 2436, 2436, 2435, 2436,
     2436, 2436, 2436, 2312, 2312, 2312, 2312, 2314, 2314, 2314,
     2314, 2396, 2896, 2394, 2442, 2442, 2442, 2442, 2896, 2431,
      990, 2443, 2443, 2443, 2443, 2445, 2445, 2445, 2445, 2449,

     2449, 2449, 2449, 2896, 2455, 2455, 2455, 2455, 2459, 2459,
     2459, 2459, 2460, 2460, 2460, 2460, 2446, 2336, 2336, 2336,
     2336, 2896, 2896, 2896,  992, 2456, 2471, 2471, 2471, 2471,
     2352, 2896, 1533, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 2353, 2896, 1006, 1027, 1027,
     1027, 1027, 2896, 2896,  990, 2896, 1029, 2896,  990, 2896,
     1029, 2896,  990, 2896, 1029, 2476, 2476, 2476, 2476,  990,
     2896, 1029, 2457, 2354, 2354, 2354, 2354, 2472, 2896, 2473,
     2896, 2896, 2896, 2355, 2896, 2896,  990, 2381, 1029, 2896,
     2478, 2478, 2478, 2478,  990, 2479, 1029, 2896, 2896, 2479,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2896, 2474,
     2358, 2358, 2358, 2358, 2896, 2359, 2896, 2475, 2896, 2896,
     2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2896, 2896,
     2896,  990, 2896, 1029, 2360, 2360, 2360, 2360, 2362, 2362,
     2362, 2362, 1027, 1027, 1027, 1027, 2364, 2364, 2364, 2364,
     2488, 2488, 2488, 2488, 2896,  990, 2896, 1029, 2896,  990,
     2896, 1029, 2896,  990, 2480, 1029, 2896, 2365, 2896, 1029,
     2896, 1481, 2896, 2481, 2896, 2489, 2489, 2489, 2489, 2896,
     2490, 2490, 2490, 2490, 2896, 2896, 2896, 2483, 2896, 2391,
     2391, 2391, 2391, 2896, 2896, 2487,  990, 2896, 1029, 2392,

     2896, 2375, 2484, 1029, 2485, 2046, 2047, 2047, 2047, 2047,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2896, 2896, 2896, 2048, 2896, 2049,
     2046, 2046, 2046, 2046, 2896, 2896, 2368, 2368, 2368, 2368,
     2491, 2491, 2491, 2491, 1027, 1027, 1027, 1027, 2493, 2493,
     2493, 2493, 2896, 2046, 2046, 2046, 2486,  990, 2896, 1029,
     2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2896, 2494,
     2896, 1029, 1027, 1027, 1027, 1027, 2896, 1027, 1027, 1027,
     1027, 2046, 2046, 2046, 2374, 2374, 2374, 2374, 2498, 2498,
     2498, 2498, 2896,  990, 2896, 1029, 2896, 2492,  990, 2896,

     1029, 1027, 1027, 1027, 1027, 2375, 2896, 1029, 2896, 1481,
     2896, 2896, 2501, 2501, 2501, 2501, 2495, 2379, 2379, 2379,
     2379, 2896,  990, 2896, 1029, 2380, 2380, 2380, 2380, 2896,
     2896, 2496, 2497, 2502, 2896, 1029, 2896, 2896,  990, 2896,
     1029, 2896, 1027, 1027, 1027, 1027,  990, 2896, 1029, 2896,
     2896, 2896, 2457, 2504, 2504, 2504, 2504, 1027, 1027, 1027,
     1027, 2896, 2499,  990, 2896, 1029, 1027, 1027, 1027, 1027,
     2507, 2507, 2507, 2507,  990, 2896, 1029, 2896,  990, 2896,
     1029, 1027, 1027, 1027, 1027, 2896, 2896,  990, 2896, 1029,
     2896,  990, 2896, 1029, 2896, 2896, 2896, 2503, 2393, 2393,

     2393, 2393,  990, 2896, 1029, 2391, 2391, 2391, 2391, 2896,
     2896, 2896, 2505, 2896, 2896, 2392, 2393, 2393, 2393, 2393,
     2896, 2896, 2896, 2896, 1122, 1122, 1122, 1122, 2896, 2896,
     2896, 2506,  973,  973,  973,  973, 2043, 2896, 2896, 2896,
     1123, 2432, 2432, 2432, 2432, 1125, 2896, 2896,  974, 2434,
     2434, 2434, 2434,  976, 2537, 2538, 2538, 2537, 2538, 2538,
     2538, 2538, 2541, 2541, 2541, 2541, 2442, 2442, 2442, 2442,
     2443, 2443, 2443, 2443, 2896, 2509, 2896, 2511, 2896,  990,
     2445, 2445, 2445, 2445, 2488, 2488, 2488, 2488, 2545, 2545,
     2545, 2545, 2896, 2896, 2896, 2535, 2546, 2546, 2546, 2546,

     2896, 2446, 2449, 2449, 2449, 2449, 2547, 2547, 2547, 2547,
     2549, 2549, 2549, 2549, 2896, 2896, 2896, 2456, 2455, 2455,
     2455, 2455, 2498, 2498, 2498, 2498, 2555, 2555, 2555, 2555,
     2896, 2550, 2459, 2459, 2459, 2459, 2896, 2896, 2896, 2456,
     2460, 2460, 2460, 2460, 2896, 2896, 2896, 2556, 2557, 2557,
     2557, 2557, 2560, 2560, 2560, 2560, 2563, 2563, 2563, 2563,
     2471, 2471, 2471, 2471, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 2896, 2896, 2551, 2568,
     2568, 2568, 2568, 2896, 2896,  990, 2457, 1029, 2896,  990,
     2896, 1029, 2896,  990, 2896, 1029, 2476, 2476, 2476, 2476,

      990, 2896, 1029, 2896, 2478, 2478, 2478, 2478, 2896, 2479,
     2896, 2896, 2566, 2479, 2896, 2896, 2896,  990, 2896, 1029,
     1027, 1027, 1027, 1027, 2570, 2570, 2570, 2570, 2896, 2896,
     2567, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2896,
     2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2488, 2488,
     2488, 2488,  990, 2896, 1029, 2896,  990, 2896, 1029, 2489,
     2489, 2489, 2489, 2490, 2490, 2490, 2490, 2896, 2491, 2491,
     2491, 2491, 2896, 1027, 1027, 1027, 1027, 2896, 2896, 2896,
      990, 2896, 1029, 2569, 2375, 2896, 1029, 2896, 2896,  990,
     2577, 1029, 2896, 2896,  990, 2576, 1029, 2493, 2493, 2493,

     2493, 2579, 2579, 2579, 2579, 2896, 1027, 1027, 1027, 1027,
     2896, 1027, 1027, 1027, 1027, 2896, 2896, 2896, 2494, 2896,
     1029, 2896, 1481, 1027, 1027, 1027, 1027,  990, 2578, 1029,
     2896, 2896,  990, 2896, 1029, 2498, 2498, 2498, 2498, 1027,
     1027, 1027, 1027, 2896,  990, 2896, 1029, 1027, 1027, 1027,
     1027, 2501, 2501, 2501, 2501, 2585, 2585, 2585, 2585, 2896,
      990, 2896, 1029, 2896, 2896, 2551, 2581, 2580,  990, 2896,
     1029, 2896, 2502, 2896, 1029, 2896, 1481, 2582, 2586, 2586,
     2586, 2586, 2896, 2590, 2590, 2590, 2590, 1027, 1027, 1027,
     1027, 2592, 2592, 2592, 2592, 2507, 2507, 2507, 2507,  990,

     2896, 2587, 2896, 2583,  990, 2896, 1029, 2896,  990, 2896,
     1029, 2584, 2504, 2504, 2504, 2504,  990, 2896, 1029, 2896,
     1122, 1122, 1122, 1122, 2598, 2598, 2598, 2598,  973,  973,
      973,  973, 2896,  990, 2896, 1029, 1123, 2613, 2613, 2613,
     2613, 1125, 2577, 2896,  974, 2614, 2615, 2615, 2614,  976,
     2615, 2615, 2615, 2615, 2617, 2617, 2617, 2617, 2896,  992,
     2541, 2541, 2541, 2541, 2896, 2588, 2896, 1533, 2896, 2896,
     2896,  990, 2896, 2896, 2896, 2594, 2619, 2619, 2619, 2619,
     2353, 2896, 1006, 2589, 2545, 2545, 2545, 2545, 2546, 2546,
     2546, 2546, 2547, 2547, 2547, 2547, 2896, 2612, 2549, 2549,

     2549, 2549, 2579, 2579, 2579, 2579, 2896, 2896, 2896, 2456,
     2555, 2555, 2555, 2555, 2585, 2585, 2585, 2585, 2896, 2550,
     2557, 2557, 2557, 2557, 2626, 2626, 2626, 2626, 2896, 2896,
     2896, 2556, 2560, 2560, 2560, 2560, 2563, 2563, 2563, 2563,
     2630, 2630, 2630, 2630, 2896, 2896, 2896, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 2568, 2568, 2568, 2568, 2633,
     2633, 2633, 2633, 2896, 2896, 2896, 2551,  992,  990, 2896,
     1029, 2896,  990, 2588, 1029, 1533,  990, 2896, 1029, 2896,
      990, 2896, 1029, 2896, 2570, 2570, 2570, 2570, 2353, 2896,
     1006, 2589, 2896, 2631, 2634, 2634, 2634, 2634, 1027, 1027,

     1027, 1027, 2896, 2896, 2896,  990, 2632, 1029, 2641, 2641,
     2641, 2641, 2579, 2579, 2579, 2579, 2896, 2896, 2896,  990,
     2896, 1029, 2896, 2896, 2896, 1027, 1027, 1027, 1027,  990,
     2896, 1029, 1027, 1027, 1027, 1027, 2648, 2648, 2648, 2648,
     2896, 1027, 1027, 1027, 1027, 2896,  990, 2896, 1029, 2585,
     2585, 2585, 2585,  990, 2896, 1029, 2896, 2649, 2896, 1029,
     2896, 2640,  990, 2896, 1029, 2592, 2592, 2592, 2592, 2635,
     2642, 2643, 2643, 2643, 2643, 2642, 2642, 2642, 2642, 2642,
     2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2646,
     2896, 2896, 2644, 2642, 2645, 2642, 2642, 2642, 2642, 2896,

     2647, 2896, 2896, 2896, 2650, 1027, 1027, 1027, 1027, 2896,
     2651, 2586, 2586, 2586, 2586, 2896, 2896, 2896, 2642, 2642,
     2642, 2590, 2590, 2590, 2590, 2896,  990, 2896, 1029, 2896,
     2896, 2896,  990, 2896, 2587, 2592, 2592, 2592, 2592, 2896,
     2896, 2896,  990, 2896, 1029, 2896, 2642, 2642, 2642, 2655,
     2655, 2655, 2655, 2656, 2656, 2656, 2656, 2598, 2598, 2598,
     2598,  973,  973,  973,  973, 2896, 2896, 2896, 2652, 1123,
     2613, 2613, 2613, 2613, 1125, 2896, 2896,  974, 2671, 2672,
     2672, 2671,  976, 2672, 2672, 2672, 2672, 2617, 2617, 2617,
     2617, 2674, 2674, 2674, 2674, 2619, 2619, 2619, 2619, 2675,

     2675, 2675, 2675, 2896,  990, 2676, 2676, 2676, 2676, 2679,
     2679, 2679, 2679, 2626, 2626, 2626, 2626, 2684, 2684, 2684,
     2684, 2685, 2685, 2685, 2685, 2630, 2630, 2630, 2630, 2670,
     2680, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 2633,
     2633, 2633, 2633, 2634, 2634, 2634, 2634, 1027, 1027, 1027,
     1027, 2896,  990, 2896, 1029, 2896,  990, 2896, 1029, 2896,
      990, 2896, 1029, 2641, 2641, 2641, 2641, 2896,  990, 2896,
     1029, 1027, 1027, 1027, 1027, 2896, 2896, 2681, 2693, 2693,
     2693, 2693, 2896, 2896,  990, 2896, 1029, 2896, 2896, 2367,
     2896, 2896,  990, 2896, 1029, 2695, 2695, 2695, 2695, 2694,

     2689, 1029, 2655, 2655, 2655, 2655, 2709, 2710, 2710, 2709,
     2674, 2674, 2674, 2674, 2896, 2896, 1481, 2896, 2635, 2642,
     2643, 2643, 2643, 2643, 2642, 2642, 2642, 2690, 2642, 2642,
     2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2896, 2896,
     2692, 2644, 2642, 2645, 2642, 2642, 2642, 2642, 2691, 2691,
     2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691,
     2691, 2691, 2691, 2691, 2691, 2691, 2691, 2642, 2642, 2642,
     2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691,
     2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691, 2691,
     2691, 2691, 2691, 2691, 2691, 2642, 2642, 2642, 2648, 2648,

     2648, 2648, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     2896, 1027, 1027, 1027, 1027, 2656, 2656, 2656, 2656, 2649,
     2896, 1029, 2896,  990, 2896, 1029, 2896,  990, 2896, 1029,
     2896, 1123,  990, 2896, 1029, 2896, 1125, 2708, 2708, 2708,
     2708, 2710, 2710, 2710, 2710, 2675, 2675, 2675, 2675, 2676,
     2676, 2676, 2676,  974, 2712, 2712, 2712, 2712,  976, 2896,
     2896, 2896,  990, 2696, 2698, 2896, 2681, 2679, 2679, 2679,
     2679, 2896, 2896, 2896, 2697, 2713, 2695, 2695, 2695, 2695,
     2684, 2684, 2684, 2684, 2685, 2685, 2685, 2685, 2680, 1027,
     1027, 1027, 1027, 2719, 2719, 2719, 2719, 1027, 1027, 1027,

     1027, 2693, 2693, 2693, 2693, 2723, 2723, 2723, 2723, 2896,
      990, 2896, 1029, 2695, 2695, 2695, 2695, 2721,  990, 2896,
     1029, 2896, 2694, 2896, 1029, 2896, 1481, 1027, 1027, 1027,
     1027, 2725, 2725, 2725, 2725, 2681, 2896, 1027, 1027, 1027,
     1027, 2896, 2896, 2896, 1839, 2896, 2896, 2896,  990, 2896,
     1029, 2896, 2726, 2896, 1029, 2896, 2896, 2896,  990, 2896,
     1029, 2708, 2708, 2708, 2708, 2722, 2733, 2734, 2734, 2733,
     2896, 2896, 2734, 2734, 2734, 2734, 2712, 2712, 2712, 2712,
     2896, 2896,  976, 2723, 2723, 2723, 2723, 2737, 2737, 2737,
     2737, 2724, 1839,  990, 2896, 2896, 2896, 2713, 2740, 2740,

     2740, 2740, 2719, 2719, 2719, 2719, 2896, 2896, 2738, 2719,
     2719, 2719, 2719, 2741, 2741, 2741, 2741, 2723, 2723, 2723,
     2723, 1027, 1027, 1027, 1027, 2896, 2721, 2725, 2725, 2725,
     2725, 2896, 2896, 2721, 2742, 2896, 1029, 2744, 2744, 2744,
     2744, 2896,  990, 2896, 1029, 2896, 2896, 2896, 2726, 2896,
     1029, 2747, 2748, 2748, 2747, 2896, 2896, 2896, 1481, 2748,
     2748, 2748, 2748, 2749, 2749, 2749, 2749, 2737, 2737, 2737,
     2737, 2744, 2744, 2744, 2744, 2740, 2740, 2740, 2740, 2896,
      990, 2896, 2896, 2896, 2750, 2896, 2896, 2896, 2738, 2896,
     2743, 2741, 2741, 2741, 2741, 2753, 2753, 2753, 2753, 1027,

     1027, 1027, 1027, 2744, 2744, 2744, 2744, 2755, 2756, 2756,
     2755, 2896, 2742, 2896, 1029, 2896, 1481, 2896, 2896, 2896,
      990, 2896, 1029, 2756, 2756, 2756, 2756, 2749, 2749, 2749,
     2749, 2753, 2753, 2753, 2753, 2753, 2753, 2753, 2753, 2759,
     2759, 2759, 2759, 2896,  990, 2896, 2896, 2896, 2750, 2761,
     2762, 2762, 2761, 2762, 2762, 2762, 2762, 2896, 2896, 2896,
     2760, 2896, 1029, 2763, 2763, 2763, 2763, 2754, 2765, 2765,
     2765, 2765, 2896, 2896,  990, 2759, 2759, 2759, 2759, 2766,
     2766, 2766, 2766, 2896, 2764, 2767, 2768, 2768, 2767, 2768,
     2768, 2768, 2768, 2896, 2896, 2896, 2760, 2896, 1029, 2896,

     1481, 2763, 2763, 2763, 2763, 2766, 2766, 2766, 2766, 2896,
      990, 2765, 2765, 2765, 2765, 2766, 2766, 2766, 2766, 2896,
     2896, 2896, 2764, 2769, 2770, 2770, 2769, 2770, 2770, 2770,
     2770, 2771, 2772, 2772, 2771, 2772, 2772, 2772, 2772, 2773,
     2774, 2774, 2773, 2774, 2774, 2774, 2774, 2896,  990, 2775,
     2776, 2776, 2775, 2896, 2896, 2896,  990, 2776, 2776, 2776,
     2776, 2896, 2896, 2896,  990, 2777, 2778, 2778, 2777, 2778,
     2778, 2778, 2778, 2779, 2780, 2780, 2779, 2896,  990, 2780,
     2780, 2780, 2780, 2781, 2782, 2782, 2781, 2896, 2896, 2896,
      990, 2782, 2782, 2782, 2782, 2783, 2784, 2784, 2783, 2896,

      990, 2784, 2784, 2784, 2784, 2785, 2786, 2786, 2785, 2896,
     2896, 2896,  990, 2786, 2786, 2786, 2786, 2787, 2788, 2788,
     2787, 2896,  990, 2788, 2788, 2788, 2788, 2789, 2790, 2790,
     2789, 2896, 2896, 2896,  990, 2790, 2790, 2790, 2790, 2791,
     2792, 2792, 2791, 2896,  990, 2792, 2792, 2792, 2792, 2793,
     2794, 2794, 2793, 2896, 2896, 2896,  990, 2794, 2794, 2794,
     2794, 2795, 2796, 2796, 2795, 2896,  990, 2796, 2796, 2796,
     2796, 2797, 2798, 2798, 2797, 2896, 2896, 2896,  990, 2798,
     2798, 2798, 2798, 2799, 2800, 2800, 2799, 2896,  990, 2800,
     2800, 2800, 2800, 2801, 2802, 2802, 2801, 2896, 2896, 2896,

      990, 2802, 2802, 2802, 2802, 2803, 2804, 2804, 2803, 2896,
      990, 2804, 2804, 2804, 2804, 2805, 2806, 2806, 2805, 2896,
     2896, 2896,  990, 2806, 2806, 2806, 2806, 2807, 2808, 2808,
     2807, 2896,  990, 2808, 2808, 2808, 2808, 2809, 2810, 2810,
     2809, 2896, 2896, 2896,  990, 2810, 2810, 2810, 2810, 2811,
     2812, 2812, 2811, 2896,  990, 2812, 2812, 2812, 2812, 2813,
     2814, 2814, 2813, 2896, 2896, 2896,  990, 2814, 2814, 2814,
     2814, 2815, 2816, 2816, 2815, 2896,  990, 2816, 2816, 2816,
     2816, 2817, 2818, 2818, 2817, 2896, 2896, 2896,  990, 2818,
     2818, 2818, 2818, 2819, 2820, 2820, 2819, 2896,  990, 2820,

     2820, 2820, 2820, 2821, 2822, 2822, 2821, 2896, 2896, 2896,
      990, 2822, 2822, 2822, 2822, 2823, 2824, 2824, 2823, 2896,
      990, 2824, 2824, 2824, 2824, 2825, 2826, 2826, 2825, 2896,
     2896, 2896,  990, 2826, 2826, 2826, 2826, 2827, 2828, 2828,
     2827, 2896,  990, 2828, 2828, 2828, 2828, 2829, 2830, 2830,
     2829, 2896, 2896, 2896,  990, 2830, 2830, 2830, 2830, 2831,
     2832, 2832, 2831, 2896,  990, 2832, 2832, 2832, 2832, 2833,
     2834, 2834, 2833, 2896, 2896, 2896,  990, 2834, 2834, 2834,
     2834, 2835, 2836, 2836, 2835, 2896,  990, 2836, 2836, 2836,
     2836, 2837, 2838, 2838, 2837, 2896, 2896, 2896,  990, 2838,

     2838, 2838, 2838, 2839, 2840, 2840, 2839, 2896,  990, 2840,
     2840, 2840, 2840, 2841, 2842, 2842, 2841, 2896, 2896, 2896,
      990, 2842, 2842, 2842, 2842, 2843, 2844, 2844, 2843, 2896,
      990, 2844, 2844, 2844, 2844, 2845, 2846, 2846, 2845, 2896,
     2896, 2896,  990, 2846, 2846, 2846, 2846, 2847, 2848, 2848,
     2847, 2896,  990, 2848, 2848, 2848, 2848, 2849, 2850, 2850,
     2849, 2896, 2896, 2896,  990, 2850, 2850, 2850, 2850, 2851,
     2852, 2852, 2851, 2896,  990, 2852, 2852, 2852, 2852, 2853,
     2854, 2854, 2853, 2896, 2896, 2896,  990, 2854, 2854, 2854,
     2854, 2855, 2856, 2856, 2855, 2896,  990, 2856, 2856, 2856,

     2856, 2857, 2858, 2858, 2857, 2896, 2896, 2896,  990, 2858,
     2858, 2858, 2858, 2859, 2860, 2860, 2859, 2896,  990, 2860,
     2860, 2860, 2860, 2861, 2862, 2862, 2861, 2896, 2896, 2896,
      990, 2862, 2862, 2862, 2862, 2863, 2864, 2864, 2863, 2896,
      990, 2864, 2864, 2864, 2864, 2865, 2866, 2866, 2865, 2896,
     2896, 2896,  990, 2866, 2866, 2866, 2866, 2867, 2868, 2868,
     2867, 2896,  990, 2868, 2868, 2868, 2868, 2869, 2870, 2870,
     2869, 2896, 2896, 2896,  990, 2870, 2870, 2870, 2870, 2871,
     2872, 2872, 2871, 2896,  990, 2872, 2872, 2872, 2872, 2873,
     2874, 2874, 2873, 2896, 2896, 2896,  990, 2874, 2874, 2874,

     2874, 2875, 2876, 2876, 2875, 2896,  990, 2876, 2876, 2876,
     2876, 2877, 2878, 2878, 2877, 2896, 2896, 2896,  990, 2878,
     2878, 2878, 2878, 2879, 2880, 2880, 2879, 2896,  990, 2880,
     2880, 2880, 2880, 2881, 2882, 2882, 2881, 2896, 2896, 2896,
      990, 2882, 2882, 2882, 2882, 2883, 2884, 2884, 2883, 2896,
      990, 2884, 2884, 2884, 2884, 2885, 2886, 2886, 2885, 2896,
     2896, 2896,  990, 2886, 2886, 2886, 2886, 2887, 2888, 2888,
     2887, 2896,  990, 2888, 2888, 2888, 2888, 2889, 2890, 2890,
     2889, 2896, 2896, 2896,  990, 2890, 2890, 2890, 2890, 2891,
     2892, 2892, 2891, 2896,  990, 2892, 2892, 2892, 2892, 2893,

     2894, 2894, 2893, 2896, 2896, 2896,  990, 2894, 2894, 2894,
     2894, 2895, 1010, 1010, 2895, 2896,  990, 1010, 1010, 1010,
     1010, 2895, 1010, 1010, 2895, 2896, 2896, 2896,  990, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,  990,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,

      848,  848,  848,  848,  848,  848,  848,  848,  848,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  885,

      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  914,
     2896, 2896,  914, 2896, 2896, 2896, 2896, 2896,  914, 2896,
     2896, 2896, 2896, 2896,  914, 2896, 2896, 2896, 2896, 2896,
     2896,  914,  928,  928,  928,  928, 2896, 2896,  928, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,  928, 2896,

     2896, 2896, 2896, 2896,  928, 2896, 2896, 2896, 2896, 2896,
      928,  932,  932,  932,  932, 2896, 2896,  932, 2896, 2896,
     2896, 2896, 2896, 2896,  932, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896,  932, 2896, 2896, 2896, 2896, 2896,  932,
      936,  936,  936,  936, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896,  936, 2896,  936,  936,  936,  936, 2896,
     2896, 2896,  936,  942,  942,  942,  942, 2896, 2896,  942,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896,  942,  948,  948,  948,  948,
     2896, 2896,  948, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896,  948, 2896, 2896, 2896, 2896, 2896,  948, 2896,
     2896, 2896, 2896, 2896,  948,  957,  957,  957,  957, 2896,
     2896, 2896, 2896, 2896,  957, 2896, 2896, 2896, 2896, 2896,
      957,  957, 2896, 2896, 2896, 2896, 2896,  957,  960,  960,
      960,  960, 2896, 2896,  960, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
      960,  968,  968,  968,  968, 2896, 2896,  968, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896,  968, 2896, 2896, 2896,  968,  975,  975,
      975,  975, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896,  975, 2896,  975,  975, 2896, 2896, 2896, 2896, 2896,
      975,  981,  981, 2896,  981, 2896,  981,  981,  981,  981,
     2896,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981, 1012, 1012, 1012, 1012, 2896, 2896, 1012, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1012, 2896, 2896,
     2896, 2896, 2896, 1012, 2896, 2896, 2896, 2896, 2896, 1012,
     1018, 1018, 1018, 1018, 2896, 2896, 1018, 2896, 2896, 2896,
     2896, 1018, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 1018, 1028, 1028, 1028, 1028, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1028, 1028,
     2896, 1028, 2896, 2896, 2896, 1028, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1064, 1064, 1064, 1064,
     2896, 2896, 1064, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1064, 1065,
     1065, 2896, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 2896, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1072,

     1072, 1072, 1072, 2896, 2896, 1072, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1072, 2896, 2896, 2896, 2896,
     2896, 1072, 2896, 2896, 2896, 2896, 2896, 1072, 1076, 1076,
     1076, 1076, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1076, 1076, 2896, 1076, 2896, 2896, 2896,
     1076, 1080, 1080, 1080, 1080, 2896, 2896, 1080, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1080, 1108, 1108, 2896, 2896, 1108, 2896,
     2896, 1108, 1108, 2896, 1108, 1108, 1108, 1108, 1108, 2896,
     1108, 1108, 1108, 1108, 1108, 1108, 2896, 1108, 1108, 1108,

     1108, 2896, 2896, 1108, 1112, 1112, 2896, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1114, 1114, 2896, 1114, 2896, 1114,
     1114, 1114, 1114, 2896, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1124, 1124, 1124, 1124, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1124, 2896, 1124,
     1124, 2896, 2896, 2896, 2896, 2896, 1124, 1130, 1130, 1130,
     1130, 2896, 2896, 1130, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 1130, 2896, 2896, 2896, 2896, 2896, 1130,
     2896, 2896, 2896, 2896, 2896, 1130, 1133, 1133, 1133, 1133,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1133, 1133, 2896, 2896, 2896, 2896, 2896, 1133, 1136,
     1136, 1136, 1136, 2896, 2896, 1136, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1136, 1137, 1137, 2896, 1137, 1137, 2896, 2896, 1137,
     1137, 2896, 1137, 1137, 1137, 1137, 1137, 2896, 1137, 1137,
     1137, 1137, 1137, 1137, 2896, 1137, 1137, 2896, 1137, 2896,
     2896, 1137, 1140, 1140, 2896, 1140, 2896, 1140, 1140, 1140,

     1140, 2896, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1156, 1156, 2896, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1163, 1163, 2896, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 2896, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1174, 1174, 2896, 1174, 1174, 2896, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 2896, 1174, 2896, 1174,
     1174, 1174, 1180, 2896, 2896, 2896, 2896, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 2896, 1180, 2896, 2896, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1194, 1194, 1194, 1194, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1194, 2896, 1194, 2896, 2896,
     2896, 2896, 2896, 2896, 1194, 1197, 1197, 2896, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1206, 1206, 2896, 1206, 1206,
     2896, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 2896, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1221, 1221, 1221, 1221, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     1221, 1221, 2896, 2896, 2896, 2896, 2896, 1221, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 2896,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1244, 1244,
     2896, 1244, 2896, 1244, 1244, 1244, 1244, 2896, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1254, 1254,
     1254, 1254, 2896, 2896, 1254, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1254, 1257, 1257, 1257, 1257, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 1257, 2896, 2896, 2896, 1257, 2896, 2896, 2896,
     2896, 2896, 2896, 1257, 1263, 1263, 1263, 1263, 2896, 2896,
     1263, 1263, 2896, 2896, 2896, 1263, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1263, 1265, 1265, 1265,
     1265, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 1265, 2896, 2896, 2896, 2896, 2896, 2896, 1265,
     1265, 1275, 1275, 1275, 1275, 2896, 2896, 1275, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1275, 2896, 2896,
     2896, 2896, 2896, 1275, 2896, 2896, 2896, 2896, 2896, 1275,
     1278, 1278, 1278, 1278, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 1278, 1278, 2896, 2896, 2896,
     2896, 2896, 1278, 1281, 1281, 1281, 1281, 2896, 2896, 1281,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1281, 1286, 1286, 2896, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1288, 2896, 2896, 2896,
     2896, 2896, 2896, 1288, 1288, 2896, 2896, 2896, 1288, 1288,
     1288, 2896, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1290, 1290, 2896, 1290,

     2896, 1290, 1290, 1290, 1290, 2896, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1305, 1305, 2896, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1306, 1306, 2896, 1306,
     1306, 2896, 1306, 1306, 1306, 2896, 2896, 2896, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1307, 1307, 2896, 1307,
     2896, 1307, 1307, 1307, 1307, 2896, 1307, 1307, 1307, 1307,

     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1311, 1311, 2896, 1311,
     1311, 2896, 1311, 1311, 1311, 2896, 1311, 1311, 1311, 1311,
     1311, 2896, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 2896, 2896, 1311, 1312, 1312, 2896, 1312,
     2896, 1312, 1312, 1312, 1312, 2896, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1321, 1321, 2896, 1321,
     2896, 1321, 1321, 1321, 1321, 2896, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,

     1321, 1321, 1321, 1321, 1321, 1321, 1330, 1330, 2896, 1330,
     1330, 2896, 1330, 1330, 1330, 2896, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 2896, 1330, 1330, 1330, 1330, 1333, 1333, 2896, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334, 2896, 1334,
     1334, 2896, 1334, 1334, 1334, 2896, 2896, 2896, 1334, 1334,
     1334, 2896, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335, 2896, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 2896, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 2896, 1335,
     1335, 2896, 1335, 1335, 1335, 1335, 1343, 1343, 2896, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 2896, 1343,
     1343, 2896, 1343, 1343, 1343, 1343, 1359, 1359, 1359, 1359,
     2896, 2896, 1359, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1359, 1359,
     1365, 1365, 1365, 1365, 2896, 2896, 2896, 2896, 2896, 2896,
     1365, 2896, 1365, 2896, 2896, 1365, 2896, 2896, 2896, 2896,

     2896, 2896, 1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1370, 1370, 1370, 1370, 2896, 2896, 1370,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1370, 1374, 1374, 1374, 1374,
     2896, 2896, 2896, 2896, 2896, 1374, 2896, 2896, 2896, 2896,
     2896, 1374, 2896, 2896, 2896, 2896, 2896, 2896, 1374, 1378,
     2896, 2896, 1378, 2896, 2896, 1378, 2896, 2896, 2896, 2896,
     1378, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 1378, 1383, 1383, 1383, 1383, 2896, 2896, 1383, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1383, 2896,
     2896, 2896, 2896, 2896, 1383, 2896, 2896, 2896, 2896, 2896,
     1383, 1386, 1386, 1386, 1386, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1386, 1386, 2896, 2896,
     2896, 2896, 2896, 1386, 1389, 1389, 1389, 1389, 2896, 2896,
     1389, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1389, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1403, 1403, 2896,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 2896,
     1403, 1403, 2896, 1403, 1403, 1403, 1403, 1403, 1403, 2896,
     1403, 1403, 2896, 1403, 1403, 1403, 1403, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1424, 1424, 2896,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 2896,
     1424, 1424, 2896, 1424, 1424, 1424, 1424, 1424, 1424, 2896,
     1424, 1424, 2896, 1424, 1424, 1424, 1424,  914, 2896, 2896,

      914, 2896, 2896, 2896, 2896, 2896,  914, 2896, 2896, 2896,
     2896, 2896,  914, 2896, 2896, 2896, 2896, 2896, 2896,  914,
      932,  932,  932,  932, 2896, 2896,  932, 2896, 2896, 2896,
     2896, 2896, 2896,  932, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896,  932, 2896, 2896, 2896, 2896, 2896,  932,  936,
      936,  936,  936, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896,  936, 2896,  936,  936,  936,  936, 2896, 2896,
     2896,  936, 1440, 1440, 1440, 1440, 2896, 2896, 1440, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1440, 1442, 1442, 1442, 1442, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1442, 2896,
     1442, 2896, 2896, 2896, 2896, 2896, 2896, 1442, 1445, 1445,
     1445, 1445, 2896, 2896, 1445, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1445,  942,  942,  942,  942, 2896, 2896,  942, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896,  942, 1448, 1448, 1448, 1448, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1448,
     2896, 1448, 1448, 2896, 2896, 2896, 1448,  957,  957,  957,
      957, 2896, 2896, 2896, 2896, 2896,  957, 2896, 2896, 2896,

     2896, 2896,  957,  957, 2896, 2896, 2896, 2896, 2896,  957,
      960,  960,  960,  960, 2896, 2896,  960, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896,  960, 1458, 1458, 1458, 1458, 2896, 2896, 2896,
     2896, 2896, 1458, 2896, 2896, 2896, 2896, 2896, 1458, 2896,
     2896, 2896, 2896, 2896, 2896, 1458,  968,  968,  968,  968,
     2896, 2896,  968, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,  968, 2896,
     2896, 2896,  968,  975,  975,  975,  975, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896,  975, 2896,  975,  975,

     2896, 2896, 2896, 2896, 2896,  975, 1463, 1463, 1463, 1463,
     2896, 2896, 1463, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1463, 1471,
     1471, 2896, 1471, 2896, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 2896, 1471, 1471, 1471, 1471, 1473,
     1473, 2896, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,

     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1028,
     1028, 1028, 1028, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1028, 1028, 2896, 1028, 2896, 2896,
     2896, 1028, 1064, 1064, 1064, 1064, 2896, 2896, 1064, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1064, 1018, 1018, 1018, 1018, 2896,
     2896, 1018, 2896, 2896, 2896, 2896, 1018, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1018, 1512, 1512,
     1512, 1512, 2896, 2896, 2896, 2896, 2896, 2896, 1512, 1512,

     2896, 2896, 2896, 1512, 1512, 2896, 1512, 2896, 2896, 2896,
     1512, 1571, 1571, 1571, 1571, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1571, 2896, 2896, 1571,
     2896, 2896, 2896, 1571, 1065, 1065, 2896, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 2896, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1076, 1076, 1076, 1076, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1076,
     1076, 2896, 1076, 2896, 2896, 2896, 1076, 1080, 1080, 1080,
     1080, 2896, 2896, 1080, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1080,
     1575, 1575, 1575, 1575, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1575, 2896, 2896, 1575, 2896,
     2896, 2896, 1575, 1108, 1108, 2896, 2896, 1108, 2896, 2896,
     1108, 1108, 2896, 1108, 1108, 1108, 1108, 1108, 2896, 1108,
     1108, 1108, 1108, 1108, 1108, 2896, 1108, 1108, 1108, 1108,
     2896, 2896, 1108, 1112, 1112, 2896, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1600, 1600, 2896, 1600, 2896, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 2896, 1600,
     1600, 1600, 1600, 1602, 1602, 2896, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1607, 1607, 2896, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1124, 1124, 1124, 1124, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1124, 2896, 1124, 1124,

     2896, 2896, 2896, 2896, 2896, 1124, 1612, 1612, 1612, 1612,
     2896, 2896, 1612, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1612, 1133,
     1133, 1133, 1133, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1133, 1133, 2896, 2896, 2896, 2896,
     2896, 1133, 1136, 1136, 1136, 1136, 2896, 2896, 1136, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1136, 1137, 1137, 2896, 1137, 1137,
     2896, 2896, 1137, 1137, 2896, 1137, 1137, 1137, 1137, 1137,
     2896, 1137, 1137, 1137, 1137, 1137, 1137, 2896, 1137, 1137,

     2896, 1137, 2896, 2896, 1137, 1616, 1616, 2896, 1616, 2896,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     2896, 1616, 1616, 1616, 1616, 1618, 1618, 2896, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1163, 1163, 2896, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 2896, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1174, 1174, 2896, 1174, 1174,
     2896, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 2896,
     1174, 2896, 1174, 1174, 1174, 1180, 2896, 2896, 2896, 2896,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 2896, 1180, 2896,
     2896, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1194, 1194, 1194, 1194, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1194, 2896,

     1194, 2896, 2896, 2896, 2896, 2896, 2896, 1194, 1634, 1634,
     1634, 1634, 2896, 2896, 1634, 2896, 2896, 2896, 2896, 1634,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1634, 1197, 1197, 2896, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1206, 1206, 2896, 1206, 1206, 2896, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 2896, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1221, 1221, 1221, 1221, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1221, 1221, 2896, 2896,
     2896, 2896, 2896, 1221, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 2896, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1646, 2896, 2896, 2896, 1646, 1646,
     2896, 2896, 1646, 2896, 2896, 2896, 2896, 1646, 2896, 1646,
     1655, 1655, 2896, 1655, 2896, 1655, 1655, 1655, 1655, 1655,

     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 2896, 1655, 1655, 1655, 1655,
     1657, 1657, 2896, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1254, 1254, 1254, 1254, 2896, 2896, 1254, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 1254, 1257, 1257, 1257, 1257, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1257, 2896, 2896, 2896, 1257, 2896,
     2896, 2896, 2896, 2896, 2896, 1257, 1263, 1263, 1263, 1263,

     2896, 2896, 1263, 1263, 2896, 2896, 2896, 1263, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1263, 1265,
     1265, 1265, 1265, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1265, 2896, 2896, 2896, 2896, 2896,
     2896, 1265, 1265, 1665, 1665, 2896, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1670, 1670, 1670, 1670, 2896, 2896, 1670,
     2896, 2896, 2896, 2896, 1670, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1670, 1278, 1278, 1278, 1278,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1278, 1278, 2896, 2896, 2896, 2896, 2896, 1278, 1281,
     1281, 1281, 1281, 2896, 2896, 1281, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1281, 1286, 1286, 2896, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1288, 2896, 2896, 2896, 2896, 2896, 2896, 1288,
     1288, 2896, 2896, 2896, 1288, 1288, 1288, 2896, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,

     1288, 1288, 1674, 1674, 2896, 1674, 2896, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 2896, 1674, 1674,
     1674, 1674, 1676, 1676, 2896, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1306, 1306, 2896, 1306, 1306, 2896, 1306, 1306,
     1306, 2896, 2896, 2896, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1682, 1682, 2896, 1682, 2896, 1682, 1682, 1682,

     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 2896, 1682, 1682,
     1682, 1682, 1684, 1684, 2896, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1311, 1311, 2896, 1311, 1311, 2896, 1311, 1311,
     1311, 2896, 1311, 1311, 1311, 1311, 1311, 2896, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 2896,
     2896, 1311, 1686, 1686, 2896, 1686, 2896, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 2896, 1686, 1686,
     1686, 1686, 1688, 1688, 2896, 1688, 1688, 1688, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1688, 1688, 1691, 1691, 2896, 1691, 2896, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1691, 2896, 1691, 1691,
     1691, 1691, 1693, 1693, 2896, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,

     1693, 1693, 1330, 1330, 2896, 1330, 1330, 2896, 1330, 1330,
     1330, 2896, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 2896, 1330, 1330,
     1330, 1330, 1334, 1334, 2896, 1334, 1334, 2896, 1334, 1334,
     1334, 2896, 2896, 2896, 1334, 1334, 1334, 2896, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1335, 1335, 2896, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 2896, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 2896, 1335, 1335, 2896, 1335, 1335,
     1335, 1335, 1343, 1343, 2896, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 2896, 1343, 1343, 2896, 1343, 1343,
     1343, 1343, 1359, 1359, 1359, 1359, 2896, 2896, 1359, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1359, 1359, 1708, 1708, 1708, 1708,
     2896, 2896, 2896, 2896, 2896, 2896, 1708, 2896, 1708, 2896,
     2896, 1708, 2896, 2896, 2896, 2896, 2896, 2896, 1708, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1365,

     1365, 1365, 1365, 2896, 2896, 2896, 2896, 2896, 2896, 1365,
     2896, 1365, 2896, 2896, 1365, 2896, 2896, 2896, 2896, 2896,
     2896, 1365, 1370, 1370, 1370, 1370, 2896, 2896, 1370, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1370, 1712, 1712, 1712, 1712, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1712, 2896, 2896, 2896, 2896, 2896, 2896, 1712, 1374, 1374,
     1374, 1374, 2896, 2896, 2896, 2896, 2896, 1374, 2896, 2896,
     2896, 2896, 2896, 1374, 2896, 2896, 2896, 2896, 2896, 2896,
     1374, 1386, 1386, 1386, 1386, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 1386, 1386, 2896, 2896,
     2896, 2896, 2896, 1386, 1389, 1389, 1389, 1389, 2896, 2896,
     1389, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1389, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1403, 1403, 2896,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 2896,
     1403, 1403, 2896, 1403, 1403, 1403, 1403, 1403, 1403, 2896,
     1403, 1403, 2896, 1403, 1403, 1403, 1403, 1421, 1421, 1421,

     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 2896, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1424, 1424, 2896,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 2896,
     1424, 1424, 2896, 1424, 1424, 1424, 1424, 1424, 1424, 2896,
     1424, 1424, 2896, 1424, 1424, 1424, 1424, 1741, 1741, 1741,
     1741, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 1741, 1741, 1741, 1741, 2896, 2896, 2896, 1741,
     1440, 1440, 1440, 1440, 2896, 2896, 1440, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 1440, 1742, 1742, 1742, 1742, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1742, 2896,
     1742, 1742, 2896, 2896, 2896, 1742, 1442, 1442, 1442, 1442,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1442,
     2896, 1442, 2896, 2896, 2896, 2896, 2896, 2896, 1442, 1445,
     1445, 1445, 1445, 2896, 2896, 1445, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1445, 1437, 1437, 1437, 1437, 2896, 2896, 1437, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1437, 2896,
     2896, 2896, 2896, 2896, 1437, 2896, 2896, 2896, 2896, 2896,

     1437, 1448, 1448, 1448, 1448, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1448, 2896, 1448, 1448,
     2896, 2896, 2896, 1448, 1744, 1744, 1744, 1744, 2896, 2896,
     2896, 2896, 2896, 1744, 2896, 2896, 2896, 2896, 2896, 1744,
     1744, 2896, 2896, 2896, 2896, 2896, 1744, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 2896,
     1745, 1745, 2896, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 2896, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1449, 1449, 1449,
     1449, 2896, 2896, 1449, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1449, 2896, 2896, 2896, 2896, 2896, 1449,
     2896, 2896, 2896, 2896, 2896, 1449, 1458, 1458, 1458, 1458,
     2896, 2896, 2896, 2896, 2896, 1458, 2896, 2896, 2896, 2896,
     2896, 1458, 2896, 2896, 2896, 2896, 2896, 2896, 1458, 1753,
     1753, 1753, 1753, 2896, 2896, 1753, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1753, 2896, 2896, 2896, 2896,
     2896, 1753, 2896, 2896, 2896, 2896, 2896, 1753,  975,  975,
      975,  975, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896,  975, 2896,  975,  975, 2896, 2896, 2896, 2896, 2896,
      975, 1463, 1463, 1463, 1463, 2896, 2896, 1463, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1463, 1756, 1756, 1756, 1756, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1756,
     1756, 2896, 2896, 2896, 2896, 2896, 1756, 1763, 1763, 2896,
     1763, 2896, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 2896, 1763, 1763, 1763, 1763, 1012, 1012, 1012,
     1012, 2896, 2896, 1012, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 1012, 2896, 2896, 2896, 2896, 2896, 1012,
     2896, 2896, 2896, 2896, 2896, 1012, 1803, 1803, 1803, 1803,
     2896, 2896, 1803, 2896, 2896, 2896, 2896, 1803, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1803, 1809,
     1809, 1809, 1809, 2896, 2896, 1809, 2896, 2896, 2896, 1809,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1809, 1512, 1512, 1512, 1512, 2896, 2896, 2896, 2896,
     2896, 2896, 1512, 1512, 2896, 2896, 2896, 1512, 1512, 2896,
     1512, 2896, 2896, 2896, 1512, 1811, 2896, 2896, 1811, 2896,
     2896, 2896, 1811, 2896, 2896, 2896, 1811, 1811, 2896, 2896,

     1811, 2896, 2896, 2896, 2896, 1811, 2896, 1811, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
     2896, 1813, 1813, 2896, 1813, 1813, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 2896, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1028, 1028,
     1028, 1028, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1028, 1028, 2896, 1028, 2896, 2896, 2896,
     1028, 1571, 1571, 1571, 1571, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 1571, 2896, 2896, 1571,
     2896, 2896, 2896, 1571, 1072, 1072, 1072, 1072, 2896, 2896,
     1072, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1072, 2896, 2896, 2896, 2896, 2896, 1072, 2896, 2896, 2896,
     2896, 2896, 1072, 1575, 1575, 1575, 1575, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1575, 2896,
     2896, 1575, 2896, 2896, 2896, 1575, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1112, 1112, 2896, 1112,

     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1885, 1885, 2896, 1885,
     2896, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
     1885, 2896, 1885, 1885, 1885, 1885, 1607, 1607, 2896, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1612, 1612, 1612, 1612,
     2896, 2896, 1612, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1612, 1891,
     1891, 1891, 1891, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 1891, 2896, 1891, 1891, 2896, 2896, 2896, 2896,
     2896, 1891, 1124, 1124, 1124, 1124, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1124, 2896, 1124, 1124, 2896,
     2896, 2896, 2896, 2896, 1124, 1130, 1130, 1130, 1130, 2896,
     2896, 1130, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1130, 2896, 2896, 2896, 2896, 2896, 1130, 2896, 2896,
     2896, 2896, 2896, 1130, 1893, 1893, 2896, 1893, 2896, 1893,
     1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893,

     1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 2896,
     1893, 1893, 1893, 1893, 1180, 2896, 2896, 2896, 2896, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 2896, 1180, 2896, 2896,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1634, 1634, 1634, 1634, 2896, 2896,
     1634, 2896, 2896, 2896, 2896, 1634, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1634, 1903, 1903, 1903,
     1903, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1903, 2896, 1903, 2896, 2896, 2896, 2896, 2896, 2896, 1903,
     1646, 2896, 2896, 2896, 1646, 1646, 2896, 2896, 1646, 2896,

     2896, 2896, 2896, 1646, 2896, 1646, 1914, 1914, 2896, 1914,
     2896, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 2896, 1914, 1914, 1914, 1914, 1665, 1665, 2896, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1670, 1670, 1670, 1670,
     2896, 2896, 1670, 2896, 2896, 2896, 2896, 1670, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1670, 1919,
     1919, 1919, 1919, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 1919, 1919, 2896, 2896, 2896, 2896,
     2896, 1919, 1275, 1275, 1275, 1275, 2896, 2896, 1275, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1275, 2896,
     2896, 2896, 2896, 2896, 1275, 2896, 2896, 2896, 2896, 2896,
     1275, 1921, 1921, 2896, 1921, 2896, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 2896, 1921, 1921, 1921,
     1921, 1927, 1927, 2896, 1927, 2896, 1927, 1927, 1927, 1927,
     1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927,
     1927, 1927, 1927, 1927, 1927, 1927, 2896, 1927, 1927, 1927,

     1927, 1930, 1930, 2896, 1930, 2896, 1930, 1930, 1930, 1930,
     1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
     1930, 1930, 1930, 1930, 1930, 1930, 2896, 1930, 1930, 1930,
     1930, 1934, 1934, 2896, 1934, 2896, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 2896, 1934, 1934, 1934,
     1934, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 2896, 1947, 1947,
     1947, 1947, 1947, 1947, 2896, 1947, 1947, 1947, 1947, 1947,
     1947, 1708, 1708, 1708, 1708, 2896, 2896, 2896, 2896, 2896,

     2896, 1708, 2896, 1708, 2896, 2896, 1708, 2896, 2896, 2896,
     2896, 2896, 2896, 1708, 1712, 1712, 1712, 1712, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1712,
     2896, 2896, 2896, 2896, 2896, 2896, 1712, 1383, 1383, 1383,
     1383, 2896, 2896, 1383, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1383, 2896, 2896, 2896, 2896, 2896, 1383,
     2896, 2896, 2896, 2896, 2896, 1383, 1403, 1403, 2896, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 2896, 1403,
     1403, 2896, 1403, 1403, 1403, 1403, 1403, 1403, 2896, 1403,
     1403, 2896, 1403, 1403, 1403, 1403, 1421, 1421, 1421, 1421,

     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 2896, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 2896, 1966, 1966, 1966, 1966, 1966, 1966, 2896,
     1966, 1966, 1966, 1966, 1966, 1966, 1741, 1741, 1741, 1741,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1741, 1741, 1741, 1741, 2896, 2896, 2896, 1741, 1742,
     1742, 1742, 1742, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 1742, 2896, 1742, 1742, 2896, 2896,

     2896, 1742, 1744, 1744, 1744, 1744, 2896, 2896, 2896, 2896,
     2896, 1744, 2896, 2896, 2896, 2896, 2896, 1744, 1744, 2896,
     2896, 2896, 2896, 2896, 1744, 1753, 1753, 1753, 1753, 2896,
     2896, 1753, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1753, 2896, 2896, 2896, 2896, 2896, 1753, 2896, 2896,
     2896, 2896, 2896, 1753, 1971, 1971, 1971, 1971, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1971,
     1971, 2896, 2896, 2896, 2896, 2896, 1971, 1974, 1974, 1974,
     1974, 2896, 2896, 1974, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1974,

      975,  975,  975,  975, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896,  975, 2896,  975,  975, 2896, 2896, 2896,
     2896, 2896,  975, 1756, 1756, 1756, 1756, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1756, 1756,
     2896, 2896, 2896, 2896, 2896, 1756, 1463, 1463, 1463, 1463,
     2896, 2896, 1463, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1463, 1980,
     1980, 2896, 1980, 2896, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 2896, 1980, 1980, 1980, 1980, 1803,

     1803, 1803, 1803, 2896, 2896, 1803, 2896, 2896, 2896, 2896,
     1803, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1803, 2019, 2019, 2019, 2019, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2019, 2019, 2896,
     2019, 2896, 2896, 2896, 2019, 1809, 1809, 1809, 1809, 2896,
     2896, 1809, 2896, 2896, 2896, 1809, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1809, 2026, 2026,
     2026, 2026, 2896, 2896, 2026, 2896, 2896, 2896, 2896, 2026,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2026, 1811, 2896, 2896, 1811, 2896, 2896, 2896, 1811, 2896,

     2896, 2896, 1811, 1811, 2896, 2896, 1811, 2896, 2896, 2896,
     2896, 1811, 2896, 1811, 2028, 2028, 2896, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2030, 2030, 2896, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 1028, 1028, 1028, 1028, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1028,
     1028, 2896, 1028, 2896, 2896, 2896, 1028, 1882, 1882, 1882,

     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1112, 1112, 2896,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 2093, 2093, 2896,
     2093, 2896, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2896, 2093, 2093, 2093, 2093, 2096, 2096, 2096,
     2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096,

     2096, 2096, 2096, 2896, 2096, 2096, 2096, 2096, 2096, 2096,
     2896, 2096, 2096, 2096, 2096, 2096, 2096, 1891, 1891, 1891,
     1891, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     1891, 2896, 1891, 1891, 2896, 2896, 2896, 2896, 2896, 1891,
     1124, 1124, 1124, 1124, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 1124, 2896, 1124, 1124, 2896, 2896, 2896,
     2896, 2896, 1124, 2098, 2098, 2896, 2098, 2896, 2098, 2098,
     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2896, 2098,
     2098, 2098, 2098, 1180, 2896, 2896, 2896, 2896, 1180, 1180,

     1180, 1180, 1180, 1180, 1180, 2896, 1180, 2896, 2896, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1903, 1903, 1903, 1903, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 1903, 2896, 1903, 2896,
     2896, 2896, 2896, 2896, 2896, 1903, 2112, 2112, 2896, 2112,
     2896, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2896, 2112, 2112, 2112, 2112, 1919, 1919, 1919, 1919,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1919, 1919, 2896, 2896, 2896, 2896, 2896, 1919, 2115,

     2115, 2896, 2115, 2896, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2896, 2115, 2115, 2115, 2115, 2118,
     2118, 2896, 2118, 2896, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2896, 2118, 2118, 2118, 2118, 2120,
     2120, 2896, 2120, 2896, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2896, 2120, 2120, 2120, 2120, 2123,
     2123, 2896, 2123, 2896, 2123, 2123, 2123, 2123, 2123, 2123,

     2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
     2123, 2123, 2123, 2123, 2896, 2123, 2123, 2123, 2123, 2127,
     2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127,
     2127, 2127, 2127, 2127, 2127, 2896, 2127, 2127, 2127, 2127,
     2127, 2127, 2896, 2127, 2127, 2127, 2127, 2127, 2127, 1378,
     2896, 2896, 1378, 2896, 2896, 1378, 2896, 2896, 2896, 2896,
     1378, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1378, 1403, 1403, 2896, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 2896, 1403, 1403, 2896, 1403, 1403,
     1403, 1403, 1403, 1403, 2896, 1403, 1403, 2896, 1403, 1403,

     1403, 1403, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
     2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2896, 2146,
     2146, 2146, 2146, 2146, 2146, 2896, 2146, 2146, 2146, 2146,
     2146, 2146, 1971, 1971, 1971, 1971, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1971, 1971, 2896,
     2896, 2896, 2896, 2896, 1971, 1974, 1974, 1974, 1974, 2896,
     2896, 1974, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 1974,  975,  975,
      975,  975, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896,  975, 2896,  975,  975, 2896, 2896, 2896, 2896, 2896,

      975, 2019, 2019, 2019, 2019, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2019, 2019, 2896, 2019,
     2896, 2896, 2896, 2019, 2201, 2896, 2896, 2201, 2896, 2896,
     2896, 2201, 2896, 2896, 2896, 2201, 2201, 2896, 2896, 2201,
     2896, 2896, 2896, 2896, 2201, 2896, 2201, 2203, 2203, 2203,
     2203, 2896, 2896, 2896, 2896, 2896, 2896, 2203, 2896, 2896,
     2896, 2896, 2203, 2203, 2896, 2203, 2896, 2896, 2896, 2203,
     2028, 2028, 2896, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,

     2030, 2030, 2896, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     1028, 1028, 1028, 1028, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 1028, 1028, 2896, 1028, 2896,
     2896, 2896, 1028, 1099, 1099, 1099, 1099, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1099, 2896,
     2896, 2896, 2896, 2896, 2896, 1099, 1112, 1112, 2896, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,

     1112, 1112, 1112, 1112, 1112, 1112, 1124, 1124, 1124, 1124,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 1124,
     2896, 1124, 1124, 2896, 2896, 2896, 2896, 2896, 1124, 1180,
     2896, 2896, 2896, 2896, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 2896, 1180, 2896, 2896, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1670,
     1670, 1670, 1670, 2896, 2896, 1670, 2896, 2896, 2896, 2896,
     1670, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 1670, 1803, 1803, 1803, 1803, 2896, 2896, 1803, 2896,
     2896, 2896, 2896, 1803, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 1803, 2642, 2642, 2642, 2642, 2642,
     2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642,
     2642, 2896, 2642, 2642, 2642, 2642, 2642, 2642, 2896, 2642,
     2642, 2642, 2642, 2642, 2642, 2720, 2720, 2720, 2720, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2720, 2896, 2896, 2896, 2720, 2896, 2896, 2720,  217, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896
    } ;

static yyconst flex_int16_t yy_chk[21339] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
        1,    0,    2,  304,  223,  233,  233,  304,    1,  223,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        5,    5,    5,    5,  225,    5,    5,  225, 2168,    5,
        6,    6,    6,    6,  225,    6,    6,    5,   13,    6,
     1722,  242,   13,   13,  242,   14,   13,    6,  276,   14,
       14,  276,  892,   14,   13,  227,  227,  227,  227,  232,
       13,   14,   13, 1722,  232,  252,  265,   14,    5,   14,
      252,  265,  227,  250,  250,  250,  250,  892,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   17,   17,   17,   17,  284,
       17,   17,  284,  991,   17,   18,   18,   18,   18,  991,
       18,   18,   17,  283,   18,   19,  457,  457,  283,   19,

       19,   20,   18,   19,   19,   20,   20,  297,   19,   20,
       20,   19,  297,  309,   20,   21,   19,   20,  309,   21,
       21,   22,   20,   21, 2169,   22,   22,  343,   21,   22,
      355,   21,  343,  359,   22,  355,   21,   22,  359,   25,
       17, 1642,   22,   25,   25,  422,   17,   25,  422,   26,
       18,  399, 1642,   26,   26,   25,   18,   26,   37,  374,
      399,   25,   37,   37,  374,   26,   37,   37,   37,   19,
      445,   26, 2171,  445,   37,   20,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   31,   31,   31,   31,  453,   31,   31,
      453, 2173,   31,   32,   32,   32,   32,  429,   32,   32,
       31,  381,   32,   33,  476,  476,  381,   33,   33,   34,
       32,   33,   33,   34,   34,  315,   33,   34,   34,   33,
     1237,  315,   34,   33,   33,   34,  620,  315,  620,   34,
       34,   35,   35,   35,   35, 1237,   35,   35,  387,  394,
       35,   35,   35,  387,  394,   35, 2175,  429,   35,   36,
       36,   36,   36,  302,   36,   36,  302,  407,   36,   36,
       36, 1964,  407,   36,   38,  414,   36, 2176,   38,   38,

      414,   39,   38,   38,   38,   39,   39,   33,  567,   39,
       38,   40,  567,   34, 1964,   40,   40,   39,  424,   40,
       43,  447,   39,  424,   43,   43,  447,   40,   43,   43,
       44, 2177,   40,  997,   44,   44,   43,  302,   44,   44,
       71,   43,   43,  997,   71,   71,   44,  593,   71,   72,
      593,   44,   44,   72,   72,   75,   71,   72, 2178,   75,
       75,   73,   73,   75,   73,   72,   73,   73,  917,  456,
       73,   75,  465,   73,  456,   39,  917,  465,   73,  306,
      306,  306,  306,  481,  481,   40,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   45,  810,  471, 1004,   45,
       45,   46,  471,   45,  442,   46,   46,  442, 1004,   46,
      442,   45,  810,   47,   47,   47,   47,   46,   47,   47,
       74,   74,   47,   74,  614,   74,   74,  614,  617,   74,

       47,  617,   74,   48,   48,   48,   48,   74,   48,   48,
       47,   45,   48,   45,  544,  452,  544,   46,  452,   46,
       48,  452,   49,   49,   49,   49, 2179,   49,   49,  480,
       48,   49,  544, 2180,  480,   50,   50,   50,   50,   49,
       50,   50,  825,  825,   50,  373,  373,  373,  373,   49,
      906,  906,   50,  228,  228,  228,  228,  740,   47,   47,
      740, 1485,   50,   51,   51,   51,   51,  740,   51,   51,
      228, 1485,   51,  235,  235,  235,  235, 1900,   48,   48,
       51,  488,   52,   52,   52,   52,  488,   52,   52,  235,
       51,   52,  494,  918,  235, 1900,   63,   49,   49,   52,

       63,   63,  483,  494,   63,  483,  918,   63,  494,   52,
       50,   50,   63,   76,  483,   79, 2181,   76,   76,   79,
       79,   76,  505,   79,   79,   79,  951,  505,  516,   76,
      527,   79,   80,  516,  951,  527,   80,   80,   51,   51,
       80,   80,   80,   63,  243,  243,  243,  243,   80,  982,
      982,  243,  419,  419,  419,  419, 2182,   52,   52,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   57,   57, 1228,
       57, 1228,   57,   57,   58,   58,   57,   58, 1014,   58,
       58,   61, 1014,   58,   57,   61,   61,   59,   59,   61,
       59,   58,   59,   59,   57,   62,   59,   61, 2183,   62,
       62,   58,  925,   62,   59,  925,  939,   60,   60,  939,
       60,   62,   60,   60,   59,   57,   60,  236,  236,  236,
      236,   64,   58,   83,   60,   64,   64,   83,   83,   64,
     2184,   83,   64,  236,   60,   59,   93,   64,  236,   83,
       93,   93,   57,   57,   93,   83,  533,   83, 2185,   58,

       58,  533,   93,   65,  543,   60,   61,   65,   65,  543,
      555,   65,   59,   59,   65,  555, 1095,  565,   64,   65,
       62,   67,  565,   66, 1095,   67,   67,   66,   66,   67,
      572,   66,   60,   60,   66,  572,   68,   67,   93,   66,
       68,   68,   67,  581,   68, 2186,  590,   67,  581,  603,
       65,  590,   68,  615,  603,   69,   69,   68,  615,   69,
       69,  644,   68,   69,   70,   70,  644, 2187,   70,   70,
       66,   69,   70,   77,  662, 1025, 1025,   77,   77,  662,
       70,   77,   78,  672, 1115, 1115,   78,   78,  672,   77,
       78,   81,   81,   81,   81,   67,   81,   81,   78,  103,

       81,  682,   69,  103,  103, 1142,  682,  103,   81,  811,
       68,   70,  811, 1142,   81,  103,   81,   82,   82,   82,
       82,  811,   82,   82, 1199,   91,   82,   84, 1199,   91,
       91,   84,   84,   91,   82,   84,  289,  289,  289,  289,
       82,   91,   82,   84,  621, 2188,  621,   77,   77,   84,
       85,   84, 1092,  289,   85,   85,   78,   78,   85,   85,
       85, 1092,  622,   86,  622, 1201,   85,   86,   86, 1201,
       87,   86,   86,   86,   87,   87,   88,  697,   87,   86,
       88,   88,  697,  706,   88,  104,   87,  621,  706,  104,
      104, 2011,   88,  104,  245,  245,  245,  245,  107,   91,

     2011,  104,  107,  107,  111,  622,  107,  911,  111,  111,
      911, 2189,  111, 1203,  107,  245,   87,  911,   87,  107,
      111, 1203,   88, 2190,   88,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   92, 1229,   94, 1229,   92,   92,
       94,   94,   92,  108,   94, 1141, 1141,  108,  108,  101,
       92,  108,   94,  101,  101,  655,  719,  101,  655,  108,
      655,  719, 1789,  102,  108,  101, 1789,  102,  102,  112,
      730,  102, 2191,  112,  112,  730,  115,  112,  736,  102,
      115,  115,  747,  736,  115,  112,  115,  747,   94, 1294,
      116,  756,  115, 2192,  116,  116,  756, 1294,  116, 1434,
      116,  246,  246,  246,  246,  101,  116, 1434,   92,   95,
       95,   95,   95, 2193,   95,   95,  101,  907,   95,  102,
      907,   95,  246,  101,  101,   95,   95, 1152, 1152,  907,

      102,  241,  241,  241,  241,  119,   95,  102,  102,  119,
      119,  766, 2194,  119,  776,  119,  766,  241, 2196,  776,
      786,  119,  241,  241,  241,  786, 1295,   95,   96,   96,
       96,   96,  863,   96,   96,  863,  792,   96,  120, 1295,
       96,  792,  120,  120,   96,   96,  120, 2106,  120, 2106,
      863, 2197,  121,  800,  120,   96,  121,  121,  800,  139,
      121,  809,  970,  139,  139,  970,  809,  139,  121,  139,
      420,  420,  420,  420,  121,  139,   96,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  122, 1475,  137, 2198,  122,  122,  137,  137,  122,
     1475,  137,  137,  257,  257,  257,  257,  122,  977,  137,
      257,  977, 2199,  122,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  127,  818, 1160, 1160,  127,  127,  818,  128,
      127,  824,  127,  128,  128,  830,  824,  128,  127,  128,
      830,  995,  138,  840,  995,  128,  138,  138,  840,  155,
      138,  138,  127,  155,  155,  853,  873,  155,  138,  128,
      853,  873,  878,  127,  127,  155,  127,  878, 2201,  155,
      128,  128, 2204,  128,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  133,  133,  133,  133, 1003,  133,  133, 1003,
      140,  133,  133,  133,  140,  140,  133,  133,  140,  133,
      140, 1408,  884,  890,  133,  133,  140,  133,  890,  133,
     1232,  143, 1232,  884, 2206,  143,  143,  144,  884,  143,
     1499,  144,  144,  891,  143,  144, 1408,  143,  891,  133,
      144,  133,  143,  144, 2207,  896, 1499,  209,  144,  149,

      896,  209,  209,  149,  149,  209,  897,  149,  149,  149,
     2208,  897, 1232,  209, 1233,  149, 1233,  133,  133,  134,
      134,  134,  134,  989,  134,  134,  989,  145,  134,  134,
      134,  145,  145,  134,  134,  145,  134,  256,  256,  256,
      256,  134,  134,  145,  134,  149,  134,  256,  146,  145,
     2209,  145,  146,  146, 1233,  177,  146,  904,  256,  177,
      177, 1477,  904,  177,  146,  177,  134, 2210,  134, 1477,
      146,  177,  146,  151,  151,  151,  151,  989,  151,  151,
     1162, 1162,  151,  151,  151,  337,  337,  337,  337, 2211,
      151, 2253,  337, 2255,  134,  134,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  150,  916,  978, 2262,  150,  150,  916,
      978,  150,  150,  150, 1428,  152,  152,  152,  152,  150,
      152,  152,  984, 2264,  152,  152,  152,  984,  153,  153,
      153,  153,  152,  153,  153, 2265,  210,  153,  153, 1428,
      210,  210,  156,  986,  210,  153,  156,  156,  986,  150,
      156,  153,  210,  153,  154,  154,  154,  154,  156,  154,
      154, 1001,  156,  154,  154, 2035,  305,  305,  305,  305,

     1001,  154, 1026,  305, 2035, 1026, 1001,  154,  305,  154,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  161, 1007,
      162, 2266,  161,  161,  162,  162,  161, 1007,  162,  161,
     2268,  162, 1007,  163,  161,  164,  162,  163,  163,  164,
      164,  163, 1111,  164,  163, 1111,  164, 1148,  165,  163,

     1148,  164,  165,  165, 2270,  167,  165,  165,  165,  167,
      167, 1245, 1245,  167,  165,  161,  952,  162,  166,  952,
      952,  167,  166,  166, 1146, 2271,  166,  166,  166, 1146,
      163,  168,  164,  952,  166,  168,  168, 1291, 1291,  168,
      169,  169, 2273,  169, 2274,  169,  169,  168, 1435,  169,
      169,  169, 1211,  170,  170, 1211,  170,  169,  170,  170,
     1293, 1435,  170,  170,  170, 1293,  395,  395,  395,  395,
      170, 1404,  175,  175,  175,  175, 1404,  175,  175,  167,
      167,  175,  175,  175,  395, 1157,  175,  178, 1157,  175,
     1138,  178,  178, 1138, 2275,  178, 1138,  178,  418,  418,

      418,  418, 1157,  178,  418,  168,  168,  171,  171,  171,
      171,  912,  171,  171,  912,  207,  171,  171,  171,  207,
      207,  912, 2276,  207,  171,  207,  366,  366,  366,  366,
      171,  207,  171,  176,  176,  176,  176, 2277,  176,  176,
      366, 1736,  176,  176,  176,  914, 1164,  176,  914, 1164,
      176,  179,  179,  179,  179,  914,  179,  179, 1164,  208,
      179,  179,  179,  208,  208,  179, 1736,  208,  179,  208,
     2278,  267,  267,  267,  267,  208,  171,  172,  172,  172,
      172, 1224,  172,  172, 1224,  181,  172,  172,  172,  181,
      181,  182,  267,  181,  172,  182,  182, 1308, 1308,  182,

      172,  181,  172,  180,  180,  180,  180,  182,  180,  180,
     1313, 1313,  180,  180,  180, 2279, 1227,  180,  185, 1227,
      180, 1314,  185,  185, 1314,  211,  185,  185,  185,  211,
      211, 1314,  181,  211,  185, 1322, 1322, 1395,  182, 2280,
     1395,  211,  427,  427,  427,  427,  172,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  183, 1355,  184, 2281,
      183,  183,  184,  184,  183, 1489,  184,  244,  244,  244,
      244,  186,  183, 1489,  184,  186,  186, 2282,  187,  186,
      186,  186,  187,  187, 1620,  188,  187,  186,  244,  188,
      188, 1476, 1620,  188,  187,  290,  290,  290,  290, 1355,
      187,  188,  187,  183, 1476,  184,  189,  188, 2283,  188,
      189,  189,  290,  852,  189, 2284,  852,  189,  190,  190,
      852,  190,  189,  190,  190,  852, 1355,  190, 1147, 2285,

      190, 1147,  189,  191, 1147,  190, 2286,  191,  191,  192,
     1678,  191,  244,  192,  192,  190,  193,  192, 1678,  191,
      193,  193,  194,  189,  193,  192,  194,  194, 1258,  191,
      194, 1258,  193, 1258, 1391,  192,  190, 1391,  194,  195,
     1478,  196,  193,  195,  195,  196,  196,  195,  194,  196,
      191, 1474, 1391, 1478,  212,  195,  192,  196,  212,  212,
     1474, 1474,  212,  193,  275,  275,  275,  275, 2290,  194,
      212,  296,  296,  296,  296,  298,  298,  298,  298, 2291,
      275,  300,  300,  300,  300,  275, 1422,  195,  296,  196,
     2292, 1422,  298,  350,  350,  350,  350, 1518, 1518, 1496,

      350, 2293,  300,  195, 1496,  196,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  201, 1621,  202, 2294,  201,  201,
      202,  202,  201,  201,  202,  202, 1522, 1522, 1621,  213,
      201,  215,  202,  213,  213,  215,  215,  213, 1340,  215,
      213, 1340,  215, 1527, 2295,  213, 1748,  215, 1527, 1452,

     1340,  213, 1452,  215, 1748,  213, 2297,  215,  307,  307,
      307,  307,  406,  406,  406,  406, 1452,  440,  440,  440,
      440, 1815, 1815,  406,  440,  307,  213,  201,  215,  202,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203,  203,  205,
      205, 1348,  205, 1096,  205,  205, 1096, 1096,  205,  214,
      214, 1679,  214, 2298,  214,  214,  205, 1821,  214, 1375,
     1096,  214, 1375,  205, 1679, 1821,  214,  237,  237,  237,
      237, 1375,  214, 2299,  237, 1603,  214,  216,  216, 2300,
      216, 1348,  216,  216, 1603, 1603,  216, 1377,  237,  216,
     1377, 2301,  205,  862,  216,  895,  862,  214,  895, 1377,
      216, 1430, 1143, 1897,  216, 1143, 1143,  895,  205, 1348,
      205, 1897,  895, 1619,  205,  206,  206,  862,  206, 1143,
      206,  206, 1619, 1619,  206,  216,  234,  234,  234,  234,

     1822, 1822,  206,  238,  238,  238,  238, 2302, 1394,  206,
      238, 1394,  234, 1430,  237, 1587,  862,  234, 1587,  238,
      247,  247,  247,  247, 2305, 1948, 1394,  247,  268,  268,
      268,  268, 1587, 1948,  862,  268, 1423, 1658,  206, 1423,
     1430,  247,  269,  269,  269,  269, 1658, 1658, 1423,  269,
      270,  270,  270,  270,  206, 1412,  206,  270, 2310, 1967,
      206,  271,  271,  271,  271, 2029, 1718, 1967,  271, 1718,
     2029,  234,  301,  301,  301,  301,  500,  500,  500,  500,
      238, 2311, 1488,  303,  303,  303,  303,  268, 1431, 2109,
      303, 1431, 2109,  301, 1488, 1412, 1008,  247, 1488, 1008,

     1431,  269, 2313,  268,  303,  311,  311,  311,  311,  270,
      316,  316,  316,  316, 1008, 1008, 1008,  269,  351,  351,
      351,  351,  311, 1412, 2315,  270,  317,  317,  317,  317,
     2316,  316, 1649,  316, 1649,  351,  271,  299,  299,  299,
      299, 2317, 1204,  299, 1809, 1204, 1204,  317, 1809,  317,
     1008,  319,  319,  319,  319, 1809, 1809, 1809,  299, 1204,
      303, 1677, 1649, 2320,  299,  345,  345,  345,  345, 2322,
     1677, 1677,  319, 1685,  319, 2323,  317,  352,  352,  352,
      352, 2325, 1685, 1685,  299, 2326,  345,  299,  299, 2327,
      299,  299,  299, 1907,  352, 1907,  299,  299,  299,  299,

      299,  319,  299, 2328, 2329,  299,  299,  299,  299,  320,
      320,  320,  320,  321,  321,  321,  321,  322,  322,  322,
      322, 2331,  323,  323,  323,  323,  324,  324,  324,  324,
      320, 1908,  320, 1908,  321, 1648,  321, 1648,  322, 1799,
      322, 1907, 1799,  323, 1799,  323, 1689,  324, 2334,  324,
      325,  325,  325,  325, 2335, 1689, 1689,  326,  326,  326,
      326,  320, 2337,  327,  327,  327,  327,  367,  367,  367,
      367,  325,  322,  325,  321,  323,  322,  321,  326, 1908,
      326,  367, 1648, 2338,  327,  323,  327,  328,  328,  328,
      328, 1515, 2339,  324, 1515,  323,  329,  329,  329,  329,

      330,  330,  330,  330, 2341, 1694, 1516,  326,  328, 1516,
      328, 2342, 2343,  325, 1694, 1694, 2344,  329, 1515,  329,
     2345,  330,  327,  330, 2352,  331,  331,  331,  331,  332,
      332,  332,  332, 1516, 2353,  333,  333,  333,  333, 1515,
     2142, 1020,  328, 2142, 1020, 1020,  331,  329,  331, 2359,
      332,  328,  332, 1020, 1516, 1765,  333,  328,  333, 2377,
      334,  334,  334,  334, 1765, 1765, 1517,  330, 1020, 1517,
      330,  335,  335,  335,  335,  346,  346,  346,  346, 2272,
      331,  334, 2272,  334,  347,  347,  347,  347,  332, 1020,
      333,  347,  335, 1517,  335, 2390,  346, 2395,  332,  354,

      354,  354,  354, 1734, 2287,  347, 1734, 2287, 2397,  333,
      349,  349,  349,  349, 1517, 1734,  354,  364,  364,  364,
      364, 2398,  335,  334,  390,  390,  390,  390,  334, 2399,
      335,  349, 2401,  349,  364,  335,  391,  391,  391,  391,
     2404,  433,  433,  433,  433, 2405, 2407, 2408,  390,  434,
      434,  434,  434,  435,  435,  435,  435,  433, 2409, 2410,
      391,  347,  433, 2411, 2412,  434,  436,  436,  436,  436,
      434, 2413, 1735, 2406,  435, 1735, 2406,  390,  437,  437,
      437,  437, 2414, 1884, 1735,  437, 1884,  436, 1884,  391,
     2415,  390, 1887,  390, 2143,  390, 2416, 2143, 2419,  437,

      434, 1887, 1887,  391, 2143,  391, 2420,  391,  439,  439,
      439,  439, 2421,  451,  451,  451,  451,  501,  501,  501,
      501,  536,  536,  536,  536,  537,  537,  537,  537,  439,
      451,  549,  549,  549,  549,  575,  575,  575,  575,  580,
      580,  580,  580,  582,  582,  582,  582,  549,  594,  594,
      594,  594,  575, 2422, 2423,  437,  580, 2424, 2425, 2426,
      582,  606,  606,  606,  606,  608,  608,  608,  608, 2427,
      635,  635,  635,  635, 2428, 2429, 2430,  606,  636,  636,
      636,  636,  642,  642,  642,  642,  608,  635,  645,  645,
      645,  645, 2433, 1520, 1113,  636, 1520, 1113, 2437,  642,

      651,  651,  651,  651, 2438,  645, 2440,  651,  652,  652,
      652,  652, 1113, 1113, 1113,  652,  653,  653,  653,  653,
     1520, 2441, 2444,  653,  654,  654,  654,  654, 2451, 2453,
      657,  657,  657,  657, 2454, 2457,  654,  657,  657, 2462,
     2463, 1520,  657,  658,  658,  658,  658, 2465, 2466, 1418,
      658,  658, 1418, 2467, 2469,  658,  659,  659,  659,  659,
     2107, 1418, 2107,  659,  659, 1895, 1418, 2470,  659,  660,
      660,  660,  660, 2477, 1895, 1895,  660,  660, 2267, 2483,
     2267,  660,  661,  661,  661,  661,  663,  663,  663,  663,
      665,  665,  665,  665,  674,  674,  674,  674, 2107,  661,

     2484, 2485, 2508,  663,  674,  676,  676,  676,  676,  677,
      677,  677,  677, 1082, 2510,  674, 1082, 1082, 2267,  674,
      680,  680,  680,  680, 2513, 1082,  676,  680, 2482, 1916,
      677,  684,  684,  684,  684, 2514, 2482,  665, 1916, 1916,
     1082,  680,  685,  685,  685,  685, 2515, 2517, 2519,  685,
     2520, 2521,  684,  687,  687,  687,  687,  690,  690,  690,
      690, 1082, 2522,  687,  691,  691,  691,  691,  696,  696,
      696,  696, 2400, 2523, 2400,  687,  749,  749,  749,  749,
      750,  750,  750,  750, 2524,  696,  775,  775,  775,  775,
      778,  778,  778,  778, 2525, 1247,  775,  680, 1247, 1247,

      687, 2528, 2527, 2529,  778, 2527, 2400, 1247,  775,  779,
      779,  779,  779,  785,  785,  785,  785,  812,  812,  812,
      812, 2288, 1247,  779, 2288, 2530, 2531,  819,  819,  812,
      819, 2288,  819, 2532,  812,  819,  819,  834,  834,  834,
      834, 2533, 2534, 1247,  834,  819, 2539,  819,  835,  835,
      835,  835, 2542, 2544, 2548,  835,  842,  842,  842,  842,
     2551,  775,  844,  844,  844,  844, 1923,  842, 2552,  844,
      842,  845,  845,  845,  845, 1923, 1923, 2553,  845,  847,
      847,  847,  847, 2554,  834,  855,  855,  855,  855,  847,
      856,  856,  856,  856, 2559,  835,  857,  857,  857,  857,

      893, 2561, 2562,  857, 2564, 2572,  855,  860,  860,  860,
      860,  856,  861,  861,  861,  861, 2573,  857, 2574,  861,
     2575,  908,  908,  908,  908, 2587,  893,  893,  860,  893,
     1929,  893, 2589,  908,  893,  893, 2595,  894,  908, 1929,
     1929, 2596,  894,  894,  893,  894,  893,  894, 2597, 2599,
      894,  894,  915,  915,  915,  915,  921,  921,  921,  921,
      894, 1932,  894,  922,  922,  922,  922, 2600, 2601,  915,
     1932, 1932,  921,  857, 2602, 2588, 1936,  921, 2588,  922,
      923,  923,  923,  923,  922, 1936, 1936,  923,  926,  926,
      926,  926,  928,  928,  928,  928,  923,  929,  929,  929,

      929, 2603, 2526, 1021,  929, 2526, 1021, 1021,  928,  926,
     2607, 2608, 2526,  928,  928,  928,  930,  930,  930,  930,
     1021, 2606, 2609,  930, 2606, 2610,  931,  931,  931,  931,
     1021,  921,  930,  931,  932,  932,  932,  932,  933,  933,
      933,  933,  931, 2611, 2616,  933,  934,  934,  934,  934,
      932, 1021, 2622,  934, 2623, 2625, 2627,  923,  935,  935,
      935,  935,  936,  936,  936,  936, 2636,  934,  940,  940,
      940,  940, 2637, 2638,  935,  940, 2639, 2644,  936,  935,
      935,  935, 2645,  936,  936,  936, 2654,  941,  941,  941,
      941, 2657, 2660,  930,  941,  942,  942,  942,  942,  943,

      943,  943,  943,  931,  944,  944,  944,  944,  946,  946,
      946,  946,  948,  948,  948,  948, 2604,  942,  942, 2604,
      943, 2269,  948,  934, 2269,  944, 2604, 2023, 2269,  946,
     2661, 2023, 2662,  948,  949,  949,  949,  949, 2023, 2023,
     2023,  949,  950,  950,  950,  950,  953,  953,  953,  953,
     2663, 2666, 2667,  953,  955,  955,  955,  955,  957,  957,
      957,  957, 2658, 2659,  955, 2658, 2659,  953,  957,  958,
      958,  958,  958, 2024,  943,  955,  958, 2024, 2668,  957,
      959,  959,  959,  959, 2024, 2024, 2024,  959,  960,  960,
      960,  960,  963,  963,  963,  963, 2669, 2673,  960,  965,

      965,  965,  965, 2677, 2681, 2682,  965,  966,  966,  966,
      966, 2683, 2686,  963,  966,  967,  967,  967,  967, 2687,
     2688, 2699,  967,  953,  968,  968,  968,  968, 2702, 2703,
      969,  969,  969,  969,  971,  971,  971,  971, 2704, 2705,
      968,  971, 2706, 2707, 2711,  968,  969,  972,  972,  972,
      972,  969, 1521, 1139,  972, 1521, 1139, 2714,  965,  973,
      973,  973,  973, 2716, 1521, 2718,  966,  975,  975,  975,
      975, 1139, 1139, 1139,  965, 1019, 1019, 1019, 1019, 1521,
      973, 2731,  966,  975,  983,  983,  983,  983,  975, 2732,
      967, 2736,  969,  971,  985,  985,  985,  985, 2739, 2751,

     1521,  983,  988,  988,  988,  988, 2752, 1659, 2951,  971,
     1659,  985,  987,  987,  987,  987, 2960, 2974,  987, 1010,
     1010, 1010, 1010,  988, 1012, 1012, 1012, 1012, 1013, 1013,
     1013, 1013, 2976,  987, 1659, 1013, 2981, 2992, 2995,  987,
     1010, 1015, 1015, 1015, 1015, 1012, 2997, 1012, 1015, 1016,
     1016, 1016, 1016, 1015, 3000, 1659, 1016, 1949, 3002,  987,
     1949, 1016,  987,  987, 1949,  987,  987,  987, 3005, 1949,
     3008,  987,  987,  987,  987,  987, 3011,  987, 3013, 3015,
      987,  987,  987,  987, 1017, 1017, 1017, 1017, 1018, 1018,
     1018, 1018, 3017, 3030, 1017, 2605, 1017, 3032, 2605, 1018,

     1018, 1022, 1022, 1022, 1022, 3039, 2605, 1662, 1022, 1018,
     1662, 1018, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028,
     3048, 3052, 1022, 1030, 1030, 1030, 1030, 1032, 1032, 1032,
     1032, 2961, 3064, 1027, 1662, 1027, 3071, 1028, 2961, 1028,
     1069, 1069, 1069, 1069, 1030, 3083, 1030, 1033, 1033, 1033,
     1033, 1034, 1034, 1034, 1034, 1662, 1035, 1035, 1035, 1035,
     3090, 1069, 1030, 1030, 1036, 1036, 1036, 1036, 1033, 3103,
     1033, 3140, 1034, 2402, 1034, 3170, 2402, 1035, 1022, 1035,
     2402, 3172, 1032, 3198, 3224, 1036, 3249, 1036, 1037, 1037,
     1037, 1037, 1038, 1038, 1038, 1038, 3284, 1039, 1039, 1039,

     1039, 1040, 1040, 1040, 1040, 1814, 3289, 1035, 1814, 1037,
     3079, 1037, 1033, 1038, 2975, 1038, 2977, 1036, 1039, 1034,
     1039, 2975, 1040, 2977, 1040, 3297, 3079, 1036, 1041, 1041,
     1041, 1041, 1814, 1042, 1042, 1042, 1042, 3305, 1043, 1043,
     1043, 1043, 3116, 2993, 1037, 1062, 1062, 1062, 1062, 1041,
     2993, 1041, 1062, 1814, 1042, 1039, 1042, 3320, 3116, 1043,
     1038, 1043, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045,
     2165, 1040, 2163, 1046, 1046, 1046, 1046, 1047, 1047, 1047,
     1047, 1041, 2162, 1044, 2158, 1044, 2996, 1045, 2996, 1045,
     2157, 1043, 1042, 1041, 1046, 2996, 1046, 1041, 1047, 1043,

     1047, 1048, 1048, 1048, 1048, 2156, 3003, 1043, 3006, 1049,
     1049, 1049, 1049, 3003, 2700, 3006, 1044, 2700, 1045, 2155,
     2154, 2700, 1048, 2153, 1048, 1050, 1050, 1050, 1050, 3178,
     1049, 1047, 1049, 1051, 1051, 1051, 1051, 1052, 1052, 1052,
     1052, 2152, 1046, 3228, 2664, 3178, 1050, 2664, 1050, 2151,
     1063, 1063, 1063, 1063, 1051, 2664, 1051, 1063, 1052, 3228,
     1052, 1086, 1086, 1086, 1086, 1053, 1053, 1053, 1053, 2150,
     1048, 1049, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1073, 1073, 1073, 1073, 1050, 1051, 1053, 1073, 1053, 1050,
     2149, 2701, 2148, 1054, 2701, 1054, 2147, 1055, 2701, 1055,

     3238, 2144, 2141, 1052, 1056, 1056, 1056, 1056, 1057, 1057,
     1057, 1057, 1058, 1058, 1058, 1058, 3238, 1078, 1078, 1078,
     1078, 3014, 1053, 1054, 1078, 1056, 3001, 1056, 3014, 1057,
     3001, 1057, 2140, 1058, 2139, 1058, 2138, 3001, 1055, 1054,
     1059, 1059, 1059, 1059, 3001, 1060, 1060, 1060, 1060, 1061,
     1061, 1061, 1061, 1064, 1064, 1064, 1064, 1072, 1072, 1072,
     1072, 1059, 2137, 1059, 2136, 2135, 1060, 1057, 1060, 1056,
     1061, 1058, 1061, 2134, 2133, 2132, 1064, 2131, 1072, 3016,
     1072, 1074, 1074, 1074, 1074, 2130, 3016, 2129, 1074, 2128,
     1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 2126, 2125,

     3018, 1059, 1074, 1080, 1080, 1080, 1080, 3018, 2124, 3031,
     1061, 1075, 1060, 1075, 2123, 1076, 3031, 1076, 1079, 1079,
     1079, 1079, 2122, 2121, 1083, 1079, 1080, 1083, 1083, 1085,
     1085, 1085, 1085, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1088, 1083, 2120, 1085, 1089, 1089, 1089, 1089, 2119, 3033,
     3033, 1083, 1097, 1097, 1097, 1097, 3033, 2118, 1074, 2116,
     3041, 1088, 1089, 1098, 1098, 1098, 1098, 3041, 2115, 2113,
     1097, 2112, 1083, 1105, 1105, 1105, 1105, 1106, 1106, 1106,
     1106, 3075, 2727, 1505, 1105, 2727, 1505, 1106, 3075, 2727,
     1088, 1109, 1109, 1109, 1109, 2110, 2108, 1109, 3094, 2105,

     1106, 1505, 1505, 1505, 1088, 3094, 1088, 2104, 1088, 1110,
     1110, 1110, 1110, 1116, 1116, 1116, 1116, 1119, 1119, 1119,
     1119, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122, 1123,
     1123, 1123, 1123, 2103, 2099, 2098, 1123, 1121, 3095, 2095,
     1390, 1122, 1121, 1390, 2094, 3095, 1122, 1124, 1124, 1124,
     1124, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127, 1130,
     1130, 1130, 1130, 1124, 1390, 2093, 2729, 1126, 1124, 2729,
     3106, 3113, 1126, 2729, 2085, 2084, 1127, 3106, 3113, 2083,
     1130, 1131, 1131, 1131, 1131, 3115, 1119, 3115, 1131, 1132,
     1132, 1132, 1132, 1390, 3115, 2082, 1132, 1133, 1133, 1133,

     1133, 1134, 1134, 1134, 1134, 3121, 2049, 2048, 1134, 2036,
     1132, 1390, 3121, 1126, 1135, 1135, 1135, 1135, 1133, 2034,
     2033, 1135, 1145, 1145, 1145, 1145, 1173, 1173, 1173, 1173,
     1181, 1181, 1181, 1181, 1191, 1191, 1191, 1191, 2032, 1145,
     1192, 1192, 1192, 1192, 3123, 1193, 1193, 1193, 1193, 2031,
     1191, 3123, 1193, 2028, 2021, 2020, 1192, 1193, 1194, 1194,
     1194, 1194, 1200, 1200, 1200, 1200, 1132, 1212, 1212, 1212,
     1212, 2017, 2015, 2014, 1194, 2013, 1200, 1217, 1217, 1217,
     1217, 1218, 1218, 1218, 1218, 1220, 1220, 1220, 1220, 1221,
     1221, 1221, 1221, 2012, 2010, 2009, 1248, 1218, 1217, 1248,

     1248, 1252, 1252, 1252, 1252, 3129, 2008, 2007, 1252, 2006,
     1221, 3130, 3129, 1248, 1253, 1253, 1253, 1253, 3130, 2005,
     2004, 1253, 2003, 1248, 1254, 1254, 1254, 1254, 1255, 1255,
     1255, 1255, 1276, 1276, 1276, 1276, 1254, 2002, 2001, 1276,
     1255, 2000, 1212, 3131, 1248, 1257, 1257, 1257, 1257, 3143,
     3131, 1260, 1260, 1260, 1260, 3148, 3143, 1257, 1260, 1260,
     1999, 1998, 3148, 1260, 1261, 1261, 1261, 1261, 3149, 3149,
     3120, 1261, 1261, 1997, 3120, 3149, 1261, 1262, 1262, 1262,
     1262, 3120, 1996, 1818, 1262, 1262, 1818, 1995, 3120, 1262,
     1263, 1263, 1263, 1263, 1264, 1264, 1264, 1264, 1265, 1265,

     1265, 1265, 1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269,
     1818, 1994, 1268, 1269, 1272, 1272, 1272, 1272, 1269, 1275,
     1275, 1275, 1275, 1268, 1993, 1277, 1277, 1277, 1277, 3156,
     1820, 1818, 1277, 1820, 1991, 1272, 3156, 1263, 1990, 1989,
     1275, 1264, 1988, 1987, 1986, 1265, 1277, 1278, 1278, 1278,
     1278, 1279, 1279, 1279, 1279, 1981, 3175, 1820, 1279, 1280,
     1280, 1280, 1280, 3175, 1980, 1979, 1280, 1978, 1278, 1282,
     1282, 1282, 1282, 1289, 1289, 1289, 1289, 1977, 1820, 1282,
     1292, 1292, 1292, 1292, 1316, 1316, 1316, 1316, 1976, 1963,
     1962, 1282, 1961, 1324, 1324, 1324, 1324, 1292, 1327, 1327,

     1327, 1327, 1277, 1324, 1328, 1328, 1328, 1328, 1329, 1329,
     1329, 1329, 1327, 1960, 1959, 1324, 1282, 1341, 1341, 1341,
     1341, 1342, 1342, 1342, 1342, 1357, 1357, 1357, 1357, 1341,
     3171, 3171, 1357, 1358, 1358, 1358, 1358, 3171, 1957, 1954,
     1358, 1359, 1359, 1359, 1359, 1361, 1361, 1361, 1361, 1953,
     3012, 3012, 1359, 3012, 1952, 1359, 1361, 3012, 1951, 1361,
     1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1324, 1950,
     1945, 1362, 1357, 1944, 1362, 1365, 1365, 1365, 1365, 1943,
     1358, 1367, 1367, 1367, 1367, 1942, 1365, 3186, 3212, 1365,
     1368, 1368, 1368, 1368, 3186, 3212, 3221, 1368, 1369, 1369,

     1369, 1369, 1941, 3221, 1939, 1369, 1370, 1370, 1370, 1370,
     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1938, 1937,
     1371, 1934, 1933, 1930, 1372, 1374, 1374, 1374, 1374, 1380,
     1380, 1380, 1380, 1927, 1924, 1374, 1383, 1383, 1383, 1383,
     1384, 1384, 1384, 1384, 1921, 1920, 3199, 1384, 3199, 3236,
     1380, 1385, 1385, 1385, 1385, 3199, 3236, 1383, 1385, 1386,
     1386, 1386, 1386, 1387, 1387, 1387, 1387, 1914, 1913, 3225,
     1387, 3225, 1385, 1912, 1388, 1388, 1388, 1388, 3225, 1911,
     1386, 1388, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
     1437, 1437, 1437, 1437, 1432, 1438, 1438, 1438, 1438, 1909,

     3245, 3245, 1438, 1439, 1439, 1439, 1439, 3245, 1902, 1901,
     1439, 1437, 1437, 1437, 1440, 1440, 1440, 1440, 1441, 1441,
     1441, 1441, 1442, 1442, 1442, 1442, 3247, 1899, 1385, 1447,
     1447, 1447, 1447, 3247, 1441, 1898, 1440, 1440, 1442, 1443,
     1443, 1443, 1443, 1896, 1893, 1888, 1443, 1444, 1444, 1444,
     1444, 1447, 1447, 3254, 1444, 1446, 1446, 1446, 1446, 1885,
     3254, 1882, 1446, 1448, 1448, 1448, 1448, 1449, 1449, 1449,
     1449, 1455, 1455, 1455, 1455, 1881, 1446, 1449, 1455, 1457,
     1457, 1457, 1457, 3273, 3300, 1448, 1448, 1879, 1449, 1457,
     3273, 3300, 1455, 1458, 1458, 1458, 1458, 1459, 1459, 1459,

     1459, 1878, 1877, 1458, 1459, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 3318, 1876, 1874, 1461, 1873, 1459, 1872,
     3318, 1460, 1462, 1462, 1462, 1462, 1460, 1599, 1869, 1462,
     1599, 1829, 1446, 1463, 1463, 1463, 1463, 1466, 1466, 1466,
     1466, 1828, 3324, 1827, 1466, 1599, 1599, 1599, 1455, 3324,
     1480, 1480, 1480, 1480, 1463, 1826, 1507, 1507, 1507, 1507,
     3325, 1825, 1481, 1481, 1481, 1481, 1507, 3325, 1507, 1481,
     1460, 1480, 1824, 1817, 1459, 1479, 1479, 1479, 1479, 1811,
     3261, 1479, 3261, 1481, 1808, 1508, 1508, 1508, 1508, 3261,
     1800, 1798, 1508, 1797, 1796, 1795, 1479, 1508, 1509, 1509,

     1509, 1509, 1479, 1510, 1510, 1510, 1510, 1794, 3267, 1509,
     1509, 1793, 3267, 1510, 1792, 1519, 1791, 3267, 1519, 1509,
     3127, 3127, 1479, 3127, 3267, 1479, 1479, 3127, 1479, 1479,
     1479, 1790, 1519, 1788, 1479, 1479, 1479, 1479, 1479, 1481,
     1479, 1787, 1519, 1479, 1479, 1479, 1479, 1511, 1511, 1511,
     1511, 1786, 1785, 1784, 1511, 3282, 1783, 3282, 1511, 1512,
     1512, 1512, 1512, 1519, 3282, 1523, 1523, 1523, 1523, 1782,
     1512, 1512, 1523, 1530, 1530, 1530, 1530, 1781, 3230, 3230,
     1512, 3230, 1512, 1780, 1779, 3230, 1523, 1531, 1531, 1531,
     1531, 1778, 1777, 1776, 1530, 1775, 1530, 1532, 1532, 1532,

     1532, 1774, 1530, 1534, 1534, 1534, 1534, 1773, 1531, 1772,
     1531, 1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1771,
     1537, 1537, 1537, 1537, 1534, 1770, 1534, 1767, 1766, 1531,
     3285, 3285, 1535, 3285, 1535, 1763, 1536, 3285, 1536, 1762,
     1761, 1537, 1523, 1537, 1538, 1538, 1538, 1538, 1539, 1539,
     1539, 1539, 1532, 1540, 1540, 1540, 1540, 1590, 1590, 1590,
     1590, 1541, 1541, 1541, 1541, 1538, 1760, 1538, 1759, 1539,
     1757, 1539, 1752, 1534, 1540, 1746, 1540, 1737, 1733, 1732,
     1535, 1537, 1541, 1536, 1541, 1542, 1542, 1542, 1542, 1731,
     1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1545, 1545,

     1545, 1545, 1573, 1573, 1573, 1573, 1542, 1539, 1542, 1573,
     1730, 1543, 1538, 1543, 1729, 1544, 1728, 1544, 1540, 1545,
     1726, 1545, 1725, 1573, 1721, 1541, 1720, 1546, 1546, 1546,
     1546, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1719,
     1549, 1549, 1549, 1549, 1715, 1543, 1714, 1542, 1546, 1713,
     1546, 1707, 1547, 1545, 1547, 1544, 1548, 1705, 1548, 1704,
     1703, 1549, 1702, 1549, 1550, 1550, 1550, 1550, 1551, 1551,
     1551, 1551, 1701, 1700, 1698, 1552, 1552, 1552, 1552, 1573,
     1697, 1696, 1546, 3314, 3314, 1550, 3314, 1550, 1695, 1551,
     3314, 1551, 1547, 1693, 1548, 1549, 1552, 1691, 1552, 1553,

     1553, 1553, 1553, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1556, 1556, 1556, 1556, 1690, 1688, 1550, 1686, 1684,
     1553, 1682, 1553, 1681, 1554, 1680, 1554, 1676, 1555, 1674,
     1555, 1666, 1556, 1552, 1556, 1551, 1557, 1557, 1557, 1557,
     1665, 1664, 1558, 1558, 1558, 1558, 1661, 1559, 1559, 1559,
     1559, 3304, 1657, 1655, 1554, 3304, 1654, 1557, 3317, 1557,
     3304, 3317, 1555, 1558, 3317, 1558, 1653, 3304, 1559, 1553,
     1559, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1652,
     3317, 1651, 1556, 1562, 1562, 1562, 1562, 1563, 1563, 1563,
     1563, 1650, 1560, 1647, 1560, 1646, 1561, 1645, 1561, 1644,

     1641, 1557, 1640, 1558, 1562, 1557, 1562, 1639, 1563, 1630,
     1563, 1628, 1564, 1564, 1564, 1564, 1627, 1559, 1565, 1565,
     1565, 1565, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567,
     1626, 1625, 1624, 1564, 1560, 1564, 1623, 1622, 1618, 1565,
     1616, 1565, 1609, 1566, 1561, 1566, 1608, 1567, 1602, 1567,
     1600, 1598, 1563, 1562, 1568, 1568, 1568, 1568, 1569, 1569,
     1569, 1569, 1595, 1570, 1570, 1570, 1570, 1564, 1571, 1571,
     1571, 1571, 1593, 1592, 1591, 1568, 1589, 1568, 1584, 1569,
     1576, 1569, 1565, 1576, 1583, 1566, 1570, 1574, 1574, 1574,
     1574, 1571, 1575, 1575, 1575, 1575, 1567, 1577, 1578, 1579,

     1577, 1578, 1579, 1576, 1582, 1581, 1580, 1576, 1572, 1569,
     1574, 1579, 1533, 1528, 1526, 1575, 1594, 1594, 1594, 1594,
     1577, 1578, 1579, 1568, 1577, 1578, 1579, 1525, 1576, 1596,
     1596, 1596, 1596, 1604, 1604, 1604, 1604, 1524, 1514, 1596,
     1606, 1606, 1606, 1606, 1513, 1577, 1578, 1579, 1610, 1610,
     1610, 1610, 1596, 1506, 1504, 1610, 1611, 1611, 1611, 1611,
     1503, 1502, 1501, 1611, 1612, 1612, 1612, 1612, 1613, 1613,
     1613, 1613, 1614, 1614, 1614, 1614, 1500, 1498, 1497, 1614,
     1612, 1495, 1494, 1493, 1613, 1612, 1492, 1491, 1490, 1613,
     1487, 1486, 1484, 1614, 1631, 1631, 1631, 1631, 1483, 1482,

     1473, 1631, 1632, 1632, 1632, 1632, 1631, 1471, 1470, 1632,
     1634, 1634, 1634, 1634, 1632, 1637, 1637, 1637, 1637, 1638,
     1638, 1638, 1638, 1613, 1660, 1663, 1634, 1660, 1663, 1637,
     1667, 1667, 1667, 1667, 1469, 1468, 1467, 1667, 1668, 1668,
     1668, 1668, 1667, 1465, 1456, 1668, 1454, 1660, 1663, 1614,
     1668, 1660, 1663, 1669, 1669, 1669, 1669, 1670, 1670, 1670,
     1670, 1672, 1672, 1672, 1672, 1669, 1436, 1429, 1672, 1420,
     1419, 1417, 1660, 1663, 1708, 1708, 1708, 1708, 1670, 1416,
     1415, 1414, 1672, 1413, 1411, 1708, 1410, 1409, 1708, 1709,
     1709, 1709, 1709, 1710, 1710, 1710, 1710, 1711, 1711, 1711,

     1711, 1712, 1712, 1712, 1712, 1716, 1716, 1716, 1716, 1402,
     1401, 1399, 1716, 1740, 1740, 1740, 1740, 1398, 1741, 1741,
     1741, 1741, 1742, 1742, 1742, 1742, 1716, 1744, 1744, 1744,
     1744, 1397, 1396, 1393, 1740, 1740, 1740, 1744, 1672, 1741,
     1741, 1741, 1392, 1381, 1742, 1742, 1379, 1378, 1744, 1753,
     1753, 1753, 1753, 1754, 1754, 1754, 1754, 1366, 1360, 1356,
     1754, 1758, 1758, 1758, 1758, 1354, 1353, 1352, 1758, 1351,
     1753, 1804, 1804, 1804, 1804, 1875, 1875, 1875, 1875, 1350,
     1349, 1804, 1716, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,

     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1750, 1750, 1750, 1750, 1347, 1346, 1339, 1750,
     1751, 1751, 1751, 1751, 1338, 1321, 1319, 1751, 1312, 1755,
     1755, 1755, 1755, 1750, 1756, 1756, 1756, 1756, 1307, 1301,
     1300, 1751, 1299, 1290, 1286, 1755, 1769, 1769, 1769, 1769,

     1755, 1801, 1801, 1801, 1801, 1756, 1273, 1270, 1801, 1802,
     1802, 1802, 1802, 1801, 1266, 1244, 1802, 1769, 1239, 1238,
     1236, 1802, 1803, 1803, 1803, 1803, 1806, 1806, 1806, 1806,
     1231, 1230, 1219, 1806, 1197, 1196, 1195, 1806, 3322, 1750,
     1755, 3322, 1190, 1803, 3322, 1803, 1189, 1751, 1768, 1768,
     1768, 1768, 1188, 1187, 1768, 1807, 1807, 1807, 1807, 1186,
     3322, 1185, 1807, 1179, 1172, 1171, 1807, 1169, 1165, 1768,
     1810, 1810, 1810, 1810, 1161, 1768, 1159, 1810, 1880, 1880,
     1880, 1880, 1810, 1812, 1812, 1812, 1812, 1883, 1883, 1883,
     1883, 1158, 1151, 1140, 1812, 1768, 1128, 1883, 1768, 1768,

     1125, 1768, 1768, 1768, 1812, 1120, 1114, 1768, 1768, 1768,
     1768, 1768, 1104, 1768, 1103, 1102, 1768, 1768, 1768, 1768,
     1830, 1830, 1830, 1830, 1831, 1831, 1831, 1831, 1832, 1832,
     1832, 1832, 1833, 1833, 1833, 1833, 1834, 1834, 1834, 1834,
     1101, 1830, 1100, 1830, 1093, 1831, 1091, 1831, 1090, 1832,
     1070, 1832, 1068, 1833, 1031, 1833, 1830, 1834, 1029, 1834,
     1024, 1009, 1006, 1831, 1835, 1835, 1835, 1835, 1836, 1836,
     1836, 1836, 1837, 1837, 1837, 1837, 1890, 1890, 1890, 1890,
     1832, 1904, 1904, 1904, 1904, 1835, 1005, 1835, 1002, 1836,
     1000, 1836, 1890, 1837,  999, 1837,  998, 1890,  996, 1833,

     1838, 1838, 1838, 1838, 1834, 1840, 1840, 1840, 1840, 1903,
     1903, 1903, 1903,  994,  993, 1835,  992, 1848, 1848, 1848,
     1848, 1838,  990, 1838,  981, 1903, 1840,  980, 1840, 1841,
     1841, 1841, 1841,  979,  976, 1837,  974, 1836, 1848,  964,
     1848, 1917, 1917, 1917, 1917, 1992, 1992, 1992, 1992,  954,
     1841,  945, 1841, 1917, 2086, 2086, 2086, 2086,  924, 1838,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,  920,
     1840, 1848, 1839,  905, 1839, 1839, 1839, 1839, 1839,  903,
     1842, 1842, 1842, 1842, 1841, 1843, 1843, 1843, 1843,  883,

     1844, 1844, 1844, 1844, 1845, 1845, 1845, 1845, 1839, 1839,
     1839, 1842,  882, 1842,  881,  879, 1843,  866, 1843,  865,
     1992, 1844,  864, 1844,  859, 1845,  854, 1845,  843, 1846,
     1846, 1846, 1846,  832,  808,  765, 1839, 1839, 1839, 2087,
     2087, 2087, 2087, 1847, 1847, 1847, 1847,  759,  758, 1842,
     1846,  757, 1846,  735, 1849, 1849, 1849, 1849, 1850, 1850,
     1850, 1850, 1843, 1844, 1847,  727, 1847, 1851, 1851, 1851,
     1851,  718,  712,  707, 1845, 1849,  694, 1849,  688, 1850,
      683, 1850,  673, 1852, 1852, 1852, 1852,  648, 1851,  647,
     1851,  646, 1846, 1853, 1853, 1853, 1853, 1854, 1854, 1854,

     1854,  643,  639,  629, 1852, 1849, 1852, 2087,  628,  627,
     1847,  626,  587,  562, 1853,  557, 1853,  556, 1854,  547,
     1854,  541, 1850, 1855, 1855, 1855, 1855,  534, 1851, 1856,
     1856, 1856, 1856,  493,  492, 1852, 1857, 1857, 1857, 1857,
     1972, 1972, 1972, 1972, 1855,  491, 1855, 1972, 1854,  489,
     1856,  487, 1856, 1858, 1858, 1858, 1858, 1857,  475, 1857,
      464, 1853, 1859, 1859, 1859, 1859, 1860, 1860, 1860, 1860,
     1861, 1861, 1861, 1861, 1858,  448, 1858,  446, 1855, 1862,
     1862, 1862, 1862, 1859, 1856, 1859,  438, 1860,  425, 1860,
      423, 1861,  409, 1861,  400, 1857, 1863, 1863, 1863, 1863,

     1862,  398, 1862, 1864, 1864, 1864, 1864, 1865, 1865, 1865,
     1865,  397, 1858, 1859,  348,  344,  318, 1863,  314, 1863,
      310,  287,  285, 1861, 1864, 1860, 1864,  273, 1865,  255,
     1865, 1866, 1866, 1866, 1866, 1867, 1867, 1867, 1867,  253,
     1862,  239, 1868, 1868, 1868, 1868, 1891, 1891, 1891, 1891,
     1863,  217, 1866,    0, 1866,    0, 1867,    0, 1867, 1863,
        0,    0, 1891, 1868, 1865, 1868, 1864, 1891, 1892, 1892,
     1892, 1892, 1918, 1918, 1918, 1918, 1919, 1919, 1919, 1919,
     1946, 1946,    0,    0, 1892, 1946, 1866,    0, 1946, 1892,
        0,    0,    0, 1918, 1965, 1965,    0, 1919, 1946, 1965,

     1946,    0, 1965,    0,    0, 1867, 1968, 1968, 1968, 1968,
        0, 1868, 1965,    0, 1965, 1973, 1973, 1973, 1973,    0,
        0,    0, 1973, 2090, 2090, 2090, 2090, 1968, 2164, 2164,
     2164, 2164,    0, 2090,    0,    0, 1892, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,

     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1970, 1970, 1970, 1970,
        0,    0,    0, 1970, 1971, 1971, 1971, 1971, 1975, 1975,
     1975, 1975, 1985, 1985, 1985, 1985,    0, 1970, 2018, 2018,
     2018, 2018,    0,    0, 1975, 1971,    0,    0,    0, 1975,
        0,    0,    0, 1985, 2019, 2019, 2019, 2019,    0, 2018,
        0, 2026, 2026, 2026, 2026, 2027, 2027, 2027, 2027,    0,
        0,    0, 2026,    0,    0, 2019, 2027, 2019, 2037, 2037,
     2037, 2037, 2026, 1975, 2026,    0, 2027,    0, 2038, 2038,
     2038, 2038,    0, 1970, 1984, 1984, 1984, 1984,    0, 2037,

     1984, 2037,    0, 2041, 2041, 2041, 2041,    0,    0, 2038,
     2037, 2038,    0,    0,    0, 1984, 2039, 2039, 2039, 2039,
        0, 1984,    0,    0, 2041,    0, 2041,    0, 2038, 2040,
     2040, 2040, 2040, 2089, 2089, 2089, 2089, 2039,    0, 2039,
        0, 1984,    0,    0, 1984, 1984,    0, 1984, 1984, 1984,
     2040,    0, 2040, 1984, 1984, 1984, 1984, 1984,    0, 1984,
        0,    0, 1984, 1984, 1984, 1984, 2042, 2042, 2042, 2042,
     2043, 2043, 2043, 2043,    0,    0,    0, 2039, 2041,    0,
     2040, 2044, 2044, 2044, 2044,    0,    0, 2042,    0, 2042,
        0, 2043, 2089, 2043, 2045, 2045, 2045, 2045, 2047, 2047,

     2047, 2047, 2044,    0, 2044, 2050, 2050, 2050, 2050, 2052,
     2052, 2052, 2052,    0,    0, 2045,    0, 2045,    0, 2047,
        0, 2047, 2053, 2053, 2053, 2053, 2050,    0, 2050,    0,
     2052,    0, 2052,    0, 2042,    0, 2044, 2054, 2054, 2054,
     2054,    0,    0, 2053,    0, 2053,    0, 2055, 2055, 2055,
     2055, 2056, 2056, 2056, 2056,    0,    0, 2045, 2054,    0,
     2054, 2057, 2057, 2057, 2057,    0,    0,    0, 2055,    0,
     2055,    0, 2056,    0, 2056, 2053,    0, 3323, 2052,    0,
     3323,    0, 2057, 3323, 2057, 2058, 2058, 2058, 2058, 2059,
     2059, 2059, 2059,    0, 2060, 2060, 2060, 2060,    0, 3323,

     2054, 2055,    0,    0,    0, 2056, 2058,    0, 2058,    0,
     2059,    0, 2059,    0,    0, 2060, 2057, 2060,    0, 2061,
     2061, 2061, 2061, 2062, 2062, 2062, 2062, 2063, 2063, 2063,
     2063,    0, 2064, 2064, 2064, 2064, 2065, 2065, 2065, 2065,
     2061, 2058, 2061,    0, 2062,    0, 2062,    0, 2063,    0,
     2063,    0,    0, 2064, 2059, 2064,    0, 2065,    0, 2065,
        0, 2060, 2066, 2066, 2066, 2066, 2067, 2067, 2067, 2067,
        0,    0,    0, 2061, 2088, 2088, 2088, 2088, 2062, 2068,
     2068, 2068, 2068, 2066, 2088, 2066,    0, 2067, 2063, 2067,
     2069, 2069, 2069, 2069,    0,    0,    0, 2064,    0,    0,

     2068,    0, 2068,    0,    0, 2065,    0, 2070, 2070, 2070,
     2070, 2069,    0, 2069, 2071, 2071, 2071, 2071,    0, 2067,
     2072, 2072, 2072, 2072, 2073, 2073, 2073, 2073, 2070, 2066,
     2070,    0, 2068,    0,    0, 2071,    0, 2071,    0,    0,
        0, 2072, 2088, 2072,    0, 2073,    0, 2073, 2074, 2074,
     2074, 2074,    0, 2075, 2075, 2075, 2075, 2069, 2076, 2076,
     2076, 2076, 2077, 2077, 2077, 2077,    0, 2071, 2070, 2074,
        0, 2074,    0,    0, 2075, 2073, 2075,    0,    0, 2076,
        0, 2076,    0, 2077,    0, 2077,    0,    0,    0, 2072,
     2078, 2078, 2078, 2078, 2079, 2079, 2079, 2079, 2080, 2080,

     2080, 2080,    0, 2074, 2075,    0, 2097, 2097, 2097, 2097,
        0, 2078,    0, 2078,    0, 2079,    0, 2079,    0, 2080,
        0, 2080, 2097, 2114, 2114, 2114, 2114, 2097,    0,    0,
     2114,    0,    0, 2076,    0, 2114,    0, 2159, 2159, 2159,
     2159,    0,    0,    0, 2159, 2079, 2161, 2161, 2161, 2161,
     2166, 2166, 2166, 2166,    0,    0,    0, 2080, 2159, 2078,
        0,    0, 2161, 2167, 2167, 2167, 2167, 2161,    0,    0,
        0, 2097, 2170, 2170, 2170, 2170, 2172, 2172, 2172, 2172,
     2174, 2174, 2174, 2174, 2167, 2195, 2195, 2195, 2195, 2200,
     2200, 2200, 2200,    0,    0,    0, 2200, 2202, 2202, 2202,

     2202, 2200, 2203, 2203, 2203, 2203,    0,    0, 2161, 2212,
     2212, 2212, 2212, 2203, 2159,    0,    0,    0, 2202, 2213,
     2213, 2213, 2213, 2203,    0, 2203, 2252, 2252, 2252, 2252,
     2212,    0, 2212, 2214, 2214, 2214, 2214,    0,    0, 2212,
     2213,    0, 2213, 2215, 2215, 2215, 2215, 2170,    0,    0,
        0, 2213,    0,    0, 2214,    0, 2214,    0,    0,    0,
     2195,    0,    0,    0, 2215,    0, 2215, 2216, 2216, 2216,
     2216,    0, 2218, 2218, 2218, 2218, 2219, 2219, 2219, 2219,
        0, 2220, 2220, 2220, 2220,    0,    0,    0, 2216,    0,
     2216, 2220, 2214, 2218,    0, 2218, 2215, 2219,    0, 2219,

        0,    0, 2220,    0, 2220, 2221, 2221, 2221, 2221, 2222,
     2222, 2222, 2222, 2223, 2223, 2223, 2223,    0, 2225, 2225,
     2225, 2225,    0, 2219,    0,    0, 2221,    0, 2221, 2219,
     2222, 2219, 2222,    0, 2223,    0, 2223,    0,    0, 2225,
     2218, 2225,    0,    0, 2219,    0, 2219,    0, 2224, 2224,
     2224, 2224,    0, 2224, 2226, 2226, 2226, 2226, 2227, 2227,
     2227, 2227, 2228, 2228, 2228, 2228,    0,    0, 2222, 2224,
        0, 2224, 2223,    0, 2221, 2226,    0, 2226,    0, 2227,
        0, 2227,    0, 2228,    0, 2228,    0, 2229, 2229, 2229,
     2229, 2230, 2230, 2230, 2230, 2231, 2231, 2231, 2231, 2232,

     2232, 2232, 2232, 2233, 2233, 2233, 2233,    0, 2229, 2226,
     2229,    0, 2230, 2228, 2230,    0, 2231,    0, 2231,    0,
     2232,    0, 2232,    0, 2233,    0, 2233, 2234, 2234, 2234,
     2234, 2235, 2235, 2235, 2235,    0, 2236, 2236, 2236, 2236,
        0, 2237, 2237, 2237, 2237,    0,    0,    0, 2234,    0,
     2234,    0, 2235,    0, 2235,    0,    0, 2236, 2233, 2236,
        0,    0, 2237, 2231, 2237, 2230, 2238, 2238, 2238, 2238,
     2239, 2239, 2239, 2239, 2240, 2240, 2240, 2240, 2234, 2241,
     2241, 2241, 2241,    0,    0,    0, 2235, 2238,    0, 2238,
        0, 2239,    0, 2239,    0, 2240,    0, 2240,    0,    0,

     2241,    0, 2241,    0,    0, 2236, 2242, 2242, 2242, 2242,
     2237,    0,    0,    0, 2243, 2243, 2243, 2243, 2244, 2244,
     2244, 2244,    0,    0,    0, 2239,    0, 2242,    0, 2242,
     2245, 2245, 2245, 2245, 2238, 2243,    0, 2243,    0, 2244,
        0, 2244, 2240, 2246, 2246, 2246, 2246, 2248, 2248, 2248,
     2248, 2245,    0, 2245, 2249, 2249, 2249, 2249,    0, 2250,
     2250, 2250, 2250,    0, 2246,    0, 2246,    0, 2248,    0,
     2248,    0,    0,    0, 2244, 2249,    0, 2249,    0,    0,
     2250, 2242, 2250, 2243, 2251, 2251, 2251, 2251, 2254, 2254,
     2254, 2254, 2245, 2256, 2256, 2256, 2256,    0, 2254, 2257,

     2257, 2257, 2257,    0,    0, 2251,    0, 2251,    0, 2257,
        0, 2258, 2258, 2258, 2258, 2260, 2260, 2260, 2260,    0,
     2250, 2258, 2261, 2261, 2261, 2261,    0,    0, 2249,    0,
     2263, 2263, 2263, 2263, 2303, 2303, 2303, 2303, 2304, 2304,
     2304, 2304,    0,    0,    0, 2251, 2263,    0,    0,    0,
     2303, 2263,    0,    0,    0, 2303, 2254, 2306, 2306, 2306,
     2306, 2307, 2307, 2307, 2307, 2308, 2308, 2308, 2308, 2309,
     2309, 2309, 2309, 2312, 2312, 2312, 2312, 2314, 2314, 2314,
     2314, 2263,    0, 2261, 2318, 2318, 2318, 2318,    0, 2303,
     2309, 2319, 2319, 2319, 2319, 2321, 2321, 2321, 2321, 2324,

     2324, 2324, 2324,    0, 2330, 2330, 2330, 2330, 2332, 2332,
     2332, 2332, 2333, 2333, 2333, 2333, 2321, 2336, 2336, 2336,
     2336,    0,    0,    0, 2314, 2330, 2346, 2346, 2346, 2346,
     2314,    0, 2314, 2347, 2347, 2347, 2347, 2348, 2348, 2348,
     2348, 2349, 2349, 2349, 2349, 2314,    0, 2314, 2350, 2350,
     2350, 2350,    0,    0, 2347,    0, 2347,    0, 2348,    0,
     2348,    0, 2349,    0, 2349, 2351, 2351, 2351, 2351, 2350,
        0, 2350, 2330, 2354, 2354, 2354, 2354, 2347,    0, 2348,
        0,    0,    0, 2354,    0,    0, 2351, 2333, 2351,    0,
     2355, 2355, 2355, 2355, 2354, 2355, 2354,    0,    0, 2355,

     2356, 2356, 2356, 2356, 2357, 2357, 2357, 2357,    0, 2349,
     2358, 2358, 2358, 2358,    0, 2358,    0, 2350,    0,    0,
        0, 2356,    0, 2356,    0, 2357,    0, 2357,    0,    0,
        0, 2358,    0, 2358, 2360, 2360, 2360, 2360, 2362, 2362,
     2362, 2362, 2363, 2363, 2363, 2363, 2364, 2364, 2364, 2364,
     2365, 2365, 2365, 2365,    0, 2360,    0, 2360,    0, 2362,
        0, 2362,    0, 2363, 2356, 2363,    0, 2364,    0, 2364,
        0, 2365,    0, 2357,    0, 2366, 2366, 2366, 2366,    0,
     2367, 2367, 2367, 2367,    0,    0,    0, 2360,    0, 2388,
     2388, 2388, 2388,    0,    0, 2363, 2366,    0, 2366, 2388,

        0, 2367, 2360, 2367, 2360, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361,    0,    0,    0, 2361,    0, 2361,
     2361, 2361, 2361, 2361,    0,    0, 2368, 2368, 2368, 2368,
     2369, 2369, 2369, 2369, 2370, 2370, 2370, 2370, 2371, 2371,
     2371, 2371,    0, 2361, 2361, 2361, 2361, 2368,    0, 2368,
        0, 2369,    0, 2369,    0, 2370,    0, 2370,    0, 2371,
        0, 2371, 2372, 2372, 2372, 2372,    0, 2373, 2373, 2373,
     2373, 2361, 2361, 2361, 2374, 2374, 2374, 2374, 2375, 2375,
     2375, 2375,    0, 2372,    0, 2372,    0, 2370, 2373,    0,

     2373, 2376, 2376, 2376, 2376, 2374,    0, 2374,    0, 2375,
        0,    0, 2378, 2378, 2378, 2378, 2371, 2379, 2379, 2379,
     2379,    0, 2376,    0, 2376, 2380, 2380, 2380, 2380,    0,
        0, 2372, 2373, 2378,    0, 2378,    0,    0, 2379,    0,
     2379,    0, 2382, 2382, 2382, 2382, 2380,    0, 2380,    0,
        0,    0, 2374, 2383, 2383, 2383, 2383, 2384, 2384, 2384,
     2384,    0, 2376, 2382,    0, 2382, 2385, 2385, 2385, 2385,
     2386, 2386, 2386, 2386, 2383,    0, 2383,    0, 2384,    0,
     2384, 2387, 2387, 2387, 2387,    0,    0, 2385,    0, 2385,
        0, 2386,    0, 2386,    0,    0,    0, 2382, 2389, 2389,

     2389, 2389, 2387,    0, 2387, 2391, 2391, 2391, 2391,    0,
        0,    0, 2384,    0,    0, 2391, 2393, 2393, 2393, 2393,
     2394, 2394, 2394, 2394, 2396, 2396, 2396, 2396,    0,    0,
        0, 2385, 2431, 2431, 2431, 2431, 2387,    0,    0,    0,
     2396, 2432, 2432, 2432, 2432, 2396,    0,    0, 2431, 2434,
     2434, 2434, 2434, 2431, 2435, 2435, 2435, 2435, 2436, 2436,
     2436, 2436, 2439, 2439, 2439, 2439, 2442, 2442, 2442, 2442,
     2443, 2443, 2443, 2443,    0, 2394,    0, 2396,    0, 2436,
     2445, 2445, 2445, 2445, 2446, 2446, 2446, 2446, 2447, 2447,
     2447, 2447,    0,    0,    0, 2431, 2448, 2448, 2448, 2448,

        0, 2445, 2449, 2449, 2449, 2449, 2450, 2450, 2450, 2450,
     2452, 2452, 2452, 2452,    0,    0,    0, 2448, 2455, 2455,
     2455, 2455, 2456, 2456, 2456, 2456, 2458, 2458, 2458, 2458,
        0, 2452, 2459, 2459, 2459, 2459,    0,    0,    0, 2455,
     2460, 2460, 2460, 2460,    0,    0,    0, 2458, 2461, 2461,
     2461, 2461, 2464, 2464, 2464, 2464, 2468, 2468, 2468, 2468,
     2471, 2471, 2471, 2471, 2472, 2472, 2472, 2472, 2473, 2473,
     2473, 2473, 2474, 2474, 2474, 2474,    0,    0, 2452, 2475,
     2475, 2475, 2475,    0,    0, 2472, 2455, 2472,    0, 2473,
        0, 2473,    0, 2474,    0, 2474, 2476, 2476, 2476, 2476,

     2475,    0, 2475,    0, 2478, 2478, 2478, 2478,    0, 2478,
        0,    0, 2473, 2478,    0,    0,    0, 2476,    0, 2476,
     2480, 2480, 2480, 2480, 2481, 2481, 2481, 2481,    0,    0,
     2474, 2486, 2486, 2486, 2486, 2487, 2487, 2487, 2487,    0,
        0, 2480,    0, 2480,    0, 2481,    0, 2481, 2488, 2488,
     2488, 2488, 2486,    0, 2486,    0, 2487,    0, 2487, 2489,
     2489, 2489, 2489, 2490, 2490, 2490, 2490,    0, 2491, 2491,
     2491, 2491,    0, 2492, 2492, 2492, 2492,    0,    0,    0,
     2489,    0, 2489, 2480, 2490,    0, 2490,    0,    0, 2491,
     2487, 2491,    0,    0, 2492, 2486, 2492, 2493, 2493, 2493,

     2493, 2494, 2494, 2494, 2494,    0, 2495, 2495, 2495, 2495,
        0, 2496, 2496, 2496, 2496,    0,    0,    0, 2493,    0,
     2493,    0, 2494, 2497, 2497, 2497, 2497, 2495, 2492, 2495,
        0,    0, 2496,    0, 2496, 2498, 2498, 2498, 2498, 2499,
     2499, 2499, 2499,    0, 2497,    0, 2497, 2500, 2500, 2500,
     2500, 2501, 2501, 2501, 2501, 2502, 2502, 2502, 2502,    0,
     2499,    0, 2499,    0,    0, 2493, 2496, 2495, 2500,    0,
     2500,    0, 2501,    0, 2501,    0, 2502, 2497, 2503, 2503,
     2503, 2503,    0, 2505, 2505, 2505, 2505, 2506, 2506, 2506,
     2506, 2509, 2509, 2509, 2509, 2507, 2507, 2507, 2507, 2503,

        0, 2503,    0, 2499, 2505,    0, 2505,    0, 2506,    0,
     2506, 2500, 2504, 2504, 2504, 2504, 2507,    0, 2507,    0,
     2511, 2511, 2511, 2511, 2518, 2518, 2518, 2518, 2535, 2535,
     2535, 2535,    0, 2504,    0, 2504, 2511, 2536, 2536, 2536,
     2536, 2511, 2506,    0, 2535, 2537, 2537, 2537, 2537, 2535,
     2538, 2538, 2538, 2538, 2540, 2540, 2540, 2540,    0, 2504,
     2541, 2541, 2541, 2541,    0, 2504,    0, 2504,    0,    0,
        0, 2538,    0,    0,    0, 2511, 2543, 2543, 2543, 2543,
     2504,    0, 2504, 2504, 2545, 2545, 2545, 2545, 2546, 2546,
     2546, 2546, 2547, 2547, 2547, 2547,    0, 2535, 2549, 2549,

     2549, 2549, 2550, 2550, 2550, 2550,    0,    0,    0, 2546,
     2555, 2555, 2555, 2555, 2556, 2556, 2556, 2556,    0, 2549,
     2557, 2557, 2557, 2557, 2558, 2558, 2558, 2558,    0,    0,
        0, 2555, 2560, 2560, 2560, 2560, 2563, 2563, 2563, 2563,
     2565, 2565, 2565, 2565,    0,    0,    0, 2566, 2566, 2566,
     2566, 2567, 2567, 2567, 2567, 2568, 2568, 2568, 2568, 2569,
     2569, 2569, 2569,    0,    0,    0, 2549, 2557, 2566,    0,
     2566,    0, 2567, 2557, 2567, 2557, 2568,    0, 2568,    0,
     2569,    0, 2569,    0, 2570, 2570, 2570, 2570, 2557,    0,
     2557, 2557,    0, 2566, 2571, 2571, 2571, 2571, 2576, 2576,

     2576, 2576,    0,    0,    0, 2570, 2567, 2570, 2577, 2577,
     2577, 2577, 2579, 2579, 2579, 2579,    0,    0,    0, 2576,
        0, 2576,    0,    0,    0, 2580, 2580, 2580, 2580, 2577,
        0, 2577, 2581, 2581, 2581, 2581, 2582, 2582, 2582, 2582,
        0, 2583, 2583, 2583, 2583,    0, 2580,    0, 2580, 2585,
     2585, 2585, 2585, 2581,    0, 2581,    0, 2582,    0, 2582,
        0, 2576, 2583,    0, 2583, 2591, 2591, 2591, 2591, 2571,
     2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578,
     2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2580,
        0,    0, 2578, 2578, 2578, 2578, 2578, 2578, 2578,    0,

     2581,    0,    0,    0, 2582, 2584, 2584, 2584, 2584,    0,
     2583, 2586, 2586, 2586, 2586,    0,    0,    0, 2578, 2578,
     2578, 2590, 2590, 2590, 2590,    0, 2584,    0, 2584,    0,
        0,    0, 2586,    0, 2586, 2592, 2592, 2592, 2592,    0,
        0,    0, 2590,    0, 2590,    0, 2578, 2578, 2578, 2593,
     2593, 2593, 2593, 2594, 2594, 2594, 2594, 2598, 2598, 2598,
     2598, 2612, 2612, 2612, 2612,    0,    0,    0, 2584, 2594,
     2613, 2613, 2613, 2613, 2594,    0,    0, 2612, 2614, 2614,
     2614, 2614, 2612, 2615, 2615, 2615, 2615, 2617, 2617, 2617,
     2617, 2618, 2618, 2618, 2618, 2619, 2619, 2619, 2619, 2620,

     2620, 2620, 2620,    0, 2615, 2621, 2621, 2621, 2621, 2624,
     2624, 2624, 2624, 2626, 2626, 2626, 2626, 2628, 2628, 2628,
     2628, 2629, 2629, 2629, 2629, 2630, 2630, 2630, 2630, 2612,
     2624, 2631, 2631, 2631, 2631, 2632, 2632, 2632, 2632, 2633,
     2633, 2633, 2633, 2634, 2634, 2634, 2634, 2640, 2640, 2640,
     2640,    0, 2631,    0, 2631,    0, 2632,    0, 2632,    0,
     2633,    0, 2633, 2641, 2641, 2641, 2641,    0, 2640,    0,
     2640, 2646, 2646, 2646, 2646,    0,    0, 2624, 2647, 2647,
     2647, 2647,    0,    0, 2641,    0, 2641,    0,    0, 2632,
        0,    0, 2646,    0, 2646, 2649, 2649, 2649, 2649, 2647,

     2640, 2647, 2655, 2655, 2655, 2655, 2671, 2671, 2671, 2671,
     2674, 2674, 2674, 2674,    0,    0, 2649,    0, 2634, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,    0,    0,
     2646, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2648, 2648,

     2648, 2648, 2650, 2650, 2650, 2650, 2651, 2651, 2651, 2651,
        0, 2652, 2652, 2652, 2652, 2656, 2656, 2656, 2656, 2648,
        0, 2648,    0, 2650,    0, 2650,    0, 2651,    0, 2651,
        0, 2656, 2652,    0, 2652,    0, 2656, 2670, 2670, 2670,
     2670, 2672, 2672, 2672, 2672, 2675, 2675, 2675, 2675, 2676,
     2676, 2676, 2676, 2670, 2678, 2678, 2678, 2678, 2670,    0,
        0,    0, 2672, 2650, 2652,    0, 2648, 2679, 2679, 2679,
     2679,    0,    0,    0, 2651, 2678, 2680, 2680, 2680, 2680,
     2684, 2684, 2684, 2684, 2685, 2685, 2685, 2685, 2679, 2689,
     2689, 2689, 2689, 2691, 2691, 2691, 2691, 2692, 2692, 2692,

     2692, 2693, 2693, 2693, 2693, 2694, 2694, 2694, 2694,    0,
     2689,    0, 2689, 2695, 2695, 2695, 2695, 2691, 2692,    0,
     2692,    0, 2693,    0, 2693,    0, 2694, 2696, 2696, 2696,
     2696, 2697, 2697, 2697, 2697, 2679,    0, 2698, 2698, 2698,
     2698,    0,    0,    0, 2689,    0,    0,    0, 2696,    0,
     2696,    0, 2697,    0, 2697,    0,    0,    0, 2698,    0,
     2698, 2708, 2708, 2708, 2708, 2692, 2709, 2709, 2709, 2709,
        0,    0, 2710, 2710, 2710, 2710, 2712, 2712, 2712, 2712,
        0,    0, 2708, 2713, 2713, 2713, 2713, 2715, 2715, 2715,
     2715, 2696, 2698, 2710,    0,    0,    0, 2712, 2717, 2717,

     2717, 2717, 2719, 2719, 2719, 2719,    0,    0, 2715, 2720,
     2720, 2720, 2720, 2722, 2722, 2722, 2722, 2723, 2723, 2723,
     2723, 2724, 2724, 2724, 2724,    0, 2719, 2725, 2725, 2725,
     2725,    0,    0, 2720, 2722,    0, 2722, 2726, 2726, 2726,
     2726,    0, 2724,    0, 2724,    0,    0,    0, 2725,    0,
     2725, 2733, 2733, 2733, 2733,    0,    0,    0, 2726, 2734,
     2734, 2734, 2734, 2735, 2735, 2735, 2735, 2737, 2737, 2737,
     2737, 2738, 2738, 2738, 2738, 2740, 2740, 2740, 2740,    0,
     2734,    0,    0,    0, 2735,    0,    0,    0, 2737,    0,
     2724, 2741, 2741, 2741, 2741, 2742, 2742, 2742, 2742, 2743,

     2743, 2743, 2743, 2744, 2744, 2744, 2744, 2747, 2747, 2747,
     2747,    0, 2741,    0, 2741,    0, 2742,    0,    0,    0,
     2743,    0, 2743, 2748, 2748, 2748, 2748, 2749, 2749, 2749,
     2749, 2750, 2750, 2750, 2750, 2753, 2753, 2753, 2753, 2754,
     2754, 2754, 2754,    0, 2748,    0,    0,    0, 2749, 2755,
     2755, 2755, 2755, 2756, 2756, 2756, 2756,    0,    0,    0,
     2754,    0, 2754, 2757, 2757, 2757, 2757, 2743, 2758, 2758,
     2758, 2758,    0,    0, 2756, 2759, 2759, 2759, 2759, 2760,
     2760, 2760, 2760,    0, 2757, 2761, 2761, 2761, 2761, 2762,
     2762, 2762, 2762,    0,    0,    0, 2759,    0, 2759,    0,

     2760, 2763, 2763, 2763, 2763, 2764, 2764, 2764, 2764,    0,
     2762, 2765, 2765, 2765, 2765, 2766, 2766, 2766, 2766,    0,
        0,    0, 2763, 2767, 2767, 2767, 2767, 2768, 2768, 2768,
     2768, 2769, 2769, 2769, 2769, 2770, 2770, 2770, 2770, 2771,
     2771, 2771, 2771, 2772, 2772, 2772, 2772,    0, 2768, 2773,
     2773, 2773, 2773,    0,    0,    0, 2770, 2774, 2774, 2774,
     2774,    0,    0,    0, 2772, 2775, 2775, 2775, 2775, 2776,
     2776, 2776, 2776, 2777, 2777, 2777, 2777,    0, 2774, 2778,
     2778, 2778, 2778, 2779, 2779, 2779, 2779,    0,    0,    0,
     2776, 2780, 2780, 2780, 2780, 2781, 2781, 2781, 2781,    0,

     2778, 2782, 2782, 2782, 2782, 2783, 2783, 2783, 2783,    0,
        0,    0, 2780, 2784, 2784, 2784, 2784, 2785, 2785, 2785,
     2785,    0, 2782, 2786, 2786, 2786, 2786, 2787, 2787, 2787,
     2787,    0,    0,    0, 2784, 2788, 2788, 2788, 2788, 2789,
     2789, 2789, 2789,    0, 2786, 2790, 2790, 2790, 2790, 2791,
     2791, 2791, 2791,    0,    0,    0, 2788, 2792, 2792, 2792,
     2792, 2793, 2793, 2793, 2793,    0, 2790, 2794, 2794, 2794,
     2794, 2795, 2795, 2795, 2795,    0,    0,    0, 2792, 2796,
     2796, 2796, 2796, 2797, 2797, 2797, 2797,    0, 2794, 2798,
     2798, 2798, 2798, 2799, 2799, 2799, 2799,    0,    0,    0,

     2796, 2800, 2800, 2800, 2800, 2801, 2801, 2801, 2801,    0,
     2798, 2802, 2802, 2802, 2802, 2803, 2803, 2803, 2803,    0,
        0,    0, 2800, 2804, 2804, 2804, 2804, 2805, 2805, 2805,
     2805,    0, 2802, 2806, 2806, 2806, 2806, 2807, 2807, 2807,
     2807,    0,    0,    0, 2804, 2808, 2808, 2808, 2808, 2809,
     2809, 2809, 2809,    0, 2806, 2810, 2810, 2810, 2810, 2811,
     2811, 2811, 2811,    0,    0,    0, 2808, 2812, 2812, 2812,
     2812, 2813, 2813, 2813, 2813,    0, 2810, 2814, 2814, 2814,
     2814, 2815, 2815, 2815, 2815,    0,    0,    0, 2812, 2816,
     2816, 2816, 2816, 2817, 2817, 2817, 2817,    0, 2814, 2818,

     2818, 2818, 2818, 2819, 2819, 2819, 2819,    0,    0,    0,
     2816, 2820, 2820, 2820, 2820, 2821, 2821, 2821, 2821,    0,
     2818, 2822, 2822, 2822, 2822, 2823, 2823, 2823, 2823,    0,
        0,    0, 2820, 2824, 2824, 2824, 2824, 2825, 2825, 2825,
     2825,    0, 2822, 2826, 2826, 2826, 2826, 2827, 2827, 2827,
     2827,    0,    0,    0, 2824, 2828, 2828, 2828, 2828, 2829,
     2829, 2829, 2829,    0, 2826, 2830, 2830, 2830, 2830, 2831,
     2831, 2831, 2831,    0,    0,    0, 2828, 2832, 2832, 2832,
     2832, 2833, 2833, 2833, 2833,    0, 2830, 2834, 2834, 2834,
     2834, 2835, 2835, 2835, 2835,    0,    0,    0, 2832, 2836,

     2836, 2836, 2836, 2837, 2837, 2837, 2837,    0, 2834, 2838,
     2838, 2838, 2838, 2839, 2839, 2839, 2839,    0,    0,    0,
     2836, 2840, 2840, 2840, 2840, 2841, 2841, 2841, 2841,    0,
     2838, 2842, 2842, 2842, 2842, 2843, 2843, 2843, 2843,    0,
        0,    0, 2840, 2844, 2844, 2844, 2844, 2845, 2845, 2845,
     2845,    0, 2842, 2846, 2846, 2846, 2846, 2847, 2847, 2847,
     2847,    0,    0,    0, 2844, 2848, 2848, 2848, 2848, 2849,
     2849, 2849, 2849,    0, 2846, 2850, 2850, 2850, 2850, 2851,
     2851, 2851, 2851,    0,    0,    0, 2848, 2852, 2852, 2852,
     2852, 2853, 2853, 2853, 2853,    0, 2850, 2854, 2854, 2854,

     2854, 2855, 2855, 2855, 2855,    0,    0,    0, 2852, 2856,
     2856, 2856, 2856, 2857, 2857, 2857, 2857,    0, 2854, 2858,
     2858, 2858, 2858, 2859, 2859, 2859, 2859,    0,    0,    0,
     2856, 2860, 2860, 2860, 2860, 2861, 2861, 2861, 2861,    0,
     2858, 2862, 2862, 2862, 2862, 2863, 2863, 2863, 2863,    0,
        0,    0, 2860, 2864, 2864, 2864, 2864, 2865, 2865, 2865,
     2865,    0, 2862, 2866, 2866, 2866, 2866, 2867, 2867, 2867,
     2867,    0,    0,    0, 2864, 2868, 2868, 2868, 2868, 2869,
     2869, 2869, 2869,    0, 2866, 2870, 2870, 2870, 2870, 2871,
     2871, 2871, 2871,    0,    0,    0, 2868, 2872, 2872, 2872,

     2872, 2873, 2873, 2873, 2873,    0, 2870, 2874, 2874, 2874,
     2874, 2875, 2875, 2875, 2875,    0,    0,    0, 2872, 2876,
     2876, 2876, 2876, 2877, 2877, 2877, 2877,    0, 2874, 2878,
     2878, 2878, 2878, 2879, 2879, 2879, 2879,    0,    0,    0,
     2876, 2880, 2880, 2880, 2880, 2881, 2881, 2881, 2881,    0,
     2878, 2882, 2882, 2882, 2882, 2883, 2883, 2883, 2883,    0,
        0,    0, 2880, 2884, 2884, 2884, 2884, 2885, 2885, 2885,
     2885,    0, 2882, 2886, 2886, 2886, 2886, 2887, 2887, 2887,
     2887,    0,    0,    0, 2884, 2888, 2888, 2888, 2888, 2889,
     2889, 2889, 2889,    0, 2886, 2890, 2890, 2890, 2890, 2891,

     2891, 2891, 2891,    0,    0,    0, 2888, 2892, 2892, 2892,
     2892, 2893, 2893, 2893, 2893,    0, 2890, 2894, 2894, 2894,
     2894, 2895, 2895, 2895, 2895,    0,    0,    0, 2892,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2894, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2898,
     2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898,
     2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898,
     2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2899,

     2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899,
     2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899,
     2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2900,
     2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900,
     2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900,
     2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2904,
     2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904,
     2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904,
     2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2905,
     2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905,
     2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905,

     2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2908,
     2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908,
     2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908,
     2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2909,

     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2912,
     2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912,

     2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912,
     2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2913,
     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,
     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,
     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915,

     2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2916,
     2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916,
     2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916,
     2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2917,
     2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917,
     2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917,
     2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2919,

     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2920,
     2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920,
     2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920,
     2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2921,
     2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921,
     2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921,
     2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2922,
     2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922,

     2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922,
     2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2923,
     2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923,
     2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923,
     2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2925,
     2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925,
     2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925,

     2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2927,
     2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927,
     2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927,
     2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2929,

     2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929,
     2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929,
     2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2930,
     2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930,
     2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930,
     2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2931,
     2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931,
     2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931,
     2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,

     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2935,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,

     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2937,
     2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937,
     2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937,
     2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2938,
     2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938,
     2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938,
     2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2939,

     2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939,
     2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939,
     2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2941,
     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941,
     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941,
     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2942,
     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942,

     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942,
     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945,

     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2947,
     2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947,
     2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947,
     2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2948,
     2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948,
     2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948,
     2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2949,

     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2952,
        0,    0, 2952,    0,    0,    0,    0,    0, 2952,    0,
        0,    0,    0,    0, 2952,    0,    0,    0,    0,    0,
        0, 2952, 2953, 2953, 2953, 2953,    0,    0, 2953,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2953,    0,

        0,    0,    0,    0, 2953,    0,    0,    0,    0,    0,
     2953, 2954, 2954, 2954, 2954,    0,    0, 2954,    0,    0,
        0,    0,    0,    0, 2954,    0,    0,    0,    0,    0,
        0,    0,    0, 2954,    0,    0,    0,    0,    0, 2954,
     2955, 2955, 2955, 2955,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2955,    0, 2955, 2955, 2955, 2955,    0,
        0,    0, 2955, 2956, 2956, 2956, 2956,    0,    0, 2956,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2956, 2957, 2957, 2957, 2957,
        0,    0, 2957,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 2957,    0,    0,    0,    0,    0, 2957,    0,
        0,    0,    0,    0, 2957, 2958, 2958, 2958, 2958,    0,
        0,    0,    0,    0, 2958,    0,    0,    0,    0,    0,
     2958, 2958,    0,    0,    0,    0,    0, 2958, 2959, 2959,
     2959, 2959,    0,    0, 2959,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2959, 2962, 2962, 2962, 2962,    0,    0, 2962,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2962,    0,    0,    0, 2962, 2963, 2963,
     2963, 2963,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 2963,    0, 2963, 2963,    0,    0,    0,    0,    0,
     2963, 2964, 2964,    0, 2964,    0, 2964, 2964, 2964, 2964,
        0, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964,
     2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964,
     2964, 2965, 2965, 2965, 2965,    0,    0, 2965,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2965,    0,    0,
        0,    0,    0, 2965,    0,    0,    0,    0,    0, 2965,
     2966, 2966, 2966, 2966,    0,    0, 2966,    0,    0,    0,
        0, 2966,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2966, 2967, 2967, 2967, 2967,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 2967, 2967,
        0, 2967,    0,    0,    0, 2967, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2968, 2968, 2969, 2969, 2969, 2969,
        0,    0, 2969,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2969, 2970,
     2970,    0, 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970,
     2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970,    0, 2970,
     2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2971,

     2971, 2971, 2971,    0,    0, 2971,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2971,    0,    0,    0,    0,
        0, 2971,    0,    0,    0,    0,    0, 2971, 2972, 2972,
     2972, 2972,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2972, 2972,    0, 2972,    0,    0,    0,
     2972, 2973, 2973, 2973, 2973,    0,    0, 2973,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2973, 2978, 2978,    0,    0, 2978,    0,
        0, 2978, 2978,    0, 2978, 2978, 2978, 2978, 2978,    0,
     2978, 2978, 2978, 2978, 2978, 2978,    0, 2978, 2978, 2978,

     2978,    0,    0, 2978, 2979, 2979,    0, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2980, 2980,    0, 2980,    0, 2980,
     2980, 2980, 2980,    0, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2982, 2982, 2982, 2982,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2982,    0, 2982,
     2982,    0,    0,    0,    0,    0, 2982, 2983, 2983, 2983,
     2983,    0,    0, 2983,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 2983,    0,    0,    0,    0,    0, 2983,
        0,    0,    0,    0,    0, 2983, 2984, 2984, 2984, 2984,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2984, 2984,    0,    0,    0,    0,    0, 2984, 2985,
     2985, 2985, 2985,    0,    0, 2985,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2985, 2986, 2986,    0, 2986, 2986,    0,    0, 2986,
     2986,    0, 2986, 2986, 2986, 2986, 2986,    0, 2986, 2986,
     2986, 2986, 2986, 2986,    0, 2986, 2986,    0, 2986,    0,
        0, 2986, 2987, 2987,    0, 2987,    0, 2987, 2987, 2987,

     2987,    0, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2988, 2988,    0, 2988, 2988, 2988, 2988, 2988,
     2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988,
     2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988,
     2988, 2988, 2989, 2989,    0, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2989, 2989,    0, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990,
     2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990,

     2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990,
     2990, 2990, 2991, 2991,    0, 2991, 2991,    0, 2991, 2991,
     2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991,
     2991, 2991, 2991, 2991, 2991, 2991,    0, 2991,    0, 2991,
     2991, 2991, 2994,    0,    0,    0,    0, 2994, 2994, 2994,
     2994, 2994, 2994, 2994,    0, 2994,    0,    0, 2994, 2994,
     2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,
     2994, 2994, 2998, 2998, 2998, 2998,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 2998,    0, 2998,    0,    0,
        0,    0,    0,    0, 2998, 2999, 2999,    0, 2999, 2999,

     2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999,
     2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999,
     2999, 2999, 2999, 2999, 2999, 3004, 3004,    0, 3004, 3004,
        0, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004,
     3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004,
     3004, 3004, 3004, 3004, 3004, 3007, 3007, 3007, 3007, 3007,
     3007, 3007, 3007, 3007, 3007, 3007,    0, 3007, 3007, 3007,
     3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007,
     3007, 3007, 3007, 3007, 3007, 3009, 3009, 3009, 3009,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     3009, 3009,    0,    0,    0,    0,    0, 3009, 3010, 3010,
     3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010,    0,
     3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010,
     3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010, 3019, 3019,
        0, 3019,    0, 3019, 3019, 3019, 3019,    0, 3019, 3019,
     3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019,
     3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3020, 3020,
     3020, 3020,    0,    0, 3020,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3020, 3021, 3021, 3021, 3021,    0,    0,    0,    0,    0,

        0,    0, 3021,    0,    0,    0, 3021,    0,    0,    0,
        0,    0,    0, 3021, 3022, 3022, 3022, 3022,    0,    0,
     3022, 3022,    0,    0,    0, 3022,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3022, 3023, 3023, 3023,
     3023,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3023,    0,    0,    0,    0,    0,    0, 3023,
     3023, 3024, 3024, 3024, 3024,    0,    0, 3024,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3024,    0,    0,
        0,    0,    0, 3024,    0,    0,    0,    0,    0, 3024,
     3025, 3025, 3025, 3025,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 3025, 3025,    0,    0,    0,
        0,    0, 3025, 3026, 3026, 3026, 3026,    0,    0, 3026,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3026, 3027, 3027,    0, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3028,    0,    0,    0,
        0,    0,    0, 3028, 3028,    0,    0,    0, 3028, 3028,
     3028,    0, 3028, 3028, 3028, 3028, 3028, 3028, 3028, 3028,
     3028, 3028, 3028, 3028, 3028, 3028, 3029, 3029,    0, 3029,

        0, 3029, 3029, 3029, 3029,    0, 3029, 3029, 3029, 3029,
     3029, 3029, 3029, 3029, 3029, 3029, 3029, 3029, 3029, 3029,
     3029, 3029, 3029, 3029, 3029, 3029, 3034, 3034,    0, 3034,
     3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034,
     3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034, 3034,
     3034, 3034, 3034, 3034, 3034, 3034, 3035, 3035,    0, 3035,
     3035,    0, 3035, 3035, 3035,    0,    0,    0, 3035, 3035,
     3035, 3035, 3035, 3035, 3035, 3035, 3035, 3035, 3035, 3035,
     3035, 3035, 3035, 3035, 3035, 3035, 3036, 3036,    0, 3036,
        0, 3036, 3036, 3036, 3036,    0, 3036, 3036, 3036, 3036,

     3036, 3036, 3036, 3036, 3036, 3036, 3036, 3036, 3036, 3036,
     3036, 3036, 3036, 3036, 3036, 3036, 3037, 3037,    0, 3037,
     3037,    0, 3037, 3037, 3037,    0, 3037, 3037, 3037, 3037,
     3037,    0, 3037, 3037, 3037, 3037, 3037, 3037, 3037, 3037,
     3037, 3037, 3037,    0,    0, 3037, 3038, 3038,    0, 3038,
        0, 3038, 3038, 3038, 3038,    0, 3038, 3038, 3038, 3038,
     3038, 3038, 3038, 3038, 3038, 3038, 3038, 3038, 3038, 3038,
     3038, 3038, 3038, 3038, 3038, 3038, 3040, 3040,    0, 3040,
        0, 3040, 3040, 3040, 3040,    0, 3040, 3040, 3040, 3040,
     3040, 3040, 3040, 3040, 3040, 3040, 3040, 3040, 3040, 3040,

     3040, 3040, 3040, 3040, 3040, 3040, 3042, 3042,    0, 3042,
     3042,    0, 3042, 3042, 3042,    0, 3042, 3042, 3042, 3042,
     3042, 3042, 3042, 3042, 3042, 3042, 3042, 3042, 3042, 3042,
     3042,    0, 3042, 3042, 3042, 3042, 3043, 3043,    0, 3043,
     3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043,
     3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043, 3043,
     3043, 3043, 3043, 3043, 3043, 3043, 3044, 3044,    0, 3044,
     3044,    0, 3044, 3044, 3044,    0,    0,    0, 3044, 3044,
     3044,    0, 3044, 3044, 3044, 3044, 3044, 3044, 3044, 3044,
     3044, 3044, 3044, 3044, 3044, 3044, 3045, 3045,    0, 3045,

     3045, 3045, 3045, 3045, 3045, 3045, 3045, 3045,    0, 3045,
     3045, 3045, 3045, 3045, 3045, 3045, 3045, 3045,    0, 3045,
     3045,    0, 3045, 3045, 3045, 3045, 3046, 3046,    0, 3046,
     3046, 3046, 3046, 3046, 3046, 3046, 3046, 3046, 3046, 3046,
     3046, 3046, 3046, 3046, 3046, 3046, 3046, 3046,    0, 3046,
     3046,    0, 3046, 3046, 3046, 3046, 3047, 3047, 3047, 3047,
        0,    0, 3047,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3047, 3047,
     3049, 3049, 3049, 3049,    0,    0,    0,    0,    0,    0,
     3049,    0, 3049,    0,    0, 3049,    0,    0,    0,    0,

        0,    0, 3049, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 3050, 3051, 3051, 3051, 3051,    0,    0, 3051,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3051, 3053, 3053, 3053, 3053,
        0,    0,    0,    0,    0, 3053,    0,    0,    0,    0,
        0, 3053,    0,    0,    0,    0,    0,    0, 3053, 3054,
        0,    0, 3054,    0,    0, 3054,    0,    0,    0,    0,
     3054,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 3054, 3055, 3055, 3055, 3055,    0,    0, 3055,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3055,    0,
        0,    0,    0,    0, 3055,    0,    0,    0,    0,    0,
     3055, 3056, 3056, 3056, 3056,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3056, 3056,    0,    0,
        0,    0,    0, 3056, 3057, 3057, 3057, 3057,    0,    0,
     3057,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3057, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,

     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3059, 3059,    0,
     3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059,    0,
     3059, 3059,    0, 3059, 3059, 3059, 3059, 3059, 3059,    0,
     3059, 3059,    0, 3059, 3059, 3059, 3059, 3060, 3060, 3060,
     3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060,
     3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060,
     3060, 3060, 3060, 3060, 3060, 3060, 3060, 3061, 3061,    0,
     3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061,    0,
     3061, 3061,    0, 3061, 3061, 3061, 3061, 3061, 3061,    0,
     3061, 3061,    0, 3061, 3061, 3061, 3061, 3062,    0,    0,

     3062,    0,    0,    0,    0,    0, 3062,    0,    0,    0,
        0,    0, 3062,    0,    0,    0,    0,    0,    0, 3062,
     3063, 3063, 3063, 3063,    0,    0, 3063,    0,    0,    0,
        0,    0,    0, 3063,    0,    0,    0,    0,    0,    0,
        0,    0, 3063,    0,    0,    0,    0,    0, 3063, 3065,
     3065, 3065, 3065,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3065,    0, 3065, 3065, 3065, 3065,    0,    0,
        0, 3065, 3066, 3066, 3066, 3066,    0,    0, 3066,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3066, 3067, 3067, 3067, 3067,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 3067,    0,
     3067,    0,    0,    0,    0,    0,    0, 3067, 3068, 3068,
     3068, 3068,    0,    0, 3068,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3068, 3069, 3069, 3069, 3069,    0,    0, 3069,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3069, 3070, 3070, 3070, 3070,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3070,
        0, 3070, 3070,    0,    0,    0, 3070, 3072, 3072, 3072,
     3072,    0,    0,    0,    0,    0, 3072,    0,    0,    0,

        0,    0, 3072, 3072,    0,    0,    0,    0,    0, 3072,
     3073, 3073, 3073, 3073,    0,    0, 3073,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3073, 3074, 3074, 3074, 3074,    0,    0,    0,
        0,    0, 3074,    0,    0,    0,    0,    0, 3074,    0,
        0,    0,    0,    0,    0, 3074, 3076, 3076, 3076, 3076,
        0,    0, 3076,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3076,    0,
        0,    0, 3076, 3077, 3077, 3077, 3077,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3077,    0, 3077, 3077,

        0,    0,    0,    0,    0, 3077, 3078, 3078, 3078, 3078,
        0,    0, 3078,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3078, 3080,
     3080,    0, 3080,    0, 3080, 3080, 3080, 3080, 3080, 3080,
     3080, 3080, 3080, 3080, 3080, 3080, 3080, 3080, 3080, 3080,
     3080, 3080, 3080, 3080,    0, 3080, 3080, 3080, 3080, 3081,
     3081,    0, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3082,
     3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082,

     3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082,
     3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3084,
     3084, 3084, 3084,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3084, 3084,    0, 3084,    0,    0,
        0, 3084, 3085, 3085, 3085, 3085,    0,    0, 3085,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3085, 3086, 3086, 3086, 3086,    0,
        0, 3086,    0,    0,    0,    0, 3086,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3086, 3087, 3087,
     3087, 3087,    0,    0,    0,    0,    0,    0, 3087, 3087,

        0,    0,    0, 3087, 3087,    0, 3087,    0,    0,    0,
     3087, 3088, 3088, 3088, 3088,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3088,    0,    0, 3088,
        0,    0,    0, 3088, 3089, 3089,    0, 3089, 3089, 3089,
     3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089,
     3089, 3089, 3089,    0, 3089, 3089, 3089, 3089, 3089, 3089,
     3089, 3089, 3089, 3089, 3091, 3091, 3091, 3091,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3091,
     3091,    0, 3091,    0,    0,    0, 3091, 3092, 3092, 3092,
     3092,    0,    0, 3092,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 3092,
     3093, 3093, 3093, 3093,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3093,    0,    0, 3093,    0,
        0,    0, 3093, 3096, 3096,    0,    0, 3096,    0,    0,
     3096, 3096,    0, 3096, 3096, 3096, 3096, 3096,    0, 3096,
     3096, 3096, 3096, 3096, 3096,    0, 3096, 3096, 3096, 3096,
        0,    0, 3096, 3097, 3097,    0, 3097, 3097, 3097, 3097,
     3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097,
     3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097,
     3097, 3097, 3097, 3098, 3098,    0, 3098,    0, 3098, 3098,

     3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098,
     3098, 3098, 3098, 3098, 3098, 3098, 3098, 3098,    0, 3098,
     3098, 3098, 3098, 3099, 3099,    0, 3099, 3099, 3099, 3099,
     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
     3099, 3099, 3099, 3100, 3100,    0, 3100, 3100, 3100, 3100,
     3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100,
     3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100,
     3100, 3100, 3100, 3101, 3101, 3101, 3101,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3101,    0, 3101, 3101,

        0,    0,    0,    0,    0, 3101, 3102, 3102, 3102, 3102,
        0,    0, 3102,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3102, 3104,
     3104, 3104, 3104,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3104, 3104,    0,    0,    0,    0,
        0, 3104, 3105, 3105, 3105, 3105,    0,    0, 3105,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3105, 3107, 3107,    0, 3107, 3107,
        0,    0, 3107, 3107,    0, 3107, 3107, 3107, 3107, 3107,
        0, 3107, 3107, 3107, 3107, 3107, 3107,    0, 3107, 3107,

        0, 3107,    0,    0, 3107, 3108, 3108,    0, 3108,    0,
     3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108,
     3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108,
        0, 3108, 3108, 3108, 3108, 3109, 3109,    0, 3109, 3109,
     3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109,
     3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109,
     3109, 3109, 3109, 3109, 3109, 3110, 3110,    0, 3110, 3110,
     3110, 3110, 3110, 3110, 3110, 3110, 3110,    0, 3110, 3110,
     3110, 3110, 3110, 3110, 3110, 3110, 3110, 3110, 3110, 3110,
     3110, 3110, 3110, 3110, 3110, 3111, 3111, 3111, 3111, 3111,

     3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111,
     3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111, 3111,
     3111, 3111, 3111, 3111, 3111, 3112, 3112,    0, 3112, 3112,
        0, 3112, 3112, 3112, 3112, 3112, 3112, 3112, 3112, 3112,
     3112, 3112, 3112, 3112, 3112, 3112, 3112, 3112, 3112,    0,
     3112,    0, 3112, 3112, 3112, 3114,    0,    0,    0,    0,
     3114, 3114, 3114, 3114, 3114, 3114, 3114,    0, 3114,    0,
        0, 3114, 3114, 3114, 3114, 3114, 3114, 3114, 3114, 3114,
     3114, 3114, 3114, 3114, 3114, 3117, 3117, 3117, 3117,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3117,    0,

     3117,    0,    0,    0,    0,    0,    0, 3117, 3118, 3118,
     3118, 3118,    0,    0, 3118,    0,    0,    0,    0, 3118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3118, 3119, 3119,    0, 3119, 3119, 3119, 3119, 3119, 3119,
     3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119,
     3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119, 3119,
     3119, 3122, 3122,    0, 3122, 3122,    0, 3122, 3122, 3122,
     3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122,
     3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122, 3122,
     3122, 3124, 3124, 3124, 3124, 3124, 3124, 3124, 3124, 3124,

     3124, 3124,    0, 3124, 3124, 3124, 3124, 3124, 3124, 3124,
     3124, 3124, 3124, 3124, 3124, 3124, 3124, 3124, 3124, 3124,
     3124, 3125, 3125, 3125, 3125,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3125, 3125,    0,    0,
        0,    0,    0, 3125, 3126, 3126, 3126, 3126, 3126, 3126,
     3126, 3126, 3126, 3126, 3126,    0, 3126, 3126, 3126, 3126,
     3126, 3126, 3126, 3126, 3126, 3126, 3126, 3126, 3126, 3126,
     3126, 3126, 3126, 3126, 3128,    0,    0,    0, 3128, 3128,
        0,    0, 3128,    0,    0,    0,    0, 3128,    0, 3128,
     3132, 3132,    0, 3132,    0, 3132, 3132, 3132, 3132, 3132,

     3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
     3132, 3132, 3132, 3132, 3132,    0, 3132, 3132, 3132, 3132,
     3133, 3133,    0, 3133, 3133, 3133, 3133, 3133, 3133, 3133,
     3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133,
     3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133,
     3134, 3134, 3134, 3134,    0,    0, 3134,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3134, 3135, 3135, 3135, 3135,    0,    0,    0,
        0,    0,    0,    0, 3135,    0,    0,    0, 3135,    0,
        0,    0,    0,    0,    0, 3135, 3136, 3136, 3136, 3136,

        0,    0, 3136, 3136,    0,    0,    0, 3136,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3136, 3137,
     3137, 3137, 3137,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3137,    0,    0,    0,    0,    0,
        0, 3137, 3137, 3138, 3138,    0, 3138, 3138, 3138, 3138,
     3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138,
     3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138,
     3138, 3138, 3138, 3139, 3139, 3139, 3139,    0,    0, 3139,
        0,    0,    0,    0, 3139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3139, 3141, 3141, 3141, 3141,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3141, 3141,    0,    0,    0,    0,    0, 3141, 3142,
     3142, 3142, 3142,    0,    0, 3142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3142, 3144, 3144,    0, 3144, 3144, 3144, 3144, 3144,
     3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144,
     3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144,
     3144, 3144, 3145,    0,    0,    0,    0,    0,    0, 3145,
     3145,    0,    0,    0, 3145, 3145, 3145,    0, 3145, 3145,
     3145, 3145, 3145, 3145, 3145, 3145, 3145, 3145, 3145, 3145,

     3145, 3145, 3146, 3146,    0, 3146,    0, 3146, 3146, 3146,
     3146, 3146, 3146, 3146, 3146, 3146, 3146, 3146, 3146, 3146,
     3146, 3146, 3146, 3146, 3146, 3146, 3146,    0, 3146, 3146,
     3146, 3146, 3147, 3147,    0, 3147, 3147, 3147, 3147, 3147,
     3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147,
     3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147,
     3147, 3147, 3150, 3150,    0, 3150, 3150,    0, 3150, 3150,
     3150,    0,    0,    0, 3150, 3150, 3150, 3150, 3150, 3150,
     3150, 3150, 3150, 3150, 3150, 3150, 3150, 3150, 3150, 3150,
     3150, 3150, 3151, 3151,    0, 3151,    0, 3151, 3151, 3151,

     3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151,
     3151, 3151, 3151, 3151, 3151, 3151, 3151,    0, 3151, 3151,
     3151, 3151, 3152, 3152,    0, 3152, 3152, 3152, 3152, 3152,
     3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152,
     3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152,
     3152, 3152, 3153, 3153,    0, 3153, 3153,    0, 3153, 3153,
     3153,    0, 3153, 3153, 3153, 3153, 3153,    0, 3153, 3153,
     3153, 3153, 3153, 3153, 3153, 3153, 3153, 3153, 3153,    0,
        0, 3153, 3154, 3154,    0, 3154,    0, 3154, 3154, 3154,
     3154, 3154, 3154, 3154, 3154, 3154, 3154, 3154, 3154, 3154,

     3154, 3154, 3154, 3154, 3154, 3154, 3154,    0, 3154, 3154,
     3154, 3154, 3155, 3155,    0, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3157, 3157,    0, 3157,    0, 3157, 3157, 3157,
     3157, 3157, 3157, 3157, 3157, 3157, 3157, 3157, 3157, 3157,
     3157, 3157, 3157, 3157, 3157, 3157, 3157,    0, 3157, 3157,
     3157, 3157, 3158, 3158,    0, 3158, 3158, 3158, 3158, 3158,
     3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158,
     3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158,

     3158, 3158, 3159, 3159,    0, 3159, 3159,    0, 3159, 3159,
     3159,    0, 3159, 3159, 3159, 3159, 3159, 3159, 3159, 3159,
     3159, 3159, 3159, 3159, 3159, 3159, 3159,    0, 3159, 3159,
     3159, 3159, 3160, 3160,    0, 3160, 3160,    0, 3160, 3160,
     3160,    0,    0,    0, 3160, 3160, 3160,    0, 3160, 3160,
     3160, 3160, 3160, 3160, 3160, 3160, 3160, 3160, 3160, 3160,
     3160, 3160, 3161, 3161,    0, 3161, 3161, 3161, 3161, 3161,
     3161, 3161, 3161, 3161,    0, 3161, 3161, 3161, 3161, 3161,
     3161, 3161, 3161, 3161,    0, 3161, 3161,    0, 3161, 3161,
     3161, 3161, 3162, 3162,    0, 3162, 3162, 3162, 3162, 3162,

     3162, 3162, 3162, 3162, 3162, 3162, 3162, 3162, 3162, 3162,
     3162, 3162, 3162, 3162,    0, 3162, 3162,    0, 3162, 3162,
     3162, 3162, 3163, 3163, 3163, 3163,    0,    0, 3163,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3163, 3163, 3164, 3164, 3164, 3164,
        0,    0,    0,    0,    0,    0, 3164,    0, 3164,    0,
        0, 3164,    0,    0,    0,    0,    0,    0, 3164, 3165,
     3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
     3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
     3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3166,

     3166, 3166, 3166,    0,    0,    0,    0,    0,    0, 3166,
        0, 3166,    0,    0, 3166,    0,    0,    0,    0,    0,
        0, 3166, 3167, 3167, 3167, 3167,    0,    0, 3167,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3167, 3168, 3168, 3168, 3168,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3168,    0,    0,    0,    0,    0,    0, 3168, 3169, 3169,
     3169, 3169,    0,    0,    0,    0,    0, 3169,    0,    0,
        0,    0,    0, 3169,    0,    0,    0,    0,    0,    0,
     3169, 3173, 3173, 3173, 3173,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 3173, 3173,    0,    0,
        0,    0,    0, 3173, 3174, 3174, 3174, 3174,    0,    0,
     3174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3174, 3176, 3176, 3176,
     3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176,
     3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176,
     3176, 3176, 3176, 3176, 3176, 3176, 3176, 3177, 3177,    0,
     3177, 3177, 3177, 3177, 3177, 3177, 3177, 3177, 3177,    0,
     3177, 3177,    0, 3177, 3177, 3177, 3177, 3177, 3177,    0,
     3177, 3177,    0, 3177, 3177, 3177, 3177, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179,    0, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3180, 3180,    0,
     3180, 3180, 3180, 3180, 3180, 3180, 3180, 3180, 3180,    0,
     3180, 3180,    0, 3180, 3180, 3180, 3180, 3180, 3180,    0,
     3180, 3180,    0, 3180, 3180, 3180, 3180, 3181, 3181, 3181,
     3181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3181, 3181, 3181, 3181,    0,    0,    0, 3181,
     3182, 3182, 3182, 3182,    0,    0, 3182,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 3182, 3183, 3183, 3183, 3183,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3183,    0,
     3183, 3183,    0,    0,    0, 3183, 3184, 3184, 3184, 3184,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3184,
        0, 3184,    0,    0,    0,    0,    0,    0, 3184, 3185,
     3185, 3185, 3185,    0,    0, 3185,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3185, 3187, 3187, 3187, 3187,    0,    0, 3187,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3187,    0,
        0,    0,    0,    0, 3187,    0,    0,    0,    0,    0,

     3187, 3188, 3188, 3188, 3188,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3188,    0, 3188, 3188,
        0,    0,    0, 3188, 3189, 3189, 3189, 3189,    0,    0,
        0,    0,    0, 3189,    0,    0,    0,    0,    0, 3189,
     3189,    0,    0,    0,    0,    0, 3189, 3190, 3190, 3190,
     3190, 3190, 3190, 3190, 3190, 3190, 3190, 3190, 3190,    0,
     3190, 3190,    0, 3190, 3190, 3190, 3190, 3190, 3190, 3190,
     3190, 3190, 3190, 3190, 3190, 3190, 3190, 3191, 3191, 3191,
     3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191,
     3191, 3191,    0, 3191, 3191, 3191, 3191, 3191, 3191, 3191,

     3191, 3191, 3191, 3191, 3191, 3191, 3191, 3192, 3192, 3192,
     3192,    0,    0, 3192,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3192,    0,    0,    0,    0,    0, 3192,
        0,    0,    0,    0,    0, 3192, 3193, 3193, 3193, 3193,
        0,    0,    0,    0,    0, 3193,    0,    0,    0,    0,
        0, 3193,    0,    0,    0,    0,    0,    0, 3193, 3194,
     3194, 3194, 3194,    0,    0, 3194,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3194,    0,    0,    0,    0,
        0, 3194,    0,    0,    0,    0,    0, 3194, 3195, 3195,
     3195, 3195,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 3195,    0, 3195, 3195,    0,    0,    0,    0,    0,
     3195, 3196, 3196, 3196, 3196,    0,    0, 3196,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3196, 3197, 3197, 3197, 3197,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3197,
     3197,    0,    0,    0,    0,    0, 3197, 3200, 3200,    0,
     3200,    0, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200,
     3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200,
     3200, 3200,    0, 3200, 3200, 3200, 3200, 3201, 3201, 3201,
     3201,    0,    0, 3201,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 3201,    0,    0,    0,    0,    0, 3201,
        0,    0,    0,    0,    0, 3201, 3202, 3202, 3202, 3202,
        0,    0, 3202,    0,    0,    0,    0, 3202,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3202, 3203,
     3203, 3203, 3203,    0,    0, 3203,    0,    0,    0, 3203,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3203, 3204, 3204, 3204, 3204,    0,    0,    0,    0,
        0,    0, 3204, 3204,    0,    0,    0, 3204, 3204,    0,
     3204,    0,    0,    0, 3204, 3205,    0,    0, 3205,    0,
        0,    0, 3205,    0,    0,    0, 3205, 3205,    0,    0,

     3205,    0,    0,    0,    0, 3205,    0, 3205, 3206, 3206,
     3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206,
        0, 3206, 3206,    0, 3206, 3206, 3206, 3206, 3206, 3206,
     3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206, 3207, 3207,
     3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207,
     3207, 3207, 3207,    0, 3207, 3207, 3207, 3207, 3207, 3207,
     3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3208, 3208,
     3208, 3208,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3208, 3208,    0, 3208,    0,    0,    0,
     3208, 3209, 3209, 3209, 3209,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 3209,    0,    0, 3209,
        0,    0,    0, 3209, 3210, 3210, 3210, 3210,    0,    0,
     3210,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3210,    0,    0,    0,    0,    0, 3210,    0,    0,    0,
        0,    0, 3210, 3211, 3211, 3211, 3211,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3211,    0,
        0, 3211,    0,    0,    0, 3211, 3213, 3213, 3213, 3213,
     3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213,
     3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213,
     3213, 3213, 3213, 3213, 3213, 3213, 3214, 3214,    0, 3214,

     3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214,
     3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214, 3214,
     3214, 3214, 3214, 3214, 3214, 3214, 3215, 3215,    0, 3215,
        0, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215,
     3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215,
     3215,    0, 3215, 3215, 3215, 3215, 3216, 3216,    0, 3216,
     3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216,
     3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216,
     3216, 3216, 3216, 3216, 3216, 3216, 3217, 3217, 3217, 3217,
        0,    0, 3217,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 3217, 3218,
     3218, 3218, 3218,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3218,    0, 3218, 3218,    0,    0,    0,    0,
        0, 3218, 3219, 3219, 3219, 3219,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3219,    0, 3219, 3219,    0,
        0,    0,    0,    0, 3219, 3220, 3220, 3220, 3220,    0,
        0, 3220,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3220,    0,    0,    0,    0,    0, 3220,    0,    0,
        0,    0,    0, 3220, 3222, 3222,    0, 3222,    0, 3222,
     3222, 3222, 3222, 3222, 3222, 3222, 3222, 3222, 3222, 3222,

     3222, 3222, 3222, 3222, 3222, 3222, 3222, 3222, 3222,    0,
     3222, 3222, 3222, 3222, 3223,    0,    0,    0,    0, 3223,
     3223, 3223, 3223, 3223, 3223, 3223,    0, 3223,    0,    0,
     3223, 3223, 3223, 3223, 3223, 3223, 3223, 3223, 3223, 3223,
     3223, 3223, 3223, 3223, 3226, 3226, 3226, 3226,    0,    0,
     3226,    0,    0,    0,    0, 3226,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3226, 3227, 3227, 3227,
     3227,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3227,    0, 3227,    0,    0,    0,    0,    0,    0, 3227,
     3229,    0,    0,    0, 3229, 3229,    0,    0, 3229,    0,

        0,    0,    0, 3229,    0, 3229, 3231, 3231,    0, 3231,
        0, 3231, 3231, 3231, 3231, 3231, 3231, 3231, 3231, 3231,
     3231, 3231, 3231, 3231, 3231, 3231, 3231, 3231, 3231, 3231,
     3231,    0, 3231, 3231, 3231, 3231, 3232, 3232,    0, 3232,
     3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232,
     3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232, 3232,
     3232, 3232, 3232, 3232, 3232, 3232, 3233, 3233, 3233, 3233,
        0,    0, 3233,    0,    0,    0,    0, 3233,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3233, 3234,
     3234, 3234, 3234,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3234, 3234,    0,    0,    0,    0,
        0, 3234, 3235, 3235, 3235, 3235,    0,    0, 3235,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3235,    0,
        0,    0,    0,    0, 3235,    0,    0,    0,    0,    0,
     3235, 3237, 3237,    0, 3237,    0, 3237, 3237, 3237, 3237,
     3237, 3237, 3237, 3237, 3237, 3237, 3237, 3237, 3237, 3237,
     3237, 3237, 3237, 3237, 3237, 3237,    0, 3237, 3237, 3237,
     3237, 3239, 3239,    0, 3239,    0, 3239, 3239, 3239, 3239,
     3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239,
     3239, 3239, 3239, 3239, 3239, 3239,    0, 3239, 3239, 3239,

     3239, 3240, 3240,    0, 3240,    0, 3240, 3240, 3240, 3240,
     3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240,
     3240, 3240, 3240, 3240, 3240, 3240,    0, 3240, 3240, 3240,
     3240, 3241, 3241,    0, 3241,    0, 3241, 3241, 3241, 3241,
     3241, 3241, 3241, 3241, 3241, 3241, 3241, 3241, 3241, 3241,
     3241, 3241, 3241, 3241, 3241, 3241,    0, 3241, 3241, 3241,
     3241, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242,
     3242, 3242, 3242, 3242, 3242, 3242, 3242,    0, 3242, 3242,
     3242, 3242, 3242, 3242,    0, 3242, 3242, 3242, 3242, 3242,
     3242, 3243, 3243, 3243, 3243,    0,    0,    0,    0,    0,

        0, 3243,    0, 3243,    0,    0, 3243,    0,    0,    0,
        0,    0,    0, 3243, 3244, 3244, 3244, 3244,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3244,
        0,    0,    0,    0,    0,    0, 3244, 3246, 3246, 3246,
     3246,    0,    0, 3246,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3246,    0,    0,    0,    0,    0, 3246,
        0,    0,    0,    0,    0, 3246, 3248, 3248,    0, 3248,
     3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248,    0, 3248,
     3248,    0, 3248, 3248, 3248, 3248, 3248, 3248,    0, 3248,
     3248,    0, 3248, 3248, 3248, 3248, 3250, 3250, 3250, 3250,

     3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250,
     3250,    0, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250,
     3250, 3250, 3250, 3250, 3250, 3250, 3251, 3251, 3251, 3251,
     3251, 3251, 3251, 3251, 3251, 3251, 3251, 3251, 3251, 3251,
     3251, 3251,    0, 3251, 3251, 3251, 3251, 3251, 3251,    0,
     3251, 3251, 3251, 3251, 3251, 3251, 3252, 3252, 3252, 3252,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3252, 3252, 3252, 3252,    0,    0,    0, 3252, 3253,
     3253, 3253, 3253,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3253,    0, 3253, 3253,    0,    0,

        0, 3253, 3255, 3255, 3255, 3255,    0,    0,    0,    0,
        0, 3255,    0,    0,    0,    0,    0, 3255, 3255,    0,
        0,    0,    0,    0, 3255, 3256, 3256, 3256, 3256,    0,
        0, 3256,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3256,    0,    0,    0,    0,    0, 3256,    0,    0,
        0,    0,    0, 3256, 3257, 3257, 3257, 3257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3257,
     3257,    0,    0,    0,    0,    0, 3257, 3258, 3258, 3258,
     3258,    0,    0, 3258,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3258,

     3259, 3259, 3259, 3259,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3259,    0, 3259, 3259,    0,    0,    0,
        0,    0, 3259, 3260, 3260, 3260, 3260,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3260, 3260,
        0,    0,    0,    0,    0, 3260, 3262, 3262, 3262, 3262,
        0,    0, 3262,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3262, 3263,
     3263,    0, 3263,    0, 3263, 3263, 3263, 3263, 3263, 3263,
     3263, 3263, 3263, 3263, 3263, 3263, 3263, 3263, 3263, 3263,
     3263, 3263, 3263, 3263,    0, 3263, 3263, 3263, 3263, 3264,

     3264, 3264, 3264,    0,    0, 3264,    0,    0,    0,    0,
     3264,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3264, 3265, 3265, 3265, 3265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3265, 3265,    0,
     3265,    0,    0,    0, 3265, 3266, 3266, 3266, 3266,    0,
        0, 3266,    0,    0,    0, 3266,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3266, 3268, 3268,
     3268, 3268,    0,    0, 3268,    0,    0,    0,    0, 3268,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3268, 3269,    0,    0, 3269,    0,    0,    0, 3269,    0,

        0,    0, 3269, 3269,    0,    0, 3269,    0,    0,    0,
        0, 3269,    0, 3269, 3270, 3270,    0, 3270, 3270, 3270,
     3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270,
     3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270, 3270,
     3270, 3270, 3270, 3270, 3271, 3271,    0, 3271, 3271, 3271,
     3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271,
     3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271, 3271,
     3271, 3271, 3271, 3271, 3272, 3272, 3272, 3272,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3272,
     3272,    0, 3272,    0,    0,    0, 3272, 3274, 3274, 3274,

     3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
     3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
     3274, 3274, 3274, 3274, 3274, 3274, 3274, 3275, 3275,    0,
     3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275,
     3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275, 3275,
     3275, 3275, 3275, 3275, 3275, 3275, 3275, 3276, 3276,    0,
     3276,    0, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276,
     3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276,
     3276, 3276,    0, 3276, 3276, 3276, 3276, 3277, 3277, 3277,
     3277, 3277, 3277, 3277, 3277, 3277, 3277, 3277, 3277, 3277,

     3277, 3277, 3277,    0, 3277, 3277, 3277, 3277, 3277, 3277,
        0, 3277, 3277, 3277, 3277, 3277, 3277, 3278, 3278, 3278,
     3278,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3278,    0, 3278, 3278,    0,    0,    0,    0,    0, 3278,
     3279, 3279, 3279, 3279,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3279,    0, 3279, 3279,    0,    0,    0,
        0,    0, 3279, 3280, 3280,    0, 3280,    0, 3280, 3280,
     3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280,
     3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280,    0, 3280,
     3280, 3280, 3280, 3281,    0,    0,    0,    0, 3281, 3281,

     3281, 3281, 3281, 3281, 3281,    0, 3281,    0,    0, 3281,
     3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281,
     3281, 3281, 3281, 3283, 3283, 3283, 3283,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3283,    0, 3283,    0,
        0,    0,    0,    0,    0, 3283, 3286, 3286,    0, 3286,
        0, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3286,    0, 3286, 3286, 3286, 3286, 3287, 3287, 3287, 3287,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3287, 3287,    0,    0,    0,    0,    0, 3287, 3288,

     3288,    0, 3288,    0, 3288, 3288, 3288, 3288, 3288, 3288,
     3288, 3288, 3288, 3288, 3288, 3288, 3288, 3288, 3288, 3288,
     3288, 3288, 3288, 3288,    0, 3288, 3288, 3288, 3288, 3290,
     3290,    0, 3290,    0, 3290, 3290, 3290, 3290, 3290, 3290,
     3290, 3290, 3290, 3290, 3290, 3290, 3290, 3290, 3290, 3290,
     3290, 3290, 3290, 3290,    0, 3290, 3290, 3290, 3290, 3291,
     3291,    0, 3291,    0, 3291, 3291, 3291, 3291, 3291, 3291,
     3291, 3291, 3291, 3291, 3291, 3291, 3291, 3291, 3291, 3291,
     3291, 3291, 3291, 3291,    0, 3291, 3291, 3291, 3291, 3292,
     3292,    0, 3292,    0, 3292, 3292, 3292, 3292, 3292, 3292,

     3292, 3292, 3292, 3292, 3292, 3292, 3292, 3292, 3292, 3292,
     3292, 3292, 3292, 3292,    0, 3292, 3292, 3292, 3292, 3293,
     3293, 3293, 3293, 3293, 3293, 3293, 3293, 3293, 3293, 3293,
     3293, 3293, 3293, 3293, 3293,    0, 3293, 3293, 3293, 3293,
     3293, 3293,    0, 3293, 3293, 3293, 3293, 3293, 3293, 3294,
        0,    0, 3294,    0,    0, 3294,    0,    0,    0,    0,
     3294,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3294, 3295, 3295,    0, 3295, 3295, 3295, 3295, 3295,
     3295, 3295, 3295, 3295,    0, 3295, 3295,    0, 3295, 3295,
     3295, 3295, 3295, 3295,    0, 3295, 3295,    0, 3295, 3295,

     3295, 3295, 3296, 3296, 3296, 3296, 3296, 3296, 3296, 3296,
     3296, 3296, 3296, 3296, 3296, 3296, 3296, 3296,    0, 3296,
     3296, 3296, 3296, 3296, 3296,    0, 3296, 3296, 3296, 3296,
     3296, 3296, 3298, 3298, 3298, 3298,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3298, 3298,    0,
        0,    0,    0,    0, 3298, 3299, 3299, 3299, 3299,    0,
        0, 3299,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3299, 3301, 3301,
     3301, 3301,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3301,    0, 3301, 3301,    0,    0,    0,    0,    0,

     3301, 3302, 3302, 3302, 3302,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3302, 3302,    0, 3302,
        0,    0,    0, 3302, 3303,    0,    0, 3303,    0,    0,
        0, 3303,    0,    0,    0, 3303, 3303,    0,    0, 3303,
        0,    0,    0,    0, 3303,    0, 3303, 3306, 3306, 3306,
     3306,    0,    0,    0,    0,    0,    0, 3306,    0,    0,
        0,    0, 3306, 3306,    0, 3306,    0,    0,    0, 3306,
     3307, 3307,    0, 3307, 3307, 3307, 3307, 3307, 3307, 3307,
     3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307,
     3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307, 3307,

     3308, 3308,    0, 3308, 3308, 3308, 3308, 3308, 3308, 3308,
     3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308,
     3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308,
     3309, 3309, 3309, 3309,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3309, 3309,    0, 3309,    0,
        0,    0, 3309, 3310, 3310, 3310, 3310,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3310,    0,
        0,    0,    0,    0,    0, 3310, 3311, 3311,    0, 3311,
     3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311,
     3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311, 3311,

     3311, 3311, 3311, 3311, 3311, 3311, 3312, 3312, 3312, 3312,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3312,
        0, 3312, 3312,    0,    0,    0,    0,    0, 3312, 3313,
        0,    0,    0,    0, 3313, 3313, 3313, 3313, 3313, 3313,
     3313,    0, 3313,    0,    0, 3313, 3313, 3313, 3313, 3313,
     3313, 3313, 3313, 3313, 3313, 3313, 3313, 3313, 3313, 3315,
     3315, 3315, 3315,    0,    0, 3315,    0,    0,    0,    0,
     3315,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3315, 3316, 3316, 3316, 3316,    0,    0, 3316,    0,
        0,    0,    0, 3316,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3316, 3319, 3319, 3319, 3319, 3319,
     3319, 3319, 3319, 3319, 3319, 3319, 3319, 3319, 3319, 3319,
     3319,    0, 3319, 3319, 3319, 3319, 3319, 3319,    0, 3319,
     3319, 3319, 3319, 3319, 3319, 3321, 3321, 3321, 3321,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3321,    0,    0,    0, 3321,    0,    0, 3321, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,

     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.cpp,v 1.2 2014/11/19 09:12:52 wtchen Exp $
 *
 * Copyright (C) 1997-2005 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
//static int              lastAfterDocContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
//static int              memberGroupId = DOX_NOGROUP;
//static QCString         memberGroupHeader;
//static QCString         memberGroupDocs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;
static bool             insideIDL = FALSE;		//!< processing IDL code?
static bool             insideJava = FALSE;		//!< processing Java code?
static bool             insideCS = FALSE;		//!< processing C# code?
static bool             insideD = FALSE;		//!< processing D code?
static bool             insidePHP = FALSE;		//!< processing PHP code?
static bool             insideCppQuote = FALSE;
static bool             insideObjC = FALSE;             //!< processing Objective C code?
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;
static QCString         *pCopyQuotedString;
static QCString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;


//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  //memberGroupId = DOX_NOGROUP;
  //memberGroupRelates.resize(0);
  //memberGroupInside.resize(0);
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = current_root->section==Entry::INTERFACE_SEC ? Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  //current->mGrpId     = memberGroupId;
  //current->relates    = memberGroupRelates;
  //current->inside     = memberGroupInside;
  current->objc       = insideObjC;
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = scanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks();

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  SrcLangExt langExt = getLanguageFromFileName(fileName);
  insideIDL  = langExt==SrcLangExt_IDL;
  insideJava = langExt==SrcLangExt_Java;
  insideCS   = langExt==SrcLangExt_CSharp; 
  insideD    = langExt==SrcLangExt_D;
  insidePHP  = langExt==SrcLangExt_PHP;
  insideObjC = langExt==SrcLangExt_ObjC;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	dstAl->setAutoDelete(TRUE);
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */



































































































/** Prototype scanner states */





/** comment parsing states */



#line 7240 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define ClassCategory 5
#define ClassTemplSpec 6
#define Bases 7
#define BasesProt 8
#define NextSemi 9
#define BitFields 10
#define FindMembers 11
#define FindMembersPHP 12
#define FindMemberName 13
#define FindFields 14
#define FindFieldArg 15
#define Function 16
#define FuncRound 17
#define ExcpRound 18
#define ExcpList 19
#define FuncQual 20
#define Operator 21
#define Array 22
#define ReadBody 23
#define ReadNSBody 24
#define ReadBodyIntf 25
#define Using 26
#define UsingDirective 27
#define SkipCurly 28
#define SkipCurlyCpp 29
#define SkipCurlyEndDoc 30
#define SkipString 31
#define SkipPHPString 32
#define SkipInits 33
#define SkipCPP 34
#define SkipCPPBlock 35
#define SkipComment 36
#define SkipCxxComment 37
#define SkipCurlyBlock 38
#define SkipRoundBlock 39
#define Sharp 40
#define SkipSharp 41
#define SkipRound 42
#define SkipSquare 43
#define TypedefName 44
#define TryFunctionBlock 45
#define TryFunctionBlockEnd 46
#define Comment 47
#define PackageName 48
#define JavaImport 49
#define CSAccessorDecl 50
#define PreLineCtrl 51
#define DefinePHP 52
#define DefinePHPEnd 53
#define OldStyleArgs 54
#define SkipVerbString 55
#define ObjCMethod 56
#define ObjCReturnType 57
#define ObjCParams 58
#define ObjCParamType 59
#define ObjCProtocolList 60
#define QtPropType 61
#define QtPropName 62
#define QtPropAttr 63
#define QtPropRead 64
#define QtPropWrite 65
#define ReadInitializer 66
#define GetCallType 67
#define CppQuote 68
#define EndCppQuote 69
#define MemberSpec 70
#define MemberSpecSkip 71
#define EndTemplate 72
#define FuncPtr 73
#define EndFuncPtr 74
#define ReadFuncArgType 75
#define ReadTempArgs 76
#define IDLUnionCase 77
#define NSAliasName 78
#define NSAliasArg 79
#define CopyString 80
#define CopyPHPString 81
#define CopyRound 82
#define CopyCurly 83
#define SkipUnionSwitch 84
#define Specialization 85
#define FuncPtrInit 86
#define FuncFunc 87
#define FuncFuncEnd 88
#define FuncFuncType 89
#define CopyArgString 90
#define CopyArgPHPString 91
#define CopyArgRound 92
#define CopyArgSharp 93
#define CopyArgComment 94
#define CopyArgCommentLine 95
#define CopyArgVerbatim 96
#define IDLAttribute 97
#define IDLProp 98
#define IDLPropName 99
#define Prototype 100
#define PrototypePtr 101
#define PrototypeQual 102
#define PrototypeExc 103
#define PrototypeSkipLine 104
#define DocLine 105
#define DocBlock 106
#define DocCopyBlock 107

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 683 "scanner.l"


#line 7506 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2897 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 21259 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 685 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 690 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 694 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 697 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 703 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 706 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 720 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 727 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 728 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 732 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 736 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 740 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 743 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 745 "scanner.l"
{ // Non-PHP code text, ignore
  					  yyLineNr++;
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 748 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 750 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 757 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 762 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 772 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 781 "scanner.l"
{ current->mtype = mtype = Signal;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 790 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 800 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 810 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 819 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 828 "scanner.l"
{ 
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 837 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 846 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 855 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 864 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 873 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    current->objc = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 897 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 900 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 907 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 913 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 916 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 919 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 938 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 942 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 39:
YY_RULE_SETUP
#line 956 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 959 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 962 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 965 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 975 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 988 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 991 "scanner.l"
{
  					  isTypedef=FALSE;
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  curlyCount=0;
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current             = new Entry ;
					  initEntry();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1008 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1011 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1015 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1020 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1024 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->memSpec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1036 "scanner.l"
{ current->memSpec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1039 "scanner.l"
{ current->memSpec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1042 "scanner.l"
{ current->memSpec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1050 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1051 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					  BEGIN( CompoundName ); 
					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1061 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1084 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1102 "scanner.l"
{ // M$/Corba IDL interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::INTERFACE_SEC;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1121 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  current->objc = insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1134 "scanner.l"
{ // Objective-C class interface
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::INTERFACE_SEC;
					  current->objc = insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1147 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::PROTOCOL_SEC;
					  current->objc = insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1160 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::EXCEPTION_SEC;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 63:
#line 1172 "scanner.l"
case 64:
/* rule 64 can match eol */
#line 1173 "scanner.l"
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1173 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1185 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
#line 1207 "scanner.l"
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1207 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::STRUCT_SEC ;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
#line 1220 "scanner.l"
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1220 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::UNION_SEC ;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
#line 1233 "scanner.l"
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1233 "scanner.l"
{ // for IDL: typedef [something] enum
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::ENUM_SEC ;
					  addType( current ) ;
					  current->type += " enum" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1245 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1250 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1256 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1260 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1264 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1265 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1270 "scanner.l"
{ 
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  al->setAutoDelete(TRUE);
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr.copy();
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1287 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1291 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1295 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1309 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1312 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-2),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1323 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1342 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1347 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1348 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1370 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1378 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1379 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1384 "scanner.l"
{ // Note: this could be a return type!
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1397 "scanner.l"
{
  					  sharpCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1408 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1412 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1417 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1421 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1430 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1444 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1449 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1458 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1462 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1471 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1473 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1479 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1481 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1485 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1488 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1491 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1495 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1499 "scanner.l"
{
  					  current->memSpec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1503 "scanner.l"
{
  					  current->memSpec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1507 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1509 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1511 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1513 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1517 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1521 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1525 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1618 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1624 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1627 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1631 "scanner.l"

	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1632 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1633 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1634 "scanner.l"

	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1635 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1636 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1641 "scanner.l"

	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1642 "scanner.l"
{ BEGIN(TryFunctionBlock); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1643 "scanner.l"
{ unput(*scanYYtext); 
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1646 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1650 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1655 "scanner.l"
{ if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 135:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1660 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1666 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1669 "scanner.l"
{}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1670 "scanner.l"
{
                                          yyLineNr++;
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1674 "scanner.l"

	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1675 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1676 "scanner.l"
{ yyLineNr++ ;
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1679 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 143:
YY_RULE_SETUP
#line 1699 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1705 "scanner.l"
{
  					  //printf("End define\n");
					  yyLineNr++;
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1719 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::ENUM_SEC;  //HACK!
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1732 "scanner.l"

	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1733 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1736 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1747 "scanner.l"

	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1748 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundString = &current->args;
					  roundCount = 0;
  					  BEGIN( CopyRound );
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1761 "scanner.l"
{ current->name += scanYYtext ; 
  					  addType( current );
					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1764 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockJavaStyle = scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1786 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockJavaStyle = scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1804 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockJavaStyle = scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1827 "scanner.l"
{
  					  //Entry *tmp = current;
					  //if (previous)
					  //{
					  //  current = previous;
					  //}
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockJavaStyle = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockJavaStyle = scanYYtext[2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF");
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1883 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1886 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 158:
YY_RULE_SETUP
#line 1893 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(CopyRound);
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1900 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(CopyCurly);
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1907 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
  					  if (*scanYYtext==';' || lastInitializerContext==FindFields)
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1924 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer+=*scanYYtext; 
  					    pCopyQuotedString=&current->initializer;
					    BEGIN(CopyString);
					  }
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1937 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1940 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1943 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1946 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1950 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1954 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1967 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1977 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1981 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1996 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1999 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2002 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2006 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2010 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2013 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 177:
YY_RULE_SETUP
#line 2018 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2021 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2025 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2029 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2032 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2036 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 183:
YY_RULE_SETUP
#line 2041 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2047 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2051 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2056 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2060 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2073 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2083 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2086 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 191:
YY_RULE_SETUP
#line 2091 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2097 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2106 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2110 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2115 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2124 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2127 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 2128 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2132 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2135 "scanner.l"
{
  					  if (current->type.isEmpty()) // bit pad field
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2144 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2147 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					    }
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    initEntry();
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2200 "scanner.l"
{ 
  					  if (current->name.isEmpty() || current->name=="typedef") // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2217 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2228 "scanner.l"
{
					  current->mtype = Property;
					  current->memSpec |= Entry::Settable;
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2232 "scanner.l"
{
					  current->mtype = Property;
					  current->memSpec |= Entry::Gettable;
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2236 "scanner.l"
{
					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2238 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 2241 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 2247 "scanner.l"
{  // attribute of a parameter
					   idlAttr += scanYYtext;
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2250 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 2253 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 2268 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2271 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2284 "scanner.l"
{
 					}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2286 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2290 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2293 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2294 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2295 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2299 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2303 "scanner.l"

	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2304 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2308 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2312 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 2315 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2318 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2319 "scanner.l"
{
  					  current->name = scanYYtext;
					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2322 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2327 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    current->type       = "@"; // enum marker
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    current             = new Entry(*current);
					    // add to the scope surrounding the enum (copy!)
					    current_root->parent->addSubEntry(current);
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					  }
  					}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2352 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 232:
YY_RULE_SETUP
#line 2360 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2361 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2362 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2367 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2372 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyString );
					}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 2377 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 2381 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2386 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
  					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2399 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2410 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2413 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2417 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s'\n",cn.data(),rn.data());
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if (current->section == Entry::ENUM_SEC)
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  (current->section==Entry::INTERFACE_SEC || current->section==Entry::CATEGORY_SEC)
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    current->section==Entry::INTERFACE_SEC ||
						    insideJava || insidePHP || insideCS || insideD
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 2477 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 2497 "scanner.l"
{
  					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2517 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  current = new Entry(*current);
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 2531 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->section==Entry::STRUCT_SEC)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::UNION_SEC)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2565 "scanner.l"
{
                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // annonymous compound. If so we insert a 
					    // special `annonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // annonymous compound inside -> insert dummy variable name
						  //printf("Adding annonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent;
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() && msName!=current->name) // skip typedef T {} T;
					  {
  					    Entry *varEntry=new Entry;
					    varEntry->protection = current->protection ;
                                            varEntry->mtype = current->mtype;
					    varEntry->virt = current->virt;
					    varEntry->stat = current->stat;
					    varEntry->section = Entry::VARIABLE_SEC;
					    varEntry->name = msName.stripWhiteSpace();
					    varEntry->type = current->type.simplifyWhiteSpace()+" ";
					    varEntry->args = msArgs; //current->args.simplifyWhiteSpace();
					    //if (!current->name.isEmpty() && current->name[0]!='@' && 
					    //    current->parent->section & Entry::COMPOUND_MASK)
					    //  varEntry->type+=current->parent->name+"::";
					    if (isTypedef)
					    {
					      varEntry->type.prepend("typedef ");
					      //  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      //  if (!current->name.isEmpty() && current->name.at(0)!='@')
					      //  {
					      //	//printf("2>>>>>>>>>> adding %s->%s\n",msName.data(),current->name.data());
					      //    QCString scope;
					      //    if (current_root->section & Entry::SCOPE_MASK) scope=current_root->name;
					      //    Doxygen::typedefDict.insert(msName,new TypedefInfo(current->name,scope));
					      //  }
					    }
					    varEntry->type+=current->name+msType;
					    varEntry->fileName = yyFileName;
					    varEntry->startLine = yyLineNr;
					    varEntry->doc = current->doc.copy();
					    varEntry->brief = current->brief.copy();
					    varEntry->mGrpId = current->mGrpId;

					    // deep copy group list
					    QListIterator<Grouping> gli(*current->groups);
					    Grouping *g;
					    for (;(g=gli.current());++gli)
					    {
					      varEntry->groups->append(new Grouping(*g));
					    }
					    if (current->sli) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						varEntry->addSpecialListItem(lii->type,lii->itemId);
					      }
					      //delete current->sli;
					      //current->sli = 0;
					    }

					    //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					    //      varEntry->type.data(),varEntry->name.data(),
					    //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					    current_root->addSubEntry(varEntry);
					  }
					  if (*scanYYtext==';')
					  {
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2664 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 250:
YY_RULE_SETUP
#line 2678 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2679 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 2680 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 253:
/* rule 253 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2683 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2690 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 255:
/* rule 255 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 2693 "scanner.l"
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 2693 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) */
  					  current->bodyLine = yyLineNr;
  					  lineCount();
  					  addType(current);
					  funcPtrType=scanYYtext;
					  roundCount=0;
					  //current->type += scanYYtext;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 2702 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (current->name=="const" || current->name=="volatile")
					  {
					    funcPtrType += current->name;
					  }
					  else
					  {
					    BEGIN( EndFuncPtr );
					  }
  					}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 2713 "scanner.l"
{
  					  //printf("Error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 259:
/* rule 259 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2716 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 260:
/* rule 260 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2721 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 261:
/* rule 261 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2726 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2732 "scanner.l"
{ // a function returning a function
  					  current->args += *scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncFunc );
  					}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 2737 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2740 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2743 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 2747 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 2756 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 268:
/* rule 268 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2761 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2766 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 2769 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2773 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 2780 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 2781 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2782 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 275:
/* rule 275 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2785 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 2803 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2811 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 278:
YY_RULE_SETUP
#line 2833 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2836 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2839 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2843 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2848 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2854 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2861 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
                                          handleParametersCommentBlocks();

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 285:
YY_RULE_SETUP
#line 2878 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks();
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 286:
YY_RULE_SETUP
#line 2905 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2909 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 2927 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks();
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 2958 "scanner.l"

	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2959 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2960 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 2965 "scanner.l"
{ fullArgString+=scanYYtext;
  					  yyLineNr++;
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 293:
/* rule 293 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2971 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2976 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 295:
/* rule 295 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2989 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 3000 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 3001 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 3002 "scanner.l"
{ fullArgString+=*scanYYtext; yyLineNr++; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 3003 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 3004 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 3010 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 3016 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 3023 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 3028 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 3036 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 3042 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 3056 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 3060 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 3065 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 3070 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 3081 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 3090 "scanner.l"
{ 
  					  yyLineNr++; 
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 3095 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 314:
YY_RULE_SETUP
#line 3105 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3108 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 316:
YY_RULE_SETUP
#line 3121 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 3135 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 3140 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 3145 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 3151 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 3155 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3159 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 3164 "scanner.l"
{ // typically an initialized function pointer
                                          //current->args += *scanYYtext; 
					  //BEGIN(FuncPtrInit);
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3171 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3175 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 3181 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3190 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3200 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 3203 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 3206 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  yyLineNr++;
  					}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3210 "scanner.l"
{ // typically a K&R style C function
					  if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 3223 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3243 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3244 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3249 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3250 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 3251 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
					}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 3255 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 3261 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 3267 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3272 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 3275 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 3281 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 3284 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 3287 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 3290 "scanner.l"
{
  					  current->exception += ' ';
					  yyLineNr++;
  					}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 3294 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3297 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 3303 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 3306 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
					    QCString tempName;
					    static QRegExp re("operator[^a-z_A-Z0-9]");
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (/*(current->type.isEmpty() && tempName.find(re)==-1) || */
						 current->type.left(8)=="typedef "
					       )
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n",
					      //   current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n",
					      //   current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    static QRegExp re("([^)]*\\*[^)]*)"); // (...*...)
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->memSpec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->memSpec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type.data();
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->memSpec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 3401 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 3409 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 3413 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 3452 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockJavaStyle = scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF");
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 3483 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 3488 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3493 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 3499 "scanner.l"
{
  					  yyLineNr++;
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 3503 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 3506 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 3512 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
					}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 3516 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3521 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3526 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 3530 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3537 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 3544 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3551 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3554 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 3561 "scanner.l"
{ }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3562 "scanner.l"
{ }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3563 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 3566 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3569 "scanner.l"
{ }
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 3570 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 3573 "scanner.l"
{ }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 3574 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 378:
/* rule 378 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3582 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->section==Entry::PROTOCOL_SEC)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else // C++ template specialization
					  {
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 3600 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 3604 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->section == Entry::PROTOCOL_SEC)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3621 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 3625 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 3628 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 3637 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->section == Entry::PROTOCOL_SEC)
					  {
					    current->name += "-p";
					  }
					  if (current->section == Entry::PROTOCOL_SEC ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 3651 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 386:
/* rule 386 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3656 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3672 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 3685 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					  }
  					}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 3711 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            if (current->section!=Entry::OBJCIMPL_SEC)
                                            {
					      current->section=Entry::CATEGORY_SEC;
                                            }
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3728 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3731 "scanner.l"
{
					  current->name+=')';
					  // category has no variables so push back an empty body
					  unput('}');
					  unput('{');
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3738 "scanner.l"
{ 
  					  current->type.resize(0);
					  if (current->section == Entry::INTERFACE_SEC || 
					      current->section == Entry::STRUCT_SEC || 
					      insidePHP || insideCS || insideD || insideObjC
					     )
					    baseProt=Public;
					  else
					    baseProt=Private;
                                          baseVirt=Normal;
					  baseName.resize(0);
					  BEGIN( BasesProt ) ;
					}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 3751 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 394:
/* rule 394 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3759 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 395:
/* rule 395 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3775 "scanner.l"
case 396:
/* rule 396 can match eol */
#line 3776 "scanner.l"
case 397:
/* rule 397 can match eol */
#line 3777 "scanner.l"
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 3777 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3792 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    current->name.sprintf("@%d",anonCount++);
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      current_root->section!=Entry::INTERFACE_SEC &&
					      (current->section==Entry::INTERFACE_SEC ||
					       current->section==Entry::OBJCIMPL_SEC) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 3819 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 3820 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 3821 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 3822 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 3823 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 3824 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 3825 "scanner.l"
{ 
  					  baseName+=scanYYtext;
					  current->args += ' ';
					  current->args += scanYYtext;
					}
	YY_BREAK
case 407:
/* rule 407 can match eol */
YY_RULE_SETUP
#line 3830 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 408:
/* rule 408 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3836 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    yyLineNr++;
					    //unput('{');
					  }
					}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3847 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 3855 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 3862 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
                                            baseName += *scanYYtext;
					    specName = &baseName;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 3877 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 3880 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					    BEGIN(lastSkipSharpContext);
  					}
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 3885 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 3886 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 3887 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift operator and > > would end a nested template
					  {
                                            *specName += scanYYtext; 
					  }
                                        }
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 3897 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 3898 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 3899 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 3900 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 3903 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 3904 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 3907 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 3908 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 425:
/* rule 425 can match eol */
YY_RULE_SETUP
#line 3911 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if (current->section==Entry::INTERFACE_SEC || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 3952 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 3969 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 3972 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 3978 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 3979 "scanner.l"

	YY_BREAK
case 431:
/* rule 431 can match eol */
YY_RULE_SETUP
#line 3980 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 3983 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 3984 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 3985 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 3989 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 3993 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 3994 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 3997 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 3999 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
  					  if (YY_START!=SkipCurly)
					  {
					    current->doc.resize(0);
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                            //if (current->mGrpId!=DOX_NOGROUP)
                                            //{
                                            //  memberGroupInside = current->inside.copy();
                                            //}
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockJavaStyle = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 440:
/* rule 440 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4025 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;
					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                            //if (current->mGrpId!=DOX_NOGROUP)
                                            //{
                                            //  memberGroupInside = current->inside.copy();
                                            //}
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
					  docBlockJavaStyle = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockJavaStyle)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  if (!docBlockInBody)
					  {
					    current->doc.resize(0);
					    if (docBlockJavaStyle)
					    {
					      current->brief.resize(0);
					    }
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4059 "scanner.l"
{ 
                                          if (YY_START!=SkipCurly)
					  {
  					    current->brief.resize(0);
					    current->briefFile=yyFileName;
					    current->briefLine=yyLineNr;
					  }
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                            //if (current->mGrpId!=DOX_NOGROUP)
                                            //{
                                            //  memberGroupInside = current->inside.copy();
                                            //}
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockJavaStyle = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(TRUE);
					  BEGIN( DocLine );
					}
	YY_BREAK
case 442:
/* rule 442 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4083 "scanner.l"
{ 
                                          if (YY_START!=SkipCurly)
					  {
  					    current->brief.resize(0);
					    current->briefFile=yyFileName;
					    current->briefLine=yyLineNr;
					  }
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                            //if (current->mGrpId!=DOX_NOGROUP)
                                            //{
                                            //  memberGroupInside = current->inside.copy();
                                            //}
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockJavaStyle = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(TRUE);
					  BEGIN( DocLine );
					}
	YY_BREAK
case 443:
/* rule 443 can match eol */
YY_RULE_SETUP
#line 4107 "scanner.l"
{
					  lineCount();
					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4110 "scanner.l"
{
                                          if (insideCS && !current->name.isEmpty() && !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN(CSAccessorDecl);
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4157 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4158 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4169 "scanner.l"
{ if (curlyCount==0) current->memSpec |= Entry::Settable; }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4170 "scanner.l"
{ if (curlyCount==0) current->memSpec |= Entry::Gettable; }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4171 "scanner.l"
{}
	YY_BREAK
case 450:
/* rule 450 can match eol */
YY_RULE_SETUP
#line 4172 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 451:
/* rule 451 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4183 "scanner.l"
{ // whole line
					  handleCommentBlock(scanYYtext,TRUE);
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 452:
YY_RULE_SETUP
#line 4190 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock,FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 453:
/* rule 453 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4194 "scanner.l"
{ // start of a comment line
  					}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 4196 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 4198 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 4201 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 457:
/* rule 457 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4205 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4208 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 4217 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 460:
/* rule 460 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4222 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4227 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 462:
/* rule 462 can match eol */
YY_RULE_SETUP
#line 4230 "scanner.l"
{ // newline
  					  yyLineNr++;
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 4234 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 464:
YY_RULE_SETUP
#line 4240 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 465:
/* rule 465 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4247 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(DocBlock);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 466:
/* rule 466 can match eol */
YY_RULE_SETUP
#line 4258 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4264 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 4267 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 469:
/* rule 469 can match eol */
YY_RULE_SETUP
#line 4270 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4274 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 4277 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: reached end of file while inside a %s block!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 471:
YY_RULE_SETUP
#line 4287 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4290 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4297 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 474:
/* rule 474 can match eol */
YY_RULE_SETUP
#line 4302 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4305 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 4309 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 4312 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 4316 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4320 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4325 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4329 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4333 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4336 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 4339 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 485:
/* rule 485 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4346 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4349 "scanner.l"

	YY_BREAK
case 487:
/* rule 487 can match eol */
YY_RULE_SETUP
#line 4350 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4351 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4357 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4363 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 4370 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4377 "scanner.l"

	YY_BREAK
case 493:
YY_RULE_SETUP
#line 4378 "scanner.l"

	YY_BREAK
case 494:
YY_RULE_SETUP
#line 4379 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 4382 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4383 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4387 "scanner.l"
ECHO;
	YY_BREAK
#line 13507 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2897 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2897 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2896);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
int scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 4387 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
#if 0
  if (docBlockInBody)
  {
    if (previous==0) 
    {
      ASSERT(previous!=0); // shouldn't happen
      goto exit;
    }
    if (!previous->doc.isEmpty()) 
    { // start a new paragraph for the next piece of text found in the body
      previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
    }
  }
#endif
  //printf("parseCommentBlock [%s]\n",doc.data());
  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody ? previous : current,
	doc,        // text
	yyFileName, // file
	brief ? current->briefLine : current->docLine,   // line of block start
	docBlockInBody ? FALSE : brief, 
	docBlockInBody ? FALSE : docBlockJavaStyle,
	docBlockInBody,
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) newEntry();
  }
  if (needsEntry)
  {
    newEntry();
  }

#if 0
exit:
#endif
  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks()
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

//static void startGroupInDoc()
//{
//  if (current->section==Entry::GROUPDOC_SEC ) /* scope for a non-member group: @defgroup */
//  {
//    autoGroupStack.push(new Grouping(current->name,
//	  current->groupingPri()
//	  ));
//  }
//  else /* if (current->section == Entry::MEMBERGRP_SEC) scope for a member group: @name */
//  {
//    if (memberGroupId!=DOX_NOGROUP)
//    {
//      warn(yyFileName,yyLineNr,"Warning: member groups cannot be nested. Ending current group!\n");
//      endGroup();
//    }
//    memberGroupId = newMemberGroupId();
//    MemberGroupInfo *info = new MemberGroupInfo;
//    if (current->section == Entry::MEMBERGRP_SEC)
//    {
//      info->header = memberGroupHeader.stripWhiteSpace();
//    }
//    Doxygen::memGrpInfoDict.insert(memberGroupId,info);
//    memberGroupRelates = current->relates;
//    memberGroupInside = current->inside;
//    current->mGrpId = memberGroupId;
//  }
//}
//
////----------------------------------------------------------------------------
//
//static void endGroup()
//{
//  if (memberGroupId!=DOX_NOGROUP) // end of member group
//  {
//    //Doxygen::memberDocDict.insert(memberGroupId,
//    //	new QCString(memberGroupDocs)
//    //			);
//    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(memberGroupId);
//    if (info) 
//    {
//      info->doc = memberGroupDocs;
//      info->docFile = yyFileName;
//    }
//    memberGroupId=DOX_NOGROUP;
//    memberGroupRelates.resize(0);
//    memberGroupInside.resize(0);
//    if (YY_START!=ReadInitializer) 
//    {
//      current->mGrpId=DOX_NOGROUP;
//      current->relates.resize(0);
//    }
//    memberGroupDocs.resize(0);
//  }
//  else if (!autoGroupStack.isEmpty()) // end of group
//  {
//    Grouping *current = autoGroupStack.pop();
//    Grouping *parent = autoGroupStack.top();
//    if( parent ) {
//      setCurrentGroup( &parent->groupname, parent->pri );
//    } else {
//      setCurrentGroup( 0, Grouping::GROUPING_LOWEST );
//    }
//    delete current;
//  }
//}
//
////----------------------------------------------------------------------------
//
//static void forceEndGroup()
//{
//  while (memberGroupId!=DOX_NOGROUP || !autoGroupStack.isEmpty()) 
//  {
//    //printf("forceEndGroup ends group %d\n",memberGroupId);
//    endGroup();
//  }
//}

//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->sublist);
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      depthIf = 0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC)
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->objc;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {
	if (
	    ce->fileName.right(4)==".php" ||
	    ce->fileName.right(4)==".inc" ||
	    ce->fileName.right(2)==".d"
	   )
          current->protection = protection = Public ; 
	else if (ce->fileName.right(5)==".java")
          current->protection = protection = Package ; 
	else 
          current->protection = protection = Private ;
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else if (ce->section==Entry::INTERFACE_SEC)
      {
	if (ce->objc)
	{
	  current->protection = protection = Protected ;
	}
	else
	{
	  current->protection = protection = Public ;
	}
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      if (depthIf>0)
      {
	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      }
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;

  //anonCount     = 0;  // don't reset per file
  depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    if (depthIf>0)
    {
      warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    }

    rt->program.resize(0);
    delete current; current=0;

    parseCompounds(rt);

    inputFile.close();
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".cs"    || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}


//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


