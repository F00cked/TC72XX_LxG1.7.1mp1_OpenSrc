
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscanYYrestart(pyscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pyscanYYleng;

extern FILE *pyscanYYin, *pyscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscanYYrestart()), so that the user can continue scanning by
	 * just pointing pyscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pyscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscanYYrestart (FILE *input_file  );
void pyscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscanYY_create_buffer (FILE *file,int size  );
void pyscanYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscanYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscanYYpop_buffer_state (void );

static void pyscanYYensure_buffer_stack (void );
static void pyscanYY_load_buffer_state (void );
static void pyscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscanYY_scan_bytes (yyconst char *bytes,int len  );

void *pyscanYYalloc (yy_size_t  );
void *pyscanYYrealloc (void *,yy_size_t  );
void pyscanYYfree (void *  );

#define yy_new_buffer pyscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscanYYin = (FILE *) 0, *pyscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscanYYlineno;

int pyscanYYlineno = 1;

extern char *pyscanYYtext;
#define yytext_ptr pyscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[670] =
    {   0,
    16473,16473,   91,   91,   23,   23,   28,   28,   32,   32,
      142,  140,  141,  139,  141,   15,  140,  141,   15,  140,
      141,   16,  139,  141,   11,   15,  140,  141,   15,  140,
      141,   10,   15,  140,  141,   13,   15,  140,  141,   13,
       15,  140,  141,   13,   15,  140,  141,   13,   15,  140,
      141,   13,   15,  140,  141,   14,   15,  140,  141,   15,
      140,  141,   13,   15,  140,  141,16393,   13,   15,  140,
      141,16393,   13,   15,  140,  141,16393,   13,   15,  140,
      141,16393,   13,   15,  140,  141,16393,   40,  140,  141,
       41,  139,  141,   39,   40,  140,  141,   38,   40,  140,

      141,   40,  140,  141,   40,  140,  141,   40,  140,  141,
      114,  116,  140,  141,  116,  140,  141,  115,  139,  141,
      116,  140,  141,  116,  140,  141,  113,  116,  140,  141,
      119,  121,  140,  141,  120,  139,  141,  121,  140,  141,
      119,  121,  140,  141,  117,  121,  140,  141,  140,  141,
       57,  140,  141,   56,  140,  141,   63,  140,  141,   58,
      140,  141,   61,  140,  141,   58,   63,  140,  141,   62,
      140,  141,   60,   63,  140,  141,   59,   63,  140,  141,
       48,   52,  140,  141,   52,  140,  141,   51,  139,  141,
    16426,   47,   52,  140,  141,   50,   52,  140,  141,   46,

       52,  140,  141,   45,   52,  140,  141,   50,   52,  140,
      141,   67,  140,  141,   68,  139,  141,   64,   67,  140,
      141,   66,   67,  140,  141,   65,   67,  140,  141,   81,
      140,  141,   82,  140,  141,   82,  140,  141,   83,  140,
      141,   84,  140,  141,  140,  141,   85,  139,  141, 8281,
      140,  141,  140,  141,  140,  141,   88,  140,  141,   75,
       78,  140,  141,   78,  140,  141,   76,  139,  141,   74,
       78,  140,  141,   78,  140,  141,   73,   78,  140,  141,
       72,   78,  140,  141,  102,  140,  141,   91,  102,  140,
      141,  103,  139,  141,   95,  102,  140,  141,  101,  102,

      140,  141,   94,  102,  140,  141,   98,  102,  140,  141,
       92,  102,  140,  141,   92,  102,  140,  141,   90,  102,
      140,  141,  102,  140,  141,  102,  140,  141,   99,  102,
      140,  141,  102,  140,  141,  100,  102,  140,  141,  110,
      140,  141,  109,  139,  141,  107,  140,  141,  108,  139,
      141,  104,  107,  140,  141,  105,  107,  140,  141,  106,
      107,  140,  141,  126,  127,  140,  141,  127,  140,  141,
      125,  127,  140,  141,  127,  140,  141,  132,  133,  140,
      141,  131,  133,  140,  141,  133,  140,  141,  133,  140,
      141,  136,  138,  140,  141,  136,  137,  139,  141,  136,

      138,  140,  141,  136,  138,  140,  141,  138,  140,  141,
       24,  140,  141,   23,   24,  140,  141,   22,  139,  141,
       20,   24,  140,  141,   20,   24,  140,  141,   29,  140,
      141,   28,   29,  140,  141,   27,  139,  141,   25,   29,
      140,  141,   26,   29,  140,  141,   33,  140,  141,   32,
       33,  140,  141,   31,  139,  141,   30,   33,  140,  141,
       16,   12,   13,   13,   13,   13,   13,   14,16393,16393,
    16393,16393,16393,   13,16393,   13,16393,   13,16393,   13,
    16393,   13,16393,  114,  113,  119,  118,  119,  117,  117,
       57,   56,   58,   59,   48,16426,   50,   45,   44,   49,

       50,   50,   81,   82,   84,   85,   88,   75,   77,   72,
       71,   91,  101,   92,   92,   92,   95,   94,  106,  126,
      123,  123,  122,  132,  129,  129,  128,  136,  136,  136,
       23,   20,   20,   28,   26,   32,   30,   17,   12,   18,
       13,   13,   13,   13,16393,16393,16393,16393,16393,   19,
     8201,   13,16393,   13,16393,   13,16393,   13,16393,   35,
       36,   37,  111,  112,   43, 8234,   53,   54,   49,   49,
       50,   50,   55,   55,   84,   86,   87,   70,   69,   79,
       77,   80,   96,   97,   93,   92,   92,  124,  130,  134,
      135,   20,   20,   30,   17,   18,   13,    2,   13,   13,

    16393,16393,16393,16393,   13,16393,    1,    2,   13,16393,
       13,16393,   35,   36,  111,  112,   53,   54,   49,   84,
       86,   87,   79,   80,   96,   97,   93,   92,  134,  135,
       20,   20,   30,   13,    6,   13,16393,    1,16393,16393,
       13,16393,    5,    6,   13,16393,   93,   20,    4,   13,
    16393,    5,16393,    3,    4,   13,16393,16418,   20,   21,
        8,    3,16393,    7,    8,16418, 8226,   21,    7
    } ;

static yyconst flex_int16_t yy_accept[422] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   25,   29,   32,   36,   40,   44,   48,   52,
       56,   60,   63,   68,   73,   78,   83,   88,   91,   94,
       98,  102,  105,  108,  111,  115,  118,  121,  124,  127,
      131,  135,  138,  141,  145,  149,  151,  154,  157,  160,
      163,  166,  170,  173,  177,  181,  185,  188,  192,  196,

      200,  204,  208,  212,  215,  218,  222,  226,  230,  233,
      236,  239,  242,  245,  247,  250,  253,  255,  257,  260,
      264,  267,  270,  274,  277,  281,  285,  288,  292,  295,
      299,  303,  307,  311,  315,  319,  323,  326,  329,  333,
      336,  340,  343,  346,  349,  352,  356,  360,  364,  368,
      371,  375,  378,  382,  386,  389,  392,  396,  400,  404,
      408,  411,  414,  418,  421,  425,  429,  432,  436,  439,
      443,  447,  450,  454,  457,  461,  461,  461,  462,  462,
      463,  463,  464,  465,  466,  467,  468,  469,  469,  470,
      471,  472,  473,  474,  474,  474,  476,  476,  478,  480,

      482,  484,  484,  484,  484,  484,  484,  484,  485,  485,
      485,  486,  487,  487,  488,  489,  490,  491,  491,  492,
      493,  494,  495,  496,  497,  497,  497,  497,  498,  498,
      499,  500,  500,  502,  503,  504,  505,  505,  506,  506,
      507,  507,  507,  508,  509,  509,  509,  509,  509,  509,
      510,  510,  511,  512,  513,  513,  514,  514,  514,  515,
      516,  517,  517,  518,  519,  519,  520,  521,  521,  522,
      523,  524,  525,  525,  526,  527,  528,  529,  529,  530,
      531,  532,  532,  532,  533,  534,  535,  536,  537,  537,
      537,  538,  539,  540,  541,  542,  543,  544,  545,  546,

      547,  548,  549,  550,  551,  552,  554,  556,  558,  560,
      561,  562,  562,  563,  564,  565,  566,  567,  567,  568,
      569,  570,  570,  572,  574,  575,  576,  577,  578,  579,
      580,  580,  581,  582,  583,  584,  585,  586,  587,  588,
      589,  589,  590,  590,  591,  592,  592,  593,  594,  594,
      595,  596,  597,  598,  599,  600,  601,  602,  603,  604,
      605,  607,  609,  611,  613,  614,  615,  615,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
      637,  638,  639,  640,  641,  643,  645,  647,  647,  647,

      648,  649,  650,  651,  652,  653,  654,  656,  658,  659,
      661,  662,  663,  664,  666,  666,  667,  668,  669,  670,
      670
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   23,   22,   24,   22,   22,   22,   22,
       22,   25,   22,   22,   26,   22,   22,   27,   22,   22,
       28,   29,   30,    1,   31,    7,   32,   20,   33,   34,

       35,   36,   22,   22,   37,   23,   22,   38,   39,   22,
       40,   41,   22,   42,   43,   44,   45,   22,   22,   27,
       22,   22,   46,    7,   30,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[47] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    1,    6,    7,    7,    7,    1,    8,    9,
        9,   10,   10,   10,   10,   10,   10,    1,   11,    1,
       10,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    1
    } ;

static yyconst flex_int16_t yy_base[483] =
    {   0,
     1458, 1455,    0,   46,   90,   94, 1454, 1453,  101,  105,
      108,  113,  137,    0,  183,    0,  115,  122,  227,  229,
      242,    0,  288,    0,  334,  342,  346,  353,  360,  405,
     1449, 1446,  451,    0,  375,  386,  387,  420,  495,  496,
      525,    0,  571,    0,  617,    0, 1448, 1475, 1475, 1475,
       99, 1444, 1438,    0, 1426,    0, 1383, 1381, 1373, 1375,
      662, 1407,  338,  362,  368,  399,  380, 1475, 1475, 1407,
     1403, 1372,  120, 1400,    0, 1475, 1475, 1400, 1396, 1401,
        0,  129, 1475,  229, 1396,  232, 1475,    0, 1475, 1397,
     1475, 1475, 1475, 1475,    0,    0, 1475,  365, 1384,    0,

     1376,  432, 1376, 1475, 1475, 1475, 1475, 1475,    0, 1379,
     1475, 1475, 1366,  370, 1475, 1475, 1374, 1348,  394,    0,
      430, 1339, 1335,    0, 1330,  437, 1475, 1335, 1475, 1331,
        0, 1327, 1475,  686,  490, 1475,  333,  404, 1475,  662,
     1475, 1475, 1475, 1475, 1475, 1475, 1475,    0,    0, 1322,
     1475,  424,    0, 1475, 1311,  442, 1276, 1267, 1290, 1286,
      504, 1475, 1291, 1475,  500,  667, 1475, 1281, 1475, 1475,
        0, 1475, 1276, 1475,  506,  509,    0, 1272, 1269,    0,
     1265,    0, 1237, 1229, 1222, 1220,  678, 1254,  663,  669,
      670,  674,  689,    0,  664,  671,    0,  715,  716,  717,

      718, 1246, 1222, 1191,  516, 1203,    0,    0, 1203, 1195,
     1191,    0,  517, 1475,  672, 1178, 1176,  344, 1475,    0,
     1175,    0,    0,  673, 1170, 1173, 1162,    0, 1158,  719,
     1475, 1159,    0,  507,    0, 1162,    0, 1146,  683, 1475,
     1150, 1137,  724,    0,  727,    0, 1128, 1127, 1123,    0,
     1119,  736, 1475, 1123, 1119,    0, 1109,  715,  716,    0,
     1475,    0, 1475, 1475,  689,    0,    0, 1111, 1475,  742,
     1475,    0, 1107, 1475,  746, 1475, 1085,  748, 1108, 1101,
     1103,  744, 1095,  748,  753, 1093,    0, 1083,  758, 1082,
      759, 1079,    0, 1073, 1033, 1073, 1035, 1030,  761,  763,

      762,  764,  766, 1475, 1475,  767,  768,  769,  772, 1065,
     1064, 1030, 1475, 1061, 1057, 1475, 1051, 1049,  898,  896,
        0,    0,    0,    0, 1475,  883,  889,  885, 1475,  853,
      795,  789,    0,  775,  737,  719,  798, 1475,  336, 1475,
      773, 1475,  775,  688,  673,  519,  782,  787,  514,  788,
     1475, 1475,  405,  440,  435,  375,  797,  790,  798,  801,
      803,  804,  809,  816, 1475, 1475,  384, 1475, 1475, 1475,
     1475,    0,  379, 1475, 1475, 1475, 1475, 1475, 1475,  814,
     1475, 1475, 1475, 1475,  822,  830,  836,  382,  231,   90,
      823,  832,  837,  841,  843,  845,  846,    0,  837,  852,

      847,  130,  110,  855,  857,  861,  868,  869,  875,  871,
       92,  876,  877,  879,  880,  882, 1475,  890,  884, 1475,
      905,  916,  927,  938,  949,  960,  971,  982,  993, 1004,
     1015, 1026, 1037, 1048, 1053, 1062, 1071, 1081, 1092, 1097,
     1101, 1111, 1121, 1131, 1142, 1147, 1152, 1162, 1169, 1179,
     1190, 1195, 1205, 1215, 1226, 1236, 1247, 1257, 1261, 1270,
     1280, 1290, 1300, 1311, 1322, 1332, 1342, 1353, 1364, 1367,
     1376, 1386, 1391, 1399, 1408, 1418, 1429, 1435, 1444, 1453,
     1455, 1464
    } ;

static yyconst flex_int16_t yy_def[483] =
    {   0,
      421,  421,  420,  420,  422,  422,  421,  421,  423,  423,
      424,  424,  420,   13,  420,   15,  425,  425,  426,  426,
      420,   21,  420,   23,  427,  427,  428,  428,  429,  429,
      430,  430,  420,   33,  431,  431,  432,  432,  433,  433,
      420,   41,  420,   43,  420,   45,  420,  420,  420,  420,
      420,  420,  420,  434,  420,  435,  435,  435,  435,  435,
      436,  434,  437,  437,  437,  437,  437,  420,  420,  420,
      420,  420,  420,  420,  438,  420,  420,  420,  420,  420,
      439,  420,  420,  439,  420,  420,  420,  440,  420,  420,
      420,  420,  420,  420,  441,  442,  420,  443,  420,  444,

      420,  420,  445,  420,  420,  420,  420,  420,  446,  420,
      420,  420,  447,  420,  420,  420,  420,  420,  420,  448,
      420,  449,  420,  450,  420,  420,  420,  420,  420,  420,
      451,  420,  420,  420,  134,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  452,  453,  420,
      420,  454,  455,  420,  420,  456,  457,  457,  420,  420,
      457,  420,  420,  420,  458,  458,  420,  420,  420,  420,
      459,  420,  420,  420,  460,  420,  434,  420,  420,  461,
      420,  435,  435,  435,  435,  435,  436,  434,  462,  462,
      462,  462,  462,  463,  420,  437,  464,  437,  437,  437,

      437,  420,  420,  420,  420,  420,  465,  438,  420,  420,
      420,  439,  420,  420,  439,  420,  420,  420,  420,  440,
      420,  441,  442,  443,  420,  466,  420,  444,  420,  420,
      420,  467,  468,  469,  446,  420,  470,  447,  420,  420,
      420,  420,  420,  448,  420,  450,  420,  471,  420,  472,
      420,  420,  420,  420,  420,  451,  420,  420,  134,  135,
      420,  473,  420,  420,  420,  452,  453,  420,  420,  420,
      420,  455,  420,  420,  420,  420,  457,  457,  420,  420,
      420,  420,  474,  458,  458,  420,  459,  420,  420,  475,
      460,  420,  461,  420,  435,  435,  435,  435,  462,  462,

      462,  462,  462,  420,  420,  437,  437,  437,  437,  420,
      420,  420,  420,  420,  420,  420,  420,  466,  420,  420,
      476,  477,  468,  444,  420,  478,  420,  420,  420,  420,
      471,  420,  472,  420,  420,  420,  420,  420,  473,  420,
      420,  420,  420,  420,  420,  474,  479,  458,  475,  480,
      420,  420,  435,  420,  435,  435,  462,  462,  462,  462,
      437,  420,  437,  437,  420,  420,  420,  420,  420,  420,
      420,  476,  478,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  479,  458,  480,  435,  420,  435,
      462,  420,  462,  462,  437,  420,  437,  481,  420,  420,

      458,  420,  435,  462,  420,  462,  420,  437,  482,  458,
      420,  420,  462,  420,  420,  482,  420,  420,  420,    0,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420
    } ;

static yyconst flex_int16_t yy_nxt[1522] =
    {   0,
       50,   51,   52,   50,   53,   54,   50,   55,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   56,
       56,   56,   56,   56,   56,   56,   56,   50,   50,   50,
       56,   56,   57,   58,   56,   59,   60,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   50,   61,   52,   50,
       53,   62,   50,   55,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   63,   63,   63,   63,   63,
       63,   63,   63,   50,   50,   50,   63,   63,   64,   65,
       63,   66,   67,   63,   63,   63,   63,   63,   63,   63,
       63,   50,   69,  411,   70,   73,   69,   71,   70,   74,

      176,   71,   76,   77,  177,   78,   80,   77,   79,   78,
       82,  411,   79,   83,   84,   82,   97,   98,   85,   99,
      100,  205,  101,  102,   98,  206,   99,  103,   97,  101,
      213,  402,   72,  403,  214,   97,   72,   48,   86,   49,
       48,   48,   48,   48,   48,   87,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   88,   88,   88,   88,
       88,   88,   88,   88,   48,   48,   48,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   48,   89,   90,   49,   89,   89,   89,   89,
       89,   48,   91,   89,   89,   92,   89,   89,   89,   89,

       93,   94,   95,   95,   95,   95,   95,   95,   95,   95,
       89,   89,   89,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   89,  105,
      215,  105,  389,  218,  216,  106,  107,  106,  107,  108,
      219,  108,   48,   48,   49,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,  109,  109,  109,  109,  109,  109,  109,  109,   48,
       48,   48,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,   48,   48,  110,
       49,   48,   48,   48,   48,   48,  111,  111,   48,   48,

      111,   48,   48,   48,   48,  112,   48,  113,  113,  113,
      113,  113,  113,  113,  113,   48,   48,   48,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,   48,   48,  114,  115,  263,  117,  195,
      264,  118,   48,  119,  115,  218,  117,  121,  122,  118,
      123,  124,  219,  125,  126,  122,  197,  123,  124,  382,
      125,  128,  129,  195,  130,  131,  224,  132,  133,  195,
      225,  239,  240,  382,  134,  135,  135,   49,  136,  150,
      197,  195,  151,  402,  137,  138,  197,  139,   49,   49,
      150,  154,  237,  151,  155,  243,  240,  398,  197,  198,

      195,  137,  199,  152,  140,  141,  128,  129,  263,  130,
      131,  264,  132,  133,  152,  156,  390,  197,  201,  134,
      135,  135,   49,  136,  154,  270,  271,  155,  265,  137,
      138,  245,  139,  230,  231,  246,  389,  232,  252,  253,
      200,  354,  246,  275,  276,  265,  137,  388,  156,  140,
      141,  144,  144,  145,  144,  144,  144,  144,  144,  146,
      147,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      148,  148,  148,  148,  148,  148,  148,  148,  146,  144,
      147,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  146,  158,  158,  159,

      159,  282,  160,  160,  260,  260,  420,  289,  277,  325,
      176,  277,  228,  283,  177,  349,  420,  205,  213,  290,
      346,  206,  214,  161,  161,  162,  163,  164,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  165,  165,  165,  165,  165,  165,
      165,  165,  162,  162,  162,  165,  165,  165,  165,  165,
      165,  166,  165,  165,  165,  165,  165,  165,  165,  165,
      162,  167,  168,  169,  167,  167,  167,  167,  167,  167,
      167,  170,  167,  167,  167,  167,  167,  167,  167,  167,
      171,  171,  171,  171,  171,  171,  171,  171,  167,  167,

      167,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  167,  172,  173,  174,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  175,  175,  175,  175,
      175,  175,  175,  175,  172,  172,  172,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  172,  187,  195,  195,  263,  188,  282,  264,
      195,  195,  195,  215,  224,  195,  384,  216,  225,  187,
      283,  197,  197,  188,  239,  240,  265,  197,  197,  197,
      195,  383,  197,  263,  190,  191,  264,  192,  193,  258,

      259,  259,  260,  265,  301,  285,  300,  197,  261,  261,
      190,  191,  262,  192,  193,  302,  195,  195,  195,  195,
      230,  231,  379,  261,  232,  243,  240,  303,  245,  337,
      337,  337,  246,  197,  197,  197,  197,  252,  253,  338,
      378,  246,  420,  341,  271,  282,  306,  343,  276,  282,
      420,  307,  277,  338,  282,  277,  308,  283,  309,  289,
      289,  283,  195,  195,  195,  195,  283,  195,  195,  362,
      195,  290,  290,  195,  341,  271,  343,  276,  377,  197,
      197,  197,  197,  282,  197,  197,  197,  197,  282,  289,
      197,  392,  376,  348,  357,  283,  330,  358,  195,  195,

      283,  290,  195,  359,  195,  362,  360,  363,  197,  361,
      396,  364,  337,  337,  337,  197,  197,  195,  380,  197,
      381,  197,  197,  282,  195,  399,  386,  197,  400,  400,
      400,  282,  380,  392,  197,  283,  393,  289,  405,  391,
      394,  197,  195,  283,  407,  395,  396,  195,  282,  290,
      197,  400,  400,  400,  330,  197,  412,  397,  405,  197,
      283,  197,  195,  197,  197,  404,  400,  400,  400,  407,
      414,  401,  418,  197,  381,  197,  415,  412,  419,  197,
      414,  415,  406,  415,  283,  419,  197,  197,  375,  408,
      410,  418,  374,  417,  197,  197,  237,  197,  417,  371,

      417,  370,  197,  283,  413,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  180,  180,
      317,  180,  317,  180,  180,  180,  180,  180,  180,  182,
      369,  182,  182,  189,  368,  367,  189,  366,  365,  356,
      189,  189,  196,  355,  354,  353,  352,  196,  196,  196,
      196,  208,  351,  349,  288,  208,  208,  208,  208,  208,
      208,  208,  212,  212,  286,  212,  346,  212,  212,  212,

      212,  212,  212,  220,  281,  220,  220,  222,  345,  222,
      222,  223,  344,  278,  342,  340,  336,  223,  223,  223,
      223,  223,  226,  335,  254,  226,  334,  332,  330,  226,
      226,  228,  228,  329,  228,  228,  228,  228,  228,  228,
      228,  228,  233,  233,  328,  233,  233,  233,  233,  233,
      233,  233,  233,  235,  327,  235,  235,  238,  238,  237,
      238,  238,  244,  236,  322,  320,  319,  244,  244,  244,
      244,  244,  244,  248,  317,  316,  221,  248,  248,  250,
      250,  217,  250,  217,  250,  250,  250,  250,  250,  250,
      256,  256,  211,  256,  256,  256,  256,  256,  256,  256,

      256,  266,  315,  266,  266,  267,  267,  314,  207,  267,
      267,  267,  267,  267,  267,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  272,  272,  312,  311,
      272,  272,  272,  272,  272,  272,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  277,  277,  277,
      310,  277,  277,  277,  277,  277,  277,  277,  284,  194,
      298,  297,  284,  284,  296,  284,  284,  287,  295,  287,
      287,  291,  294,  292,  178,  291,  291,  288,  291,  291,
      293,  293,  286,  293,  293,  293,  293,  293,  293,  293,
      293,  299,  281,  280,  279,  278,  299,  299,  299,  299,

      304,  304,  304,  304,  278,  304,  304,  304,  304,  304,
      304,  305,  305,  305,  305,  305,  305,  305,  273,  305,
      305,  305,  313,  313,  313,  313,  268,  313,  313,  313,
      313,  313,  313,  318,  257,  255,  254,  251,  318,  249,
      318,  318,  321,  321,  247,  321,  321,  321,  321,  321,
      321,  321,  321,  323,  323,  242,  323,  323,  323,  323,
      323,  323,  323,  323,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  326,  326,  331,  241,  237,
      236,  234,  331,  229,  331,  331,  333,  333,  227,  333,
      333,  333,  333,  333,  333,  333,  333,  339,  221,  339,

      347,  217,  211,  210,  209,  207,  204,  347,  347,  350,
      203,  202,  194,  186,  185,  184,  350,  350,  372,  372,
      183,  372,  372,  372,  372,  372,  372,  372,  372,  325,
      325,  325,  325,  181,  325,  325,  325,  325,  325,  325,
      373,  373,  179,  373,  373,  385,  178,  420,  143,  385,
      385,  143,  385,  385,  387,   49,   49,   49,  387,  387,
       49,  387,  387,  409,  409,  416,  420,  420,  420,  420,
      416,  416,  416,  416,   47,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420
    } ;

static yyconst flex_int16_t yy_chk[1522] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    5,  411,    5,    6,    6,    5,    6,    6,

       51,    6,    9,    9,   51,    9,   10,   10,    9,   10,
       11,  403,   10,   11,   12,   12,   17,   17,   12,   17,
       17,   73,   17,   18,   18,   73,   18,   18,   17,   18,
       82,  402,    5,  390,   82,   18,    6,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       84,   20,  389,   86,   84,   19,   19,   20,   20,   19,
       86,   20,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,  137,   25,   63,
      137,   25,   26,   26,   26,  218,   26,   27,   27,   26,
       27,   27,  218,   27,   28,   28,   63,   28,   28,  339,
       28,   29,   29,   64,   29,   29,   98,   29,   29,   65,
       98,  114,  114,  339,   29,   29,   29,   35,   29,   35,
       64,   67,   35,  388,   29,   29,   65,   29,   36,   37,
       36,   37,  373,   36,   37,  119,  119,  367,   67,   64,

       66,   29,   65,   35,   29,   29,   30,   30,  138,   30,
       30,  138,   30,   30,   36,   37,  356,   66,   67,   30,
       30,   30,   38,   30,   38,  152,  152,   38,  138,   30,
       30,  121,   30,  102,  102,  121,  355,  102,  126,  126,
       66,  354,  126,  156,  156,  138,   30,  353,   38,   30,
       30,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   39,   40,   39,

       40,  165,   39,   40,  135,  135,  161,  175,  161,  234,
      176,  161,  234,  165,  176,  349,  135,  205,  213,  175,
      346,  205,  213,   39,   40,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   61,  189,  195,  140,   61,  166,  140,
      190,  191,  196,  215,  224,  192,  345,  215,  224,  187,
      166,  189,  195,  187,  239,  239,  140,  190,  191,  196,
      193,  344,  192,  265,   61,   61,  265,   61,   61,  134,

      134,  134,  134,  140,  191,  166,  190,  193,  134,  134,
      187,  187,  134,  187,  187,  192,  198,  199,  200,  201,
      230,  230,  336,  134,  230,  243,  243,  193,  245,  258,
      258,  258,  245,  198,  199,  200,  201,  252,  252,  259,
      335,  252,  259,  270,  270,  282,  198,  275,  275,  284,
      278,  199,  278,  259,  285,  278,  200,  282,  201,  289,
      291,  284,  299,  301,  300,  302,  285,  303,  306,  307,
      308,  289,  291,  309,  341,  341,  343,  343,  334,  299,
      301,  300,  302,  347,  303,  306,  307,  308,  348,  350,
      309,  358,  332,  285,  300,  347,  331,  301,  357,  359,

      348,  350,  360,  302,  361,  362,  303,  308,  358,  306,
      363,  309,  337,  337,  337,  357,  359,  364,  337,  360,
      337,  361,  362,  385,  391,  380,  348,  363,  380,  380,
      380,  386,  337,  392,  364,  385,  359,  387,  393,  357,
      360,  391,  394,  386,  395,  361,  396,  397,  401,  387,
      392,  399,  399,  399,  330,  393,  404,  364,  405,  394,
      401,  395,  406,  396,  397,  391,  400,  400,  400,  407,
      408,  386,  410,  404,  400,  405,  409,  412,  413,  406,
      414,  415,  394,  416,  410,  419,  407,  408,  328,  397,
      401,  418,  327,  409,  412,  413,  326,  414,  415,  320,

      416,  319,  419,  418,  406,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  434,
      318,  434,  317,  434,  434,  434,  434,  434,  434,  435,
      315,  435,  435,  436,  314,  312,  436,  311,  310,  298,
      436,  436,  437,  297,  296,  295,  294,  437,  437,  437,
      437,  438,  292,  290,  288,  438,  438,  438,  438,  438,
      438,  438,  439,  439,  286,  439,  283,  439,  439,  439,

      439,  439,  439,  440,  281,  440,  440,  441,  280,  441,
      441,  442,  279,  277,  273,  268,  257,  442,  442,  442,
      442,  442,  443,  255,  254,  443,  251,  249,  248,  443,
      443,  444,  444,  247,  444,  444,  444,  444,  444,  444,
      444,  444,  445,  445,  242,  445,  445,  445,  445,  445,
      445,  445,  445,  446,  241,  446,  446,  447,  447,  238,
      447,  447,  448,  236,  232,  229,  227,  448,  448,  448,
      448,  448,  448,  449,  226,  225,  221,  449,  449,  450,
      450,  217,  450,  216,  450,  450,  450,  450,  450,  450,
      451,  451,  211,  451,  451,  451,  451,  451,  451,  451,

      451,  452,  210,  452,  452,  453,  453,  209,  206,  453,
      453,  453,  453,  453,  453,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  455,  455,  204,  203,
      455,  455,  455,  455,  455,  455,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  457,
      202,  457,  457,  457,  457,  457,  457,  457,  458,  188,
      186,  185,  458,  458,  184,  458,  458,  459,  183,  459,
      459,  460,  181,  179,  178,  460,  460,  173,  460,  460,
      461,  461,  168,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  163,  160,  159,  158,  462,  462,  462,  462,

      463,  463,  463,  463,  157,  463,  463,  463,  463,  463,
      463,  464,  464,  464,  464,  464,  464,  464,  155,  464,
      464,  464,  465,  465,  465,  465,  150,  465,  465,  465,
      465,  465,  465,  466,  132,  130,  128,  125,  466,  123,
      466,  466,  467,  467,  122,  467,  467,  467,  467,  467,
      467,  467,  467,  468,  468,  118,  468,  468,  468,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  470,  470,  471,  117,  113,
      110,  103,  471,  101,  471,  471,  472,  472,   99,  472,
      472,  472,  472,  472,  472,  472,  472,  473,   90,  473,

      474,   85,   80,   79,   78,   74,   72,  474,  474,  475,
       71,   70,   62,   60,   59,   58,  475,  475,  476,  476,
       57,  476,  476,  476,  476,  476,  476,  476,  476,  477,
      477,  477,  477,   55,  477,  477,  477,  477,  477,  477,
      478,  478,   53,  478,  478,  479,   52,   47,   32,  479,
      479,   31,  479,  479,  480,    8,    7,    2,  480,  480,
        1,  480,  480,  481,  481,  482,    0,    0,    0,    0,
      482,  482,  482,  482,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420
    } ;

extern int pyscanYY_flex_debug;
int pyscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscanYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * $Id: pyscanner.cpp,v 1.2 2014/11/19 09:12:52 wtchen Exp $
 *
 * Copyright (C) 1997-2006 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
//static bool             g_expectModuleDocs;
static int              g_stringContext;
static QCString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);
static QCString         g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;
//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->objc       = FALSE; //insideObjC;
  current->parent     = current_root;
  initGroupInfo(current);
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::SCOPE_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = pyscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d\n",
  //    doc.data(),brief,docBlockInBody);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	brief ? current->briefLine : current->docLine,   // line of block start
	docBlockInBody ? FALSE : brief, 
	docBlockJavaStyle, // javadoc style
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef()
{
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1456 "<stdout>"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscanYYwrap (void );
#else
extern int pyscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( pyscanYYtext, pyscanYYleng, 1, pyscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscanYYin))==0 && ferror(pyscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscanYYlex (void);

#define YY_DECL int pyscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscanYYtext and pyscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscanYYtext[pyscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 485 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1639 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscanYYin )
			pyscanYYin = stdin;

		if ( ! pyscanYYout )
			pyscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
		}

		pyscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 421 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1475 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
#line 492 "pyscanner.l"
case 2:
YY_RULE_SETUP
#line 492 "pyscanner.l"
{ // start of a function/method definition
      			  g_indent=computeIndent(pyscanYYtext);
                          //g_expectModuleDocs = FALSE;
			  current->fileName  = yyFileName;
			  current->startLine = yyLineNr;
			  current->bodyLine  = yyLineNr;
			  current->section = Entry::FUNCTION_SEC;
			  current->protection = protection = Public;
			  current->objc = FALSE;
			  current->virt = Normal;
			  current->stat = FALSE;
			  current->mtype = mtype = Method;
			  current->type.resize(0);
			  current->name.resize(0);
			  current->args.resize(0);
			  current->argList->clear();
			  BEGIN( FunctionDec );
                       }
	YY_BREAK
case 3:
#line 512 "pyscanner.l"
case 4:
YY_RULE_SETUP
#line 512 "pyscanner.l"
{  // start of a class definition
      			  g_indent=computeIndent(pyscanYYtext);
                          //g_expectModuleDocs = FALSE;
			  current->section = Entry::CLASS_SEC;
			  current->argList->clear();
			  current->type += "class" ;
			  current->fileName  = yyFileName;
			  current->bodyLine  = yyLineNr;

			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 524 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 524 "pyscanner.l"
{ // start of an from import
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 529 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 529 "pyscanner.l"
{ // start of an import statement
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 532 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscanYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 541 "pyscanner.l"
{ // start of a single quoted string
       			  g_stringContext=YY_START;
			  g_copyString=0;
                          BEGIN( SingleQuoteString );
                       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 546 "pyscanner.l"
{ // start of a double quoted string
       			  g_stringContext=YY_START;
			  g_copyString=0;
                          BEGIN( DoubleQuoteString );
                       }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 552 "pyscanner.l"
{ // normal comment 
      		      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 554 "pyscanner.l"
{ // some other identifier
		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 556 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscanYYtext);
                      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 559 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 565 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 569 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 574 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 579 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 20:
YY_RULE_SETUP
#line 586 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscanYYtext;
		      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 589 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 592 "pyscanner.l"
{
                        yyLineNr++;
                        BEGIN(Search);
                      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 596 "pyscanner.l"
{
		      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 598 "pyscanner.l"
{
                        unput(*pyscanYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 25:
YY_RULE_SETUP
#line 605 "pyscanner.l"
{ // import all
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 616 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 627 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 631 "pyscanner.l"
{
		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 633 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 640 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscanYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 650 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 654 "pyscanner.l"
{
		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 656 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 34:
YY_RULE_SETUP
#line 663 "pyscanner.l"
{
                        //printf("Found member variable %s in %s\n",&pyscanYYtext[5],current_root->name.data());
			current->name=&pyscanYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 681 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 686 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 691 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 695 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 700 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 705 "pyscanner.l"

	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 706 "pyscanner.l"
{ yyLineNr++; }
	YY_BREAK


case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 710 "pyscanner.l"
{
                        //fprintf(stderr,"indent %d<=%d\n",computeIndent(&pyscanYYtext[1]),g_indent);
                        if (computeIndent(&pyscanYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
                      }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 729 "pyscanner.l"
{
                        if (computeIndent(&pyscanYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 747 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 44:
/* rule 44 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 751 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 754 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscanYYtext;
			g_curIndent = computeIndent(pyscanYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef();
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 764 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 771 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 778 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 782 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscanYYtext;
      		      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 785 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 788 "pyscanner.l"
{ yyLineNr++; 
      		        current->program+=pyscanYYtext;
		      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 791 "pyscanner.l"
{ // any character
      		        current->program+=*pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 796 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 801 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 806 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 56:
YY_RULE_SETUP
#line 815 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscanYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 826 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 58:
YY_RULE_SETUP
#line 832 "pyscanner.l"
{
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 835 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscanYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 842 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
      			  QCString defVal=&pyscanYYtext[1];
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 851 "pyscanner.l"
{ // end of parameter list
                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 854 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 860 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 64:
YY_RULE_SETUP
#line 866 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 65:
#line 871 "pyscanner.l"
case 66:
YY_RULE_SETUP
#line 871 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
       			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscanYYtext;
			  }
       			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 886 "pyscanner.l"
{
			    g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 889 "pyscanner.l"
{
       			    g_defVal+=*pyscanYYtext;
			    yyLineNr++;
       			}
	YY_BREAK


case 69:
/* rule 69 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 897 "pyscanner.l"
{ // new def at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 70:
/* rule 70 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 904 "pyscanner.l"
{  // start of a special comment at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 71:
/* rule 71 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 911 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 914 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 918 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscanYYtext);
			//fprintf(stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class
			{
			  endOfDef();
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 936 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 943 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 950 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 954 "pyscanner.l"
{ 
      		        current->program+=*pyscanYYtext;
			yyLineNr++; 
		      }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 958 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 961 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscanYYtext;
                      }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 965 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 971 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 81:
YY_RULE_SETUP
#line 978 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscanYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 82:
YY_RULE_SETUP
#line 1004 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1007 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1012 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscanYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1022 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
                               }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1027 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1032 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1037 "pyscanner.l"
{
      				 current->program=pyscanYYtext;
			         current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscanYYtext);
				 bodyEntry = current;
				 //fprintf(stderr,"setting indent %d\n",g_curIndent);
				 //printf("current->program=[%s]\n",current->program.data());
				 g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1048 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 90:
YY_RULE_SETUP
#line 1061 "pyscanner.l"
{ // the assignment operator
                      }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1063 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1065 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1070 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1075 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1082 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1089 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1097 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1104 "pyscanner.l"
{ // typle
			current->type = "tuple";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1112 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1120 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1128 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1131 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1134 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 104:
YY_RULE_SETUP
#line 1141 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomStart==*pyscanYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1148 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomEnd==*pyscanYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1159 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1162 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1165 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
     			yyLineNr++;
     		      }
	YY_BREAK


case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1173 "pyscanner.l"
{
                        yyLineNr++;
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1178 "pyscanner.l"
{ 
                        unput(*pyscanYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1183 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 111:
#line 1190 "pyscanner.l"
case 112:
YY_RULE_SETUP
#line 1190 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    if (g_specialBlock)
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //if (g_expectModuleDocs)
			      //{
			      //  actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      //}
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
		    	    //g_expectModuleDocs=FALSE;
			    if ((docBlockContext==ClassBody && !g_hideClassDocs) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscanYYtext;
			    }
			    g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscanYYtext;
                          }
                        }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1226 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscanYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    //fprintf(stderr,"stripping indent %d\n",g_curIndent);
			  }
			  else
			  {
			    //fprintf(stderr,"not stripping: %d<%d\n",indent,g_curIndent);
			    docBlock += pyscanYYtext;
			  }
      			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1240 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
                        }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1243 "pyscanner.l"
{
      			  yyLineNr++;
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1247 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK


case 117:
YY_RULE_SETUP
#line 1253 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 1255 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  yyLineNr++;
      			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1261 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscanYYtext;
      			}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1264 "pyscanner.l"
{ // new line that ends the comment
			  //if (g_expectModuleDocs)
			  //{
			  //  docBlock.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			  //}
		    	  //g_expectModuleDocs=FALSE;
			  handleCommentBlock(docBlock, docBrief);
      			  yyLineNr++;
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1274 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscanYYtext;
      			}
	YY_BREAK


case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1280 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1284 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1287 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1290 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1294 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1297 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1303 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1307 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1310 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1313 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1317 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1320 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 134:
#line 1327 "pyscanner.l"
case 135:
YY_RULE_SETUP
#line 1327 "pyscanner.l"
{
                          *g_copyString += pyscanYYtext;
			  //printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    BEGIN(docBlockContext);
			  }
                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1337 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscanYYtext;
                        }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1341 "pyscanner.l"
{
      			  yyLineNr++;
                          *g_copyString += pyscanYYtext;
      			}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1345 "pyscanner.l"
{
                          *g_copyString += *pyscanYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
  */
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1360 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1367 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1374 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3182 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscanYYin at a new source and called
			 * pyscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscanYYrestart(pyscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 421 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 421 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 420);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscanYYrestart(pyscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
	}

	pyscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscanYYpop_buffer_state();
	 *		pyscanYYpush_buffer_state(new_buffer);
     */
	pyscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscanYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscanYY_create_buffer()
 * 
 */
    void pyscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscanYYfree((void *) b->yy_ch_buf  );

	pyscanYYfree((void *) b  );
}

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscanYYrestart() or at EOF.
 */
    static void pyscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscanYY_init_buffer was _probably_
     * called from pyscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscanYYensure_buffer_stack();

	/* This block is copied from pyscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscanYY_switch_to_buffer. */
	pyscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char * yystr )
{
    
	return pyscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscanYYtext[pyscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscanYYget_lineno  (void)
{
        
    return pyscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscanYYget_in  (void)
{
        return pyscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscanYYget_out  (void)
{
        return pyscanYYout;
}

/** Get the length of the current token.
 * 
 */
int pyscanYYget_leng  (void)
{
        return pyscanYYleng;
}

/** Get the current token.
 * 
 */

char *pyscanYYget_text  (void)
{
        return pyscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscanYYset_lineno (int  line_number )
{
    
    pyscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscanYY_switch_to_buffer
 */
void pyscanYYset_in (FILE *  in_str )
{
        pyscanYYin = in_str ;
}

void pyscanYYset_out (FILE *  out_str )
{
        pyscanYYout = out_str ;
}

int pyscanYYget_debug  (void)
{
        return pyscanYY_flex_debug;
}

void pyscanYYset_debug (int  bdebug )
{
        pyscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscanYYin = stdin;
    pyscanYYout = stdout;
#else
    pyscanYYin = (FILE *) 0;
    pyscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscanYYlex_init()
     */
    return 0;
}

/* pyscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1374 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->sublist);
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscanYYrestart( pyscanYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent)
      {
        current_root = ce->parent;
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr = ce->startLine ;
      if (current) delete current;
      current = new Entry;

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscanYYlex() ;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  //g_expectModuleDocs = TRUE;
  g_specialBlock = FALSE;
  //g_insideConstructor = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    if (!g_moduleScope.isEmpty())
    {
      g_moduleScope+="::";
    }
    g_moduleScope+=fi.baseName();

    current            = new Entry;
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    pyscanYYrestart( pyscanYYin );
    BEGIN( Search );
    pyscanYYlex();

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  //g_expectModuleDocs = FALSE;
  g_specialBlock = FALSE;
  //g_insideConstructor = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscanYYrestart( pyscanYYin );

  BEGIN( FunctionDec );

  pyscanYYlex();

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(orgState);
  pyscanYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


